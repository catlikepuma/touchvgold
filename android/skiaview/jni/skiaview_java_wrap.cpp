/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#define SWIG_JAVA_NO_DETACH_CURRENT_THREAD
#define SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_skiaviewJNI = NULL;
    jmethodID director_methids[37];
  }
}

#include "GiCoreView.h"
#include "GiCanvasBase.h"
#include <mgshapes.h>
#include <mgshape.h>
#include <mgbasicsp.h>
#include <mgstoragebs.h>
#include <mgjsonstorage.h>


#include <jni.h>
#ifdef ANDROID
#include <android/log.h>
#endif

struct TmpJOBJ {
    JNIEnv* env;
    jobject* jo;
    template <class T>
    TmpJOBJ(JNIEnv* e, T* v) : env(e), jo((jobject*)v) { }
    ~TmpJOBJ() { if (*jo) { env->DeleteLocalRef(*jo); *jo = 0; } }
};
JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* /*ajvm*/, void* /*reserved*/) {
    return JNI_VERSION_1_6;
}



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "skiaview_java_wrap.h"

SwigDirector_GiCanvasBase::SwigDirector_GiCanvasBase(JNIEnv *jenv) : GiCanvasBase(), Swig::Director(jenv) {
}

SwigDirector_GiCanvasBase::~SwigDirector_GiCanvasBase() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


float SwigDirector_GiCanvasBase::getScreenDpi() const {
  float c_result = SwigValueInit< float >() ;
  jfloat jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return GiCanvasBase::getScreenDpi();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jfloat) jenv->CallStaticFloatMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[0], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = (float)jresult; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

GiColor SwigDirector_GiCanvasBase::getBkColor() const {
  GiColor c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  GiColor *argp ;
  
  if (!swig_override[1]) {
    return GiCanvasBase::getBkColor();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[1], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(GiColor **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type GiColor");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

GiColor SwigDirector_GiCanvasBase::setBkColor(GiColor const &color) {
  GiColor c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jcolor = 0 ;
  GiColor *argp ;
  
  if (!swig_override[2]) {
    return GiCanvasBase::setBkColor(color);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(GiColor **)&jcolor = (GiColor *) &color; 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[2], swigjobj, jcolor);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    argp = *(GiColor **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type GiColor");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_GiCanvasBase::setNeedRedraw() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[3]) {
    GiCanvasBase::setNeedRedraw();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[3], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_GiCanvasBase::drawHandle(float x, float y, int index) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jfloat jx  ;
  jfloat jy  ;
  jint jindex  ;
  
  if (!swig_override[4]) {
    return GiCanvasBase::drawHandle(x,y,index);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jfloat) x;
    jy = (jfloat) y;
    jindex = (jint) index;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[4], swigjobj, jx, jy, jindex);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_GiCanvasBase::penChanged(int argb, float penWidth, int lineStyle) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jargb  ;
  jfloat jpenWidth  ;
  jint jlineStyle  ;
  
  if (!swig_override[5]) {
    GiCanvasBase::penChanged(argb,penWidth,lineStyle);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jargb = (jint) argb;
    jpenWidth = (jfloat) penWidth;
    jlineStyle = (jint) lineStyle;
    jenv->CallStaticVoidMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[5], swigjobj, jargb, jpenWidth, jlineStyle);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiCanvasBase::brushChanged(int argb) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jargb  ;
  
  if (!swig_override[6]) {
    GiCanvasBase::brushChanged(argb);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jargb = (jint) argb;
    jenv->CallStaticVoidMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[6], swigjobj, jargb);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_GiCanvasBase::isContextActionsVisible() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[7]) {
    return GiCanvasBase::isContextActionsVisible();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[7], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_GiCanvasBase::showContextActions(mgvector< int > const &actions, float x, float y, float w, float h) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jactions = 0 ;
  jfloat jx  ;
  jfloat jy  ;
  jfloat jw  ;
  jfloat jh  ;
  
  if (!swig_override[8]) {
    return GiCanvasBase::showContextActions(actions,x,y,w,h);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(mgvector< int > **)&jactions = (mgvector< int > *) &actions; 
    jx = (jfloat) x;
    jy = (jfloat) y;
    jw = (jfloat) w;
    jh = (jfloat) h;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[8], swigjobj, jactions, jx, jy, jw, jh);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_GiCanvasBase::drawLine(float x1, float y1, float x2, float y2) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jfloat jx1  ;
  jfloat jy1  ;
  jfloat jx2  ;
  jfloat jy2  ;
  
  if (!swig_override[9]) {
    return GiCanvasBase::drawLine(x1,y1,x2,y2);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx1 = (jfloat) x1;
    jy1 = (jfloat) y1;
    jx2 = (jfloat) x2;
    jy2 = (jfloat) y2;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[9], swigjobj, jx1, jy1, jx2, jy2);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_GiCanvasBase::drawLines(mgvector< float > const &pxs) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpxs = 0 ;
  
  if (!swig_override[10]) {
    return GiCanvasBase::drawLines(pxs);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(mgvector< float > **)&jpxs = (mgvector< float > *) &pxs; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[10], swigjobj, jpxs);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_GiCanvasBase::drawBeziers(mgvector< float > const &pxs) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpxs = 0 ;
  
  if (!swig_override[11]) {
    return GiCanvasBase::drawBeziers(pxs);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(mgvector< float > **)&jpxs = (mgvector< float > *) &pxs; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[11], swigjobj, jpxs);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_GiCanvasBase::drawPolygon(mgvector< float > const &pxs, bool stroke, bool fill) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpxs = 0 ;
  jboolean jstroke  ;
  jboolean jfill  ;
  
  if (!swig_override[12]) {
    return GiCanvasBase::drawPolygon(pxs,stroke,fill);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(mgvector< float > **)&jpxs = (mgvector< float > *) &pxs; 
    jstroke = (jboolean) stroke;
    jfill = (jboolean) fill;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[12], swigjobj, jpxs, jstroke, jfill);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_GiCanvasBase::drawRect(float x, float y, float w, float h, bool stroke, bool fill) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jfloat jx  ;
  jfloat jy  ;
  jfloat jw  ;
  jfloat jh  ;
  jboolean jstroke  ;
  jboolean jfill  ;
  
  if (!swig_override[13]) {
    return GiCanvasBase::drawRect(x,y,w,h,stroke,fill);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jfloat) x;
    jy = (jfloat) y;
    jw = (jfloat) w;
    jh = (jfloat) h;
    jstroke = (jboolean) stroke;
    jfill = (jboolean) fill;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[13], swigjobj, jx, jy, jw, jh, jstroke, jfill);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_GiCanvasBase::drawEllipse(float x, float y, float w, float h, bool stroke, bool fill) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jfloat jx  ;
  jfloat jy  ;
  jfloat jw  ;
  jfloat jh  ;
  jboolean jstroke  ;
  jboolean jfill  ;
  
  if (!swig_override[14]) {
    return GiCanvasBase::drawEllipse(x,y,w,h,stroke,fill);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jfloat) x;
    jy = (jfloat) y;
    jw = (jfloat) w;
    jh = (jfloat) h;
    jstroke = (jboolean) stroke;
    jfill = (jboolean) fill;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[14], swigjobj, jx, jy, jw, jh, jstroke, jfill);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_GiCanvasBase::beginPath() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[15]) {
    return GiCanvasBase::beginPath();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[15], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_GiCanvasBase::moveTo(float x, float y) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jfloat jx  ;
  jfloat jy  ;
  
  if (!swig_override[16]) {
    return GiCanvasBase::moveTo(x,y);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jfloat) x;
    jy = (jfloat) y;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[16], swigjobj, jx, jy);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_GiCanvasBase::lineTo(float x, float y) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jfloat jx  ;
  jfloat jy  ;
  
  if (!swig_override[17]) {
    return GiCanvasBase::lineTo(x,y);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jfloat) x;
    jy = (jfloat) y;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[17], swigjobj, jx, jy);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_GiCanvasBase::bezierTo(float c1x, float c1y, float c2x, float c2y, float x, float y) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jfloat jc1x  ;
  jfloat jc1y  ;
  jfloat jc2x  ;
  jfloat jc2y  ;
  jfloat jx  ;
  jfloat jy  ;
  
  if (!swig_override[18]) {
    return GiCanvasBase::bezierTo(c1x,c1y,c2x,c2y,x,y);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jc1x = (jfloat) c1x;
    jc1y = (jfloat) c1y;
    jc2x = (jfloat) c2x;
    jc2y = (jfloat) c2y;
    jx = (jfloat) x;
    jy = (jfloat) y;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[18], swigjobj, jc1x, jc1y, jc2x, jc2y, jx, jy);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_GiCanvasBase::closePath() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[19]) {
    return GiCanvasBase::closePath();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[19], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_GiCanvasBase::endPath(bool stroke, bool fill) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jstroke  ;
  jboolean jfill  ;
  
  if (!swig_override[20]) {
    return GiCanvasBase::endPath(stroke,fill);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jstroke = (jboolean) stroke;
    jfill = (jboolean) fill;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[20], swigjobj, jstroke, jfill);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_GiCanvasBase::clearWindow() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[21]) {
    GiCanvasBase::clearWindow();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[21], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiCanvasBase::clearCachedBitmap(bool clearAll) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jclearAll  ;
  
  if (!swig_override[22]) {
    GiCanvasBase::clearCachedBitmap(clearAll);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jclearAll = (jboolean) clearAll;
    jenv->CallStaticVoidMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[22], swigjobj, jclearAll);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_GiCanvasBase::drawCachedBitmap(float x, float y, bool secondBmp) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jfloat jx  ;
  jfloat jy  ;
  jboolean jsecondBmp  ;
  
  if (!swig_override[24]) {
    return GiCanvasBase::drawCachedBitmap(x,y,secondBmp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jfloat) x;
    jy = (jfloat) y;
    jsecondBmp = (jboolean) secondBmp;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[24], swigjobj, jx, jy, jsecondBmp);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_GiCanvasBase::saveCachedBitmap(bool secondBmp) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jsecondBmp  ;
  
  if (!swig_override[28]) {
    GiCanvasBase::saveCachedBitmap(secondBmp);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsecondBmp = (jboolean) secondBmp;
    jenv->CallStaticVoidMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[28], swigjobj, jsecondBmp);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_GiCanvasBase::hasCachedBitmap(bool secondBmp) const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jsecondBmp  ;
  
  if (!swig_override[30]) {
    return GiCanvasBase::hasCachedBitmap(secondBmp);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jsecondBmp = (jboolean) secondBmp;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[30], swigjobj, jsecondBmp);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_GiCanvasBase::isBufferedDrawing() const {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[32]) {
    return GiCanvasBase::isBufferedDrawing();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[32], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_GiCanvasBase::clipBoxChanged(float x, float y, float w, float h) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jfloat jx  ;
  jfloat jy  ;
  jfloat jw  ;
  jfloat jh  ;
  
  if (!swig_override[33]) {
    GiCanvasBase::clipBoxChanged(x,y,w,h);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jx = (jfloat) x;
    jy = (jfloat) y;
    jw = (jfloat) w;
    jh = (jfloat) h;
    jenv->CallStaticVoidMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[33], swigjobj, jx, jy, jw, jh);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiCanvasBase::antiAliasModeChanged(bool antiAlias) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jantiAlias  ;
  
  if (!swig_override[34]) {
    GiCanvasBase::antiAliasModeChanged(antiAlias);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jantiAlias = (jboolean) antiAlias;
    jenv->CallStaticVoidMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[34], swigjobj, jantiAlias);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_GiCanvasBase::drawImage(char const *name, float xc, float yc, float w, float h, float angle) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0; TmpJOBJ jtmp(jenv, &jname);
  jfloat jxc  ;
  jfloat jyc  ;
  jfloat jw  ;
  jfloat jh  ;
  jfloat jangle  ;
  
  if (!swig_override[35]) {
    return GiCanvasBase::drawImage(name,xc,yc,w,h,angle);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = 0;
    if (name) {
      jname = jenv->NewStringUTF((const char *)name);
      if (!jname) return c_result;
    }
    jxc = (jfloat) xc;
    jyc = (jfloat) yc;
    jw = (jfloat) w;
    jh = (jfloat) h;
    jangle = (jfloat) angle;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[35], swigjobj, jname, jxc, jyc, jw, jh, jangle);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_GiCanvasBase::rawTextCenter(char const *text, float x, float y, float h) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jtext = 0 ;
  jfloat jx  ;
  jfloat jy  ;
  jfloat jh  ;
  
  if (!swig_override[36]) {
    GiCanvasBase::rawTextCenter(text,x,y,h);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jtext = 0;
    if (text) {
      jtext = jenv->NewStringUTF((const char *)text);
      if (!jtext) return ;
    }
    jx = (jfloat) x;
    jy = (jfloat) y;
    jh = (jfloat) h;
    jenv->CallStaticVoidMethod(Swig::jclass_skiaviewJNI, Swig::director_methids[36], swigjobj, jtext, jx, jy, jh);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_GiCanvasBase::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getScreenDpi", "()F", NULL 
    },
    {
      "getBkColor", "()Ltouchvg/jni/GiColor;", NULL 
    },
    {
      "setBkColor", "(Ltouchvg/jni/GiColor;)Ltouchvg/jni/GiColor;", NULL 
    },
    {
      "setNeedRedraw", "()V", NULL 
    },
    {
      "drawHandle", "(FFI)Z", NULL 
    },
    {
      "penChanged", "(IFI)V", NULL 
    },
    {
      "brushChanged", "(I)V", NULL 
    },
    {
      "isContextActionsVisible", "()Z", NULL 
    },
    {
      "showContextActions", "(Ltouchvg/jni/Ints;FFFF)Z", NULL 
    },
    {
      "drawLine", "(FFFF)Z", NULL 
    },
    {
      "drawLines", "(Ltouchvg/jni/Floats;)Z", NULL 
    },
    {
      "drawBeziers", "(Ltouchvg/jni/Floats;)Z", NULL 
    },
    {
      "drawPolygon", "(Ltouchvg/jni/Floats;ZZ)Z", NULL 
    },
    {
      "drawRect", "(FFFFZZ)Z", NULL 
    },
    {
      "drawEllipse", "(FFFFZZ)Z", NULL 
    },
    {
      "beginPath", "()Z", NULL 
    },
    {
      "moveTo", "(FF)Z", NULL 
    },
    {
      "lineTo", "(FF)Z", NULL 
    },
    {
      "bezierTo", "(FFFFFF)Z", NULL 
    },
    {
      "closePath", "()Z", NULL 
    },
    {
      "endPath", "(ZZ)Z", NULL 
    },
    {
      "clearWindow", "()V", NULL 
    },
    {
      "clearCachedBitmap", "(Z)V", NULL 
    },
    {
      "clearCachedBitmap", "()V", NULL 
    },
    {
      "drawCachedBitmap", "(FFZ)Z", NULL 
    },
    {
      "drawCachedBitmap", "(FF)Z", NULL 
    },
    {
      "drawCachedBitmap", "(F)Z", NULL 
    },
    {
      "drawCachedBitmap", "()Z", NULL 
    },
    {
      "saveCachedBitmap", "(Z)V", NULL 
    },
    {
      "saveCachedBitmap", "()V", NULL 
    },
    {
      "hasCachedBitmap", "(Z)Z", NULL 
    },
    {
      "hasCachedBitmap", "()Z", NULL 
    },
    {
      "isBufferedDrawing", "()Z", NULL 
    },
    {
      "clipBoxChanged", "(FFFF)V", NULL 
    },
    {
      "antiAliasModeChanged", "(Z)V", NULL 
    },
    {
      "drawImage", "(Ljava/lang/String;FFFFF)Z", NULL 
    },
    {
      "rawTextCenter", "(Ljava/lang/String;FFF)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("touchvg/jni/GiCanvasBase");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 37; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_VECTOR_12D_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  tagVECTOR2D *arg1 = (tagVECTOR2D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagVECTOR2D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_VECTOR_12D_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  tagVECTOR2D *arg1 = (tagVECTOR2D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagVECTOR2D **)&jarg1; 
  result = (float) ((arg1)->x);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_VECTOR_12D_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  tagVECTOR2D *arg1 = (tagVECTOR2D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagVECTOR2D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_VECTOR_12D_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  tagVECTOR2D *arg1 = (tagVECTOR2D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagVECTOR2D **)&jarg1; 
  result = (float) ((arg1)->y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1VECTOR_12D(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tagVECTOR2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tagVECTOR2D *)new tagVECTOR2D();
  *(tagVECTOR2D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1VECTOR_12D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tagVECTOR2D *arg1 = (tagVECTOR2D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tagVECTOR2D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_POINT_12D_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  tagPOINT2D *arg1 = (tagPOINT2D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagPOINT2D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_POINT_12D_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  tagPOINT2D *arg1 = (tagPOINT2D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagPOINT2D **)&jarg1; 
  result = (float) ((arg1)->x);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_POINT_12D_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  tagPOINT2D *arg1 = (tagPOINT2D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagPOINT2D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_POINT_12D_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  tagPOINT2D *arg1 = (tagPOINT2D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagPOINT2D **)&jarg1; 
  result = (float) ((arg1)->y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1POINT_12D(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tagPOINT2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tagPOINT2D *)new tagPOINT2D();
  *(tagPOINT2D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1POINT_12D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tagPOINT2D *arg1 = (tagPOINT2D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tagPOINT2D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_BOX_12D_1xmin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  tagBOX2D *arg1 = (tagBOX2D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagBOX2D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->xmin = arg2;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_BOX_12D_1xmin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  tagBOX2D *arg1 = (tagBOX2D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagBOX2D **)&jarg1; 
  result = (float) ((arg1)->xmin);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_BOX_12D_1ymin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  tagBOX2D *arg1 = (tagBOX2D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagBOX2D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ymin = arg2;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_BOX_12D_1ymin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  tagBOX2D *arg1 = (tagBOX2D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagBOX2D **)&jarg1; 
  result = (float) ((arg1)->ymin);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_BOX_12D_1xmax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  tagBOX2D *arg1 = (tagBOX2D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagBOX2D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->xmax = arg2;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_BOX_12D_1xmax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  tagBOX2D *arg1 = (tagBOX2D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagBOX2D **)&jarg1; 
  result = (float) ((arg1)->xmax);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_BOX_12D_1ymax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  tagBOX2D *arg1 = (tagBOX2D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagBOX2D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ymax = arg2;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_BOX_12D_1ymax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  tagBOX2D *arg1 = (tagBOX2D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagBOX2D **)&jarg1; 
  result = (float) ((arg1)->ymax);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1BOX_12D(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tagBOX2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tagBOX2D *)new tagBOX2D();
  *(tagBOX2D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1BOX_12D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tagBOX2D *arg1 = (tagBOX2D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tagBOX2D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_RECT_12D_1left_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  tagRECT2D *arg1 = (tagRECT2D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagRECT2D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->left = arg2;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_RECT_12D_1left_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  tagRECT2D *arg1 = (tagRECT2D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagRECT2D **)&jarg1; 
  result = (float) ((arg1)->left);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_RECT_12D_1top_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  tagRECT2D *arg1 = (tagRECT2D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagRECT2D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->top = arg2;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_RECT_12D_1top_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  tagRECT2D *arg1 = (tagRECT2D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagRECT2D **)&jarg1; 
  result = (float) ((arg1)->top);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_RECT_12D_1right_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  tagRECT2D *arg1 = (tagRECT2D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagRECT2D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->right = arg2;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_RECT_12D_1right_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  tagRECT2D *arg1 = (tagRECT2D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagRECT2D **)&jarg1; 
  result = (float) ((arg1)->right);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_RECT_12D_1bottom_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  tagRECT2D *arg1 = (tagRECT2D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagRECT2D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->bottom = arg2;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_RECT_12D_1bottom_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  tagRECT2D *arg1 = (tagRECT2D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagRECT2D **)&jarg1; 
  result = (float) ((arg1)->bottom);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1RECT_12D(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tagRECT2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tagRECT2D *)new tagRECT2D();
  *(tagRECT2D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1RECT_12D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tagRECT2D *arg1 = (tagRECT2D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tagRECT2D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MATRIX_12D_1m11_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  tagMATRIX2D *arg1 = (tagMATRIX2D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagMATRIX2D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m11 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_MATRIX_12D_1m11_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  tagMATRIX2D *arg1 = (tagMATRIX2D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagMATRIX2D **)&jarg1; 
  result = (float) ((arg1)->m11);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MATRIX_12D_1m12_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  tagMATRIX2D *arg1 = (tagMATRIX2D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagMATRIX2D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m12 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_MATRIX_12D_1m12_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  tagMATRIX2D *arg1 = (tagMATRIX2D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagMATRIX2D **)&jarg1; 
  result = (float) ((arg1)->m12);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MATRIX_12D_1m21_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  tagMATRIX2D *arg1 = (tagMATRIX2D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagMATRIX2D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m21 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_MATRIX_12D_1m21_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  tagMATRIX2D *arg1 = (tagMATRIX2D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagMATRIX2D **)&jarg1; 
  result = (float) ((arg1)->m21);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MATRIX_12D_1m22_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  tagMATRIX2D *arg1 = (tagMATRIX2D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagMATRIX2D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m22 = arg2;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_MATRIX_12D_1m22_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  tagMATRIX2D *arg1 = (tagMATRIX2D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagMATRIX2D **)&jarg1; 
  result = (float) ((arg1)->m22);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MATRIX_12D_1dx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  tagMATRIX2D *arg1 = (tagMATRIX2D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagMATRIX2D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->dx = arg2;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_MATRIX_12D_1dx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  tagMATRIX2D *arg1 = (tagMATRIX2D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagMATRIX2D **)&jarg1; 
  result = (float) ((arg1)->dx);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MATRIX_12D_1dy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  tagMATRIX2D *arg1 = (tagMATRIX2D *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagMATRIX2D **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->dy = arg2;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_MATRIX_12D_1dy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  tagMATRIX2D *arg1 = (tagMATRIX2D *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(tagMATRIX2D **)&jarg1; 
  result = (float) ((arg1)->dy);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1MATRIX_12D(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  tagMATRIX2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (tagMATRIX2D *)new tagMATRIX2D();
  *(tagMATRIX2D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1MATRIX_12D(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  tagMATRIX2D *arg1 = (tagMATRIX2D *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(tagMATRIX2D **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Tol_1gTol(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Tol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Tol *) &Tol::gTol();
  *(Tol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Tol_1minTol(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Tol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Tol *) &Tol::minTol();
  *(Tol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Tol_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Tol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Tol *)new Tol();
  *(Tol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Tol_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  Tol *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (Tol *)new Tol(arg1,arg2);
  *(Tol **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Tol_1equalPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Tol *arg1 = (Tol *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tol **)&jarg1; 
  result = (float)((Tol const *)arg1)->equalPoint();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Tol_1equalVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Tol *arg1 = (Tol *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tol **)&jarg1; 
  result = (float)((Tol const *)arg1)->equalVector();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_Tol_1setEqualPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Tol *arg1 = (Tol *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tol **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setEqualPoint(arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_Tol_1setEqualVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Tol *arg1 = (Tol *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Tol **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setEqualVector(arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1Tol(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Tol *arg1 = (Tol *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Tol **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1kIdentity(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Vector2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Vector2d *) &Vector2d::kIdentity();
  *(Vector2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1kXAxis(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Vector2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Vector2d *) &Vector2d::kXAxis();
  *(Vector2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1kYAxis(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Vector2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Vector2d *) &Vector2d::kYAxis();
  *(Vector2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Vector2d_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Vector2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Vector2d *)new Vector2d();
  *(Vector2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Vector2d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  Vector2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (Vector2d *)new Vector2d(arg1,arg2);
  *(Vector2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Vector2d_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  VECTOR_2D *arg1 = 0 ;
  Vector2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VECTOR_2D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VECTOR_2D const & reference is null");
    return 0;
  } 
  result = (Vector2d *)new Vector2d((VECTOR_2D const &)*arg1);
  *(Vector2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Matrix2d *arg2 = 0 ;
  Vector2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Matrix2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Matrix2d const & reference is null");
    return 0;
  } 
  result = ((Vector2d const *)arg1)->transform((Matrix2d const &)*arg2);
  *(Vector2d **)&jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1negate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2d **)&jarg1; 
  result = (Vector2d *) &(arg1)->negate();
  *(Vector2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1perpVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2d **)&jarg1; 
  result = ((Vector2d const *)arg1)->perpVector();
  *(Vector2d **)&jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1scaleBy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Vector2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Vector2d *) &(arg1)->scaleBy(arg2,arg3);
  *(Vector2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1dotProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  result = (float)((Vector2d const *)arg1)->dotProduct((Vector2d const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1crossProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  result = (float)((Vector2d const *)arg1)->crossProduct((Vector2d const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1angle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2d **)&jarg1; 
  result = (float)((Vector2d const *)arg1)->angle();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1angle2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2d **)&jarg1; 
  result = (float)((Vector2d const *)arg1)->angle2();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1angleTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  result = (float)((Vector2d const *)arg1)->angleTo((Vector2d const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1angleTo2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  result = (float)((Vector2d const *)arg1)->angleTo2((Vector2d const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2d **)&jarg1; 
  result = (float)((Vector2d const *)arg1)->length();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1lengthSqrd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2d **)&jarg1; 
  result = (float)((Vector2d const *)arg1)->lengthSqrd();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1unitVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2d **)&jarg1; 
  result = ((Vector2d const *)arg1)->unitVector();
  *(Vector2d **)&jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1normalize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Tol *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Tol **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tol const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->normalize((Tol const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1normalize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2d **)&jarg1; 
  result = (bool)(arg1)->normalize();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1isUnitVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Tol *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Tol **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tol const & reference is null");
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isUnitVector((Tol const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1isUnitVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2d **)&jarg1; 
  result = (bool)((Vector2d const *)arg1)->isUnitVector();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1isZeroVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Tol *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Tol **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tol const & reference is null");
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isZeroVector((Tol const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1isZeroVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2d **)&jarg1; 
  result = (bool)((Vector2d const *)arg1)->isZeroVector();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1isEqualTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Tol *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  arg3 = *(Tol **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tol const & reference is null");
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isEqualTo((Vector2d const &)*arg2,(Tol const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1isEqualTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isEqualTo((Vector2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Vector2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Vector2d *) &(arg1)->set(arg2,arg3);
  *(Vector2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1setAngleLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Vector2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Vector2d *) &(arg1)->setAngleLength(arg2,arg3);
  *(Vector2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1setLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  float arg2 ;
  Vector2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (Vector2d *) &(arg1)->setLength(arg2);
  *(Vector2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1isRightOf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isRightOf((Vector2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1isLeftOf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isLeftOf((Vector2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1isParallelTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Tol *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  arg3 = *(Tol **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tol const & reference is null");
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isParallelTo((Vector2d const &)*arg2,(Tol const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1isParallelTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isParallelTo((Vector2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1isCodirectionalTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Tol *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  arg3 = *(Tol **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tol const & reference is null");
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isCodirectionalTo((Vector2d const &)*arg2,(Tol const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1isCodirectionalTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isCodirectionalTo((Vector2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1isOppositeTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Tol *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  arg3 = *(Tol **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tol const & reference is null");
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isOppositeTo((Vector2d const &)*arg2,(Tol const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1isOppositeTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isOppositeTo((Vector2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1isPerpendicularTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Tol *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  arg3 = *(Tol **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tol const & reference is null");
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isPerpendicularTo((Vector2d const &)*arg2,(Tol const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1isPerpendicularTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->isPerpendicularTo((Vector2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1distanceToVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  result = (float)((Vector2d const *)arg1)->distanceToVector((Vector2d const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1projectScaleToVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  result = (float)((Vector2d const *)arg1)->projectScaleToVector((Vector2d const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1projectResolveVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jfloat jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Vector2d *arg3 = 0 ;
  Vector2d *arg4 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  arg3 = *(Vector2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d & reference is null");
    return 0;
  } 
  arg4 = *(Vector2d **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d & reference is null");
    return 0;
  } 
  result = (float)((Vector2d const *)arg1)->projectResolveVector((Vector2d const &)*arg2,*arg3,*arg4);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1resolveVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Vector2d *arg3 = 0 ;
  Vector2d *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  arg3 = *(Vector2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  arg4 = *(Vector2d **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d & reference is null");
    return 0;
  } 
  result = (bool)((Vector2d const *)arg1)->resolveVector((Vector2d const &)*arg2,(Vector2d const &)*arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1resolveVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  Vector2d *arg1 = (Vector2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Vector2d *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Vector2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  arg3 = *(Vector2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->resolveVector((Vector2d const &)*arg2,(Vector2d const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1Vector2d(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Vector2d *arg1 = (Vector2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Vector2d **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Point2d_1kOrigin(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Point2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Point2d *) &Point2d::kOrigin();
  *(Point2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Point2d_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Point2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Point2d *)new Point2d();
  *(Point2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Point2d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  Point2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (Point2d *)new Point2d(arg1,arg2);
  *(Point2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Point2d_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  POINT_2D *arg1 = 0 ;
  Point2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(POINT_2D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "POINT_2D const & reference is null");
    return 0;
  } 
  result = (Point2d *)new Point2d((POINT_2D const &)*arg1);
  *(Point2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Point2d_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point2d *arg1 = (Point2d *) 0 ;
  Matrix2d *arg2 = 0 ;
  Point2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point2d **)&jarg1; 
  arg2 = *(Matrix2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Matrix2d const & reference is null");
    return 0;
  } 
  result = ((Point2d const *)arg1)->transform((Matrix2d const &)*arg2);
  *(Point2d **)&jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Point2d_1scaleBy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  Point2d *arg1 = (Point2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Point2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point2d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Point2d *) &(arg1)->scaleBy(arg2,arg3);
  *(Point2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_Point2d_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  Point2d *arg1 = (Point2d *) 0 ;
  float arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point2d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->offset(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Point2d_1negate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Point2d *arg1 = (Point2d *) 0 ;
  Vector2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point2d **)&jarg1; 
  result = ((Point2d const *)arg1)->negate();
  *(Vector2d **)&jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Point2d_1asVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Point2d *arg1 = (Point2d *) 0 ;
  Vector2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point2d **)&jarg1; 
  result = ((Point2d const *)arg1)->asVector();
  *(Vector2d **)&jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Point2d_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Point2d *arg1 = (Point2d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point2d **)&jarg1; 
  result = (float)((Point2d const *)arg1)->length();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Point2d_1distanceTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  Point2d *arg1 = (Point2d *) 0 ;
  Point2d *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point2d **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (float)((Point2d const *)arg1)->distanceTo((Point2d const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Point2d_1distanceSquare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  Point2d *arg1 = (Point2d *) 0 ;
  Point2d *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point2d **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (float)((Point2d const *)arg1)->distanceSquare((Point2d const &)*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Point2d_1isEqualTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  Point2d *arg1 = (Point2d *) 0 ;
  Point2d *arg2 = 0 ;
  Tol *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Point2d **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg3 = *(Tol **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tol const & reference is null");
    return 0;
  } 
  result = (bool)((Point2d const *)arg1)->isEqualTo((Point2d const &)*arg2,(Tol const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Point2d_1isEqualTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Point2d *arg1 = (Point2d *) 0 ;
  Point2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point2d **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (bool)((Point2d const *)arg1)->isEqualTo((Point2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Point2d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  Point2d *arg1 = (Point2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Point2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point2d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Point2d *) &(arg1)->set(arg2,arg3);
  *(Point2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Point2d_1polarPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  Point2d *arg1 = (Point2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Point2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point2d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = ((Point2d const *)arg1)->polarPoint(arg2,arg3);
  *(Point2d **)&jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Point2d_1rulerPoint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jlong jresult = 0 ;
  Point2d *arg1 = (Point2d *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  Point2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point2d **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg3 = (float)jarg3; 
  result = ((Point2d const *)arg1)->rulerPoint((Point2d const &)*arg2,arg3);
  *(Point2d **)&jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Point2d_1rulerPoint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  Point2d *arg1 = (Point2d *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  Point2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point2d **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = ((Point2d const *)arg1)->rulerPoint((Point2d const &)*arg2,arg3,arg4);
  *(Point2d **)&jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1Point2d(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Point2d *arg1 = (Point2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Point2d **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1kIdentity(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Matrix2d *) &Matrix2d::kIdentity();
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Matrix2d_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Matrix2d *)new Matrix2d();
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Matrix2d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MATRIX_2D *arg1 = 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MATRIX_2D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MATRIX_2D const & reference is null");
    return 0;
  } 
  result = (Matrix2d *)new Matrix2d((MATRIX_2D const &)*arg1);
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Matrix2d_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (Matrix2d *)new Matrix2d(arg1,arg2,arg3,arg4,arg5,arg6);
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Matrix2d_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Vector2d *arg1 = 0 ;
  Vector2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Vector2d **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (Matrix2d *)new Matrix2d((Vector2d const &)*arg1,(Vector2d const &)*arg2,(Point2d const &)*arg3);
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1preMultBy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Matrix2d *arg2 = 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Matrix2d **)&jarg1; 
  arg2 = *(Matrix2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Matrix2d const & reference is null");
    return 0;
  } 
  result = (Matrix2d *) &(arg1)->preMultBy((Matrix2d const &)*arg2);
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1postMultBy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Matrix2d *arg2 = 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Matrix2d **)&jarg1; 
  arg2 = *(Matrix2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Matrix2d const & reference is null");
    return 0;
  } 
  result = (Matrix2d *) &(arg1)->postMultBy((Matrix2d const &)*arg2);
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1setToProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Matrix2d *arg2 = 0 ;
  Matrix2d *arg3 = 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Matrix2d **)&jarg1; 
  arg2 = *(Matrix2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Matrix2d const & reference is null");
    return 0;
  } 
  arg3 = *(Matrix2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Matrix2d const & reference is null");
    return 0;
  } 
  result = (Matrix2d *) &(arg1)->setToProduct((Matrix2d const &)*arg2,(Matrix2d const &)*arg3);
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1TransformPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Matrix2d **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(Point2d **)&jarg3; 
  ((Matrix2d const *)arg1)->TransformPoints(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1TransformVectors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  int arg2 ;
  Vector2d *arg3 = (Vector2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Matrix2d **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(Vector2d **)&jarg3; 
  ((Matrix2d const *)arg1)->TransformVectors(arg2,arg3);
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1det(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Matrix2d **)&jarg1; 
  result = (float)((Matrix2d const *)arg1)->det();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1invert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Matrix2d **)&jarg1; 
  result = (bool)(arg1)->invert();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1inverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Matrix2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Matrix2d **)&jarg1; 
  result = ((Matrix2d const *)arg1)->inverse();
  *(Matrix2d **)&jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1isInvertible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Matrix2d **)&jarg1; 
  result = (bool)((Matrix2d const *)arg1)->isInvertible();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1scale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Matrix2d **)&jarg1; 
  result = (float)((Matrix2d const *)arg1)->scale();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1scaleX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Matrix2d **)&jarg1; 
  result = (float)((Matrix2d const *)arg1)->scaleX();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1scaleY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Matrix2d **)&jarg1; 
  result = (float)((Matrix2d const *)arg1)->scaleY();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1angle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Matrix2d **)&jarg1; 
  result = (float)((Matrix2d const *)arg1)->angle();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1isEqualTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Matrix2d *arg2 = 0 ;
  Tol *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Matrix2d **)&jarg1; 
  arg2 = *(Matrix2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Matrix2d const & reference is null");
    return 0;
  } 
  arg3 = *(Tol **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tol const & reference is null");
    return 0;
  } 
  result = (bool)((Matrix2d const *)arg1)->isEqualTo((Matrix2d const &)*arg2,(Tol const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1isEqualTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Matrix2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Matrix2d **)&jarg1; 
  arg2 = *(Matrix2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Matrix2d const & reference is null");
    return 0;
  } 
  result = (bool)((Matrix2d const *)arg1)->isEqualTo((Matrix2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1isIdentity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Matrix2d **)&jarg1; 
  result = (bool)((Matrix2d const *)arg1)->isIdentity();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1isOrtho(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Matrix2d **)&jarg1; 
  result = (bool)((Matrix2d const *)arg1)->isOrtho();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1hasMirror(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Vector2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Matrix2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d & reference is null");
    return 0;
  } 
  result = (bool)((Matrix2d const *)arg1)->hasMirror(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1setCoordSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Vector2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Matrix2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  arg3 = *(Vector2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  arg4 = *(Point2d **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (Matrix2d *) &(arg1)->setCoordSystem((Vector2d const &)*arg2,(Vector2d const &)*arg3,(Point2d const &)*arg4);
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1getCoordSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Vector2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Matrix2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d & reference is null");
    return ;
  } 
  arg3 = *(Vector2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d & reference is null");
    return ;
  } 
  arg4 = *(Point2d **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d & reference is null");
    return ;
  } 
  ((Matrix2d const *)arg1)->getCoordSystem(*arg2,*arg3,*arg4);
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1coordSystem_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Vector2d *arg1 = 0 ;
  Vector2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Matrix2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Vector2d **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = Matrix2d::coordSystem((Vector2d const &)*arg1,(Vector2d const &)*arg2,(Point2d const &)*arg3);
  *(Matrix2d **)&jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1coordSystem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  Point2d *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Matrix2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point2d **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = Matrix2d::coordSystem((Point2d const &)*arg1,arg2,arg3,arg4);
  *(Matrix2d **)&jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1coordSystem_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  Point2d *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  Matrix2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point2d **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = Matrix2d::coordSystem((Point2d const &)*arg1,arg2,arg3);
  *(Matrix2d **)&jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1coordSystem_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  Point2d *arg1 = 0 ;
  float arg2 ;
  Matrix2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point2d **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg2 = (float)jarg2; 
  result = Matrix2d::coordSystem((Point2d const &)*arg1,arg2);
  *(Matrix2d **)&jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1setToIdentity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Matrix2d **)&jarg1; 
  result = (Matrix2d *) &(arg1)->setToIdentity();
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  jlong jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Matrix2d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (Matrix2d *) &(arg1)->set(arg2,arg3,arg4,arg5,arg6,arg7);
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1setToTranslation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Matrix2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  result = (Matrix2d *) &(arg1)->setToTranslation((Vector2d const &)*arg2);
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1setToRotation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  Point2d *arg3 = 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Matrix2d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (Matrix2d *) &(arg1)->setToRotation(arg2,(Point2d const &)*arg3);
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1setToRotation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Matrix2d **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (Matrix2d *) &(arg1)->setToRotation(arg2);
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1setToScaling_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  Point2d *arg3 = 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Matrix2d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (Matrix2d *) &(arg1)->setToScaling(arg2,(Point2d const &)*arg3);
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1setToScaling_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Matrix2d **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (Matrix2d *) &(arg1)->setToScaling(arg2);
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1setToScaling_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Point2d *arg4 = 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(Matrix2d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = *(Point2d **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (Matrix2d *) &(arg1)->setToScaling(arg2,arg3,(Point2d const &)*arg4);
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1setToScaling_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Matrix2d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Matrix2d *) &(arg1)->setToScaling(arg2,arg3);
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1setToMirroring_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Point2d *arg2 = 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Matrix2d **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (Matrix2d *) &(arg1)->setToMirroring((Point2d const &)*arg2);
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1setToMirroring_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Matrix2d **)&jarg1; 
  result = (Matrix2d *) &(arg1)->setToMirroring();
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1setToMirroring_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  Point2d *arg2 = 0 ;
  Vector2d *arg3 = 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Matrix2d **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg3 = *(Vector2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  result = (Matrix2d *) &(arg1)->setToMirroring((Point2d const &)*arg2,(Vector2d const &)*arg3);
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1setToShearing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Point2d *arg4 = 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(Matrix2d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = *(Point2d **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (Matrix2d *) &(arg1)->setToShearing(arg2,arg3,(Point2d const &)*arg4);
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1setToShearing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Matrix2d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Matrix2d *) &(arg1)->setToShearing(arg2,arg3);
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1translation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Vector2d *arg1 = 0 ;
  Matrix2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Vector2d **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  result = Matrix2d::translation((Vector2d const &)*arg1);
  *(Matrix2d **)&jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1rotation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  float arg1 ;
  Point2d *arg2 = 0 ;
  Matrix2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (float)jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = Matrix2d::rotation(arg1,(Point2d const &)*arg2);
  *(Matrix2d **)&jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1rotation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  Matrix2d result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = Matrix2d::rotation(arg1);
  *(Matrix2d **)&jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1scaling_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  float arg1 ;
  Point2d *arg2 = 0 ;
  Matrix2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (float)jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = Matrix2d::scaling(arg1,(Point2d const &)*arg2);
  *(Matrix2d **)&jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1scaling_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  Matrix2d result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = Matrix2d::scaling(arg1);
  *(Matrix2d **)&jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1scaling_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  Point2d *arg3 = 0 ;
  Matrix2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = Matrix2d::scaling(arg1,arg2,(Point2d const &)*arg3);
  *(Matrix2d **)&jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1scaling_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  Matrix2d result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = Matrix2d::scaling(arg1,arg2);
  *(Matrix2d **)&jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1mirroring_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Point2d *arg1 = 0 ;
  Matrix2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point2d **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = Matrix2d::mirroring((Point2d const &)*arg1);
  *(Matrix2d **)&jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1mirroring_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Matrix2d result;
  
  (void)jenv;
  (void)jcls;
  result = Matrix2d::mirroring();
  *(Matrix2d **)&jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1mirroring_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point2d *arg1 = 0 ;
  Vector2d *arg2 = 0 ;
  Matrix2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point2d **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  result = Matrix2d::mirroring((Point2d const &)*arg1,(Vector2d const &)*arg2);
  *(Matrix2d **)&jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1shearing_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  Point2d *arg3 = 0 ;
  Matrix2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = Matrix2d::shearing(arg1,arg2,(Point2d const &)*arg3);
  *(Matrix2d **)&jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1shearing_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  Matrix2d result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = Matrix2d::shearing(arg1,arg2);
  *(Matrix2d **)&jresult = new Matrix2d((const Matrix2d &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1Matrix2d(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Matrix2d *arg1 = (Matrix2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Matrix2d **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1kIdentity(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Box2d *) &Box2d::kIdentity();
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Box2d_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Box2d *)new Box2d();
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Box2d_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  BOX_2D *arg1 = 0 ;
  bool arg2 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BOX_2D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BOX_2D const & reference is null");
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (Box2d *)new Box2d((BOX_2D const &)*arg1,arg2);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Box2d_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BOX_2D *arg1 = 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BOX_2D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BOX_2D const & reference is null");
    return 0;
  } 
  result = (Box2d *)new Box2d((BOX_2D const &)*arg1);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Box2d_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Point2d **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (Box2d *)new Box2d((Point2d const &)*arg1,(Point2d const &)*arg2);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Box2d_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  bool arg5 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (Box2d *)new Box2d(arg1,arg2,arg3,arg4,arg5);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Box2d_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Box2d *)new Box2d(arg1,arg2,arg3,arg4);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Box2d_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  RECT_2D *arg1 = 0 ;
  bool arg2 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RECT_2D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RECT_2D const & reference is null");
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (Box2d *)new Box2d((RECT_2D const &)*arg1,arg2);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Box2d_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RECT_2D *arg1 = 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RECT_2D **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RECT_2D const & reference is null");
    return 0;
  } 
  result = (Box2d *)new Box2d((RECT_2D const &)*arg1);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Box2d_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (Box2d *)new Box2d(arg1,arg2,arg3,arg4,arg5);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Box2d_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (Box2d *)new Box2d(arg1,arg2,arg3,arg4);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Box2d_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  Point2d *arg1 = 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Point2d **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg4 = *(Point2d **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (Box2d *)new Box2d((Point2d const &)*arg1,(Point2d const &)*arg2,(Point2d const &)*arg3,(Point2d const &)*arg4);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Box2d_1_1SWIG_111(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  int arg1 ;
  Point2d *arg2 = (Point2d *) 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(Point2d **)&jarg2; 
  result = (Box2d *)new Box2d(arg1,(Point2d const *)arg2);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Box2d_1_1SWIG_112(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  Point2d *arg1 = 0 ;
  float arg2 ;
  float arg3 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Point2d **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Box2d *)new Box2d((Point2d const &)*arg1,arg2,arg3);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Box2d_1_1SWIG_113(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (Box2d *)new Box2d(arg1,arg2);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1get_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d & reference is null");
    return ;
  } 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d & reference is null");
    return ;
  } 
  ((Box2d const *)arg1)->get(*arg2,*arg3);
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  RECT_2D *arg2 = 0 ;
  RECT_2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(RECT_2D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RECT_2D & reference is null");
    return 0;
  } 
  result = (RECT_2D *) &((Box2d const *)arg1)->get(*arg2);
  *(RECT_2D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  BOX_2D *arg2 = 0 ;
  bool arg3 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(BOX_2D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BOX_2D const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (Box2d *) &(arg1)->set((BOX_2D const &)*arg2,arg3);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  BOX_2D *arg2 = 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(BOX_2D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BOX_2D const & reference is null");
    return 0;
  } 
  result = (Box2d *) &(arg1)->set((BOX_2D const &)*arg2);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1set_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (Box2d *) &(arg1)->set((Point2d const &)*arg2,(Point2d const &)*arg3);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1set_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Box2d *) &(arg1)->set(arg2,arg3,arg4,arg5);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1set_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  Point2d *arg5 = 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg4 = *(Point2d **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg5 = *(Point2d **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (Box2d *) &(arg1)->set((Point2d const &)*arg2,(Point2d const &)*arg3,(Point2d const &)*arg4,(Point2d const &)*arg5);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1set_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  int arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(Point2d **)&jarg3; 
  result = (Box2d *) &(arg1)->set(arg2,(Point2d const *)arg3);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1set_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (Box2d *) &(arg1)->set((Point2d const &)*arg2,arg3,arg4);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1width(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  result = (float)((Box2d const *)arg1)->width();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1height(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  result = (float)((Box2d const *)arg1)->height();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Vector2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  result = ((Box2d const *)arg1)->size();
  *(Vector2d **)&jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1center(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  result = ((Box2d const *)arg1)->center();
  *(Point2d **)&jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1leftTop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  result = ((Box2d const *)arg1)->leftTop();
  *(Point2d **)&jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1rightTop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  result = ((Box2d const *)arg1)->rightTop();
  *(Point2d **)&jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1leftBottom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  result = ((Box2d const *)arg1)->leftBottom();
  *(Point2d **)&jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1rightBottom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  result = ((Box2d const *)arg1)->rightBottom();
  *(Point2d **)&jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  result = (Box2d *) &(arg1)->normalize();
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1swapTopBottom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  result = (Box2d *) &(arg1)->swapTopBottom();
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  result = (Box2d *) &(arg1)->empty();
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1isNormalized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  result = (bool)((Box2d const *)arg1)->isNormalized();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1isNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  result = (bool)((Box2d const *)arg1)->isNull();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1isEmpty_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Tol *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Tol **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tol const & reference is null");
    return 0;
  } 
  result = (bool)((Box2d const *)arg1)->isEmpty((Tol const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1isEmpty_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  result = (bool)((Box2d const *)arg1)->isEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1isEmptyMinus_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Tol *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Tol **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tol const & reference is null");
    return 0;
  } 
  result = (bool)((Box2d const *)arg1)->isEmptyMinus((Tol const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1isEmptyMinus_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  result = (bool)((Box2d const *)arg1)->isEmptyMinus();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1contains_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (bool)((Box2d const *)arg1)->contains((Point2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1contains_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d *arg2 = 0 ;
  Tol *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg3 = *(Tol **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tol const & reference is null");
    return 0;
  } 
  result = (bool)((Box2d const *)arg1)->contains((Point2d const &)*arg2,(Tol const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1contains_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  result = (bool)((Box2d const *)arg1)->contains((Box2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1contains_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  Tol *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  arg3 = *(Tol **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tol const & reference is null");
    return 0;
  } 
  result = (bool)((Box2d const *)arg1)->contains((Box2d const &)*arg2,(Tol const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1inflate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (Box2d *) &(arg1)->inflate(arg2);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1inflate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Box2d *) &(arg1)->inflate(arg2,arg3);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1inflate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  result = (Box2d *) &(arg1)->inflate((Vector2d const &)*arg2);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1inflate_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  result = (Box2d *) &(arg1)->inflate((Box2d const &)*arg2);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1inflate_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Box2d *) &(arg1)->inflate(arg2,arg3,arg4,arg5);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1deflate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (Box2d *) &(arg1)->deflate(arg2);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1deflate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Box2d *) &(arg1)->deflate(arg2,arg3);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1deflate_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  result = (Box2d *) &(arg1)->deflate((Vector2d const &)*arg2);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1deflate_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  result = (Box2d *) &(arg1)->deflate((Box2d const &)*arg2);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1deflate_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (Box2d *) &(arg1)->deflate(arg2,arg3,arg4,arg5);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1offset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Box2d *) &(arg1)->offset(arg2,arg3);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1offset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Vector2d *arg2 = 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  result = (Box2d *) &(arg1)->offset((Vector2d const &)*arg2);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1scaleBy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Box2d *) &(arg1)->scaleBy(arg2,arg3);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1scaleBy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (Box2d *) &(arg1)->scaleBy(arg2);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1isIntersect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  result = (bool)((Box2d const *)arg1)->isIntersect((Box2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1intersectWith_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  Box2d *arg3 = 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  arg3 = *(Box2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  result = (Box2d *) &(arg1)->intersectWith((Box2d const &)*arg2,(Box2d const &)*arg3);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1intersectWith_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  result = (Box2d *) &(arg1)->intersectWith((Box2d const &)*arg2);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1unionWith_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  Box2d *arg3 = 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  arg3 = *(Box2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  result = (Box2d *) &(arg1)->unionWith((Box2d const &)*arg2,(Box2d const &)*arg3);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1unionWith_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  result = (Box2d *) &(arg1)->unionWith((Box2d const &)*arg2);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1unionWith_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  float arg2 ;
  float arg3 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Box2d *) &(arg1)->unionWith(arg2,arg3);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1unionWith_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Point2d *arg2 = 0 ;
  Box2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (Box2d *) &(arg1)->unionWith((Point2d const &)*arg2);
  *(Box2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1offset_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  Box2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  result = ((Box2d const *)arg1)->offset((Box2d const &)*arg2);
  *(Box2d **)&jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1isEqualTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  Tol *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  arg3 = *(Tol **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tol const & reference is null");
    return 0;
  } 
  result = (bool)((Box2d const *)arg1)->isEqualTo((Box2d const &)*arg2,(Tol const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1isEqualTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Box2d *arg1 = (Box2d *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Box2d **)&jarg1; 
  arg2 = *(Box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  result = (bool)((Box2d const *)arg1)->isEqualTo((Box2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1Box2d(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Box2d *arg1 = (Box2d *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Box2d **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_kGiCloseFigure_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiPathNode result;
  
  (void)jenv;
  (void)jcls;
  result = (GiPathNode)kGiCloseFigure;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_kGiLineTo_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiPathNode result;
  
  (void)jenv;
  (void)jcls;
  result = (GiPathNode)kGiLineTo;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_kGiBeziersTo_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiPathNode result;
  
  (void)jenv;
  (void)jcls;
  result = (GiPathNode)kGiBeziersTo;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_kGiMoveTo_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiPathNode result;
  
  (void)jenv;
  (void)jcls;
  result = (GiPathNode)kGiMoveTo;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiColor_1r_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->r = arg2;
}


SWIGEXPORT jshort JNICALL Java_touchvg_jni_skiaviewJNI_GiColor_1r_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  result = (unsigned char) ((arg1)->r);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiColor_1g_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->g = arg2;
}


SWIGEXPORT jshort JNICALL Java_touchvg_jni_skiaviewJNI_GiColor_1g_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  result = (unsigned char) ((arg1)->g);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiColor_1b_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->b = arg2;
}


SWIGEXPORT jshort JNICALL Java_touchvg_jni_skiaviewJNI_GiColor_1b_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  result = (unsigned char) ((arg1)->b);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiColor_1a_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT jshort JNICALL Java_touchvg_jni_skiaviewJNI_GiColor_1a_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  result = (unsigned char) ((arg1)->a);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1GiColor_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GiColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GiColor *)new GiColor();
  *(GiColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1GiColor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2, jshort jarg3, jshort jarg4) {
  jlong jresult = 0 ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  GiColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  result = (GiColor *)new GiColor(arg1,arg2,arg3,arg4);
  *(GiColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1GiColor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2, jshort jarg3) {
  jlong jresult = 0 ;
  unsigned char arg1 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  GiColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned char)jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  result = (GiColor *)new GiColor(arg1,arg2,arg3);
  *(GiColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1GiColor_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiColor *arg1 = 0 ;
  GiColor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiColor const & reference is null");
    return 0;
  } 
  result = (GiColor *)new GiColor((GiColor const &)*arg1);
  *(GiColor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiColor_1White(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GiColor result;
  
  (void)jenv;
  (void)jcls;
  result = GiColor::White();
  *(GiColor **)&jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiColor_1Black(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GiColor result;
  
  (void)jenv;
  (void)jcls;
  result = GiColor::Black();
  *(GiColor **)&jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiColor_1Invalid(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GiColor result;
  
  (void)jenv;
  (void)jcls;
  result = GiColor::Invalid();
  *(GiColor **)&jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_GiColor_1getARGB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiColor *arg1 = (GiColor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  result = (int)((GiColor const *)arg1)->getARGB();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiColor_1setARGB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiColor *arg1 = (GiColor *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setARGB(arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiColor_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jshort jarg3, jshort jarg4) {
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  (arg1)->set(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiColor_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jshort jarg3, jshort jarg4, jshort jarg5) {
  GiColor *arg1 = (GiColor *) 0 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  unsigned char arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  arg5 = (unsigned char)jarg5; 
  (arg1)->set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiColor_1isInvalid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiColor *arg1 = (GiColor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiColor **)&jarg1; 
  result = (bool)((GiColor const *)arg1)->isInvalid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiColor_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  GiColor *arg1 = (GiColor *) 0 ;
  GiColor *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiColor **)&jarg1; 
  arg2 = *(GiColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiColor const & reference is null");
    return 0;
  } 
  result = (bool)((GiColor const *)arg1)->equals((GiColor const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1GiColor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GiColor *arg1 = (GiColor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GiColor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_kGiLineSolid_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiLineStyle result;
  
  (void)jenv;
  (void)jcls;
  result = (GiLineStyle)kGiLineSolid;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_kContextLineRGB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiContextBits result;
  
  (void)jenv;
  (void)jcls;
  result = (GiContextBits)kContextLineRGB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_kContextLineAlpha_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiContextBits result;
  
  (void)jenv;
  (void)jcls;
  result = (GiContextBits)kContextLineAlpha;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_kContextLineColor_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiContextBits result;
  
  (void)jenv;
  (void)jcls;
  result = (GiContextBits)kContextLineColor;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_kContextLineWidth_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiContextBits result;
  
  (void)jenv;
  (void)jcls;
  result = (GiContextBits)kContextLineWidth;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_kContextLineStyle_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiContextBits result;
  
  (void)jenv;
  (void)jcls;
  result = (GiContextBits)kContextLineStyle;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_kContextFillRGB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiContextBits result;
  
  (void)jenv;
  (void)jcls;
  result = (GiContextBits)kContextFillRGB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_kContextFillAlpha_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiContextBits result;
  
  (void)jenv;
  (void)jcls;
  result = (GiContextBits)kContextFillAlpha;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_kContextFillColor_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiContextBits result;
  
  (void)jenv;
  (void)jcls;
  result = (GiContextBits)kContextFillColor;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_kContextCopyAll_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiContextBits result;
  
  (void)jenv;
  (void)jcls;
  result = (GiContextBits)kContextCopyAll;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1GiContext_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GiContext *)new GiContext();
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1GiContext_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jlong jresult = 0 ;
  float arg1 ;
  GiColor arg2 ;
  int arg3 ;
  GiColor *arg4 = 0 ;
  bool arg5 ;
  GiColor *argp2 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = (float)jarg1; 
  argp2 = *(GiColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GiColor");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = *(GiColor **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiColor const & reference is null");
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (GiContext *)new GiContext(arg1,arg2,arg3,(GiColor const &)*arg4,arg5);
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1GiContext_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jfloat jarg1, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  float arg1 ;
  GiColor arg2 ;
  int arg3 ;
  GiColor *arg4 = 0 ;
  GiColor *argp2 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = (float)jarg1; 
  argp2 = *(GiColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GiColor");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = *(GiColor **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiColor const & reference is null");
    return 0;
  } 
  result = (GiContext *)new GiContext(arg1,arg2,arg3,(GiColor const &)*arg4);
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1GiContext_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jfloat jarg1, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  float arg1 ;
  GiColor arg2 ;
  int arg3 ;
  GiColor *argp2 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (float)jarg1; 
  argp2 = *(GiColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GiColor");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  result = (GiContext *)new GiContext(arg1,arg2,arg3);
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1GiContext_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jfloat jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  float arg1 ;
  GiColor arg2 ;
  GiColor *argp2 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (float)jarg1; 
  argp2 = *(GiColor **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null GiColor");
    return 0;
  }
  arg2 = *argp2; 
  result = (GiContext *)new GiContext(arg1,arg2);
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1GiContext_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  result = (GiContext *)new GiContext(arg1);
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1GiContext_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiContext *arg1 = 0 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiContext const & reference is null");
    return 0;
  } 
  result = (GiContext *)new GiContext((GiContext const &)*arg1);
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  GiContext *arg2 = 0 ;
  int arg3 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = *(GiContext **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiContext const & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (GiContext *) &(arg1)->copy((GiContext const &)*arg2,arg3);
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  GiContext *arg2 = 0 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = *(GiContext **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiContext const & reference is null");
    return 0;
  } 
  result = (GiContext *) &(arg1)->copy((GiContext const &)*arg2);
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  GiContext *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = *(GiContext **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiContext const & reference is null");
    return 0;
  } 
  result = (bool)((GiContext const *)arg1)->equals((GiContext const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1getLineStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = (int)((GiContext const *)arg1)->getLineStyle();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1setLineStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLineStyle(arg2);
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1getLineWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = (float)((GiContext const *)arg1)->getLineWidth();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1isAutoScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = (bool)((GiContext const *)arg1)->isAutoScale();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1setLineWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jboolean jarg3) {
  GiContext *arg1 = (GiContext *) 0 ;
  float arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setLineWidth(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1isNullLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = (bool)((GiContext const *)arg1)->isNullLine();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1setNullLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiContext *arg1 = (GiContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  (arg1)->setNullLine();
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1getLineColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  GiColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = ((GiContext const *)arg1)->getLineColor();
  *(GiColor **)&jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1setLineColor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  GiContext *arg1 = (GiContext *) 0 ;
  GiColor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = *(GiColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiColor const & reference is null");
    return ;
  } 
  (arg1)->setLineColor((GiColor const &)*arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1setLineColor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setLineColor(arg2,arg3,arg4);
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1getLineARGB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = (int)((GiContext const *)arg1)->getLineARGB();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1setLineARGB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLineARGB(arg2);
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1getLineAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = (int)((GiContext const *)arg1)->getLineAlpha();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1setLineAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLineAlpha(arg2);
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1hasFillColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = (bool)((GiContext const *)arg1)->hasFillColor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1setNoFillColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiContext *arg1 = (GiContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  (arg1)->setNoFillColor();
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1getFillColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  GiColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = ((GiContext const *)arg1)->getFillColor();
  *(GiColor **)&jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1setFillColor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  GiContext *arg1 = (GiContext *) 0 ;
  GiColor *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = *(GiColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiColor const & reference is null");
    return ;
  } 
  (arg1)->setFillColor((GiColor const &)*arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1setFillColor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->setFillColor(arg2,arg3,arg4);
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1getFillARGB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = (int)((GiContext const *)arg1)->getFillARGB();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1setFillARGB(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setFillARGB(arg2);
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1getFillAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = (int)((GiContext const *)arg1)->getFillAlpha();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1setFillAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setFillAlpha(arg2);
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1isAutoFillColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = (bool)((GiContext const *)arg1)->isAutoFillColor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1setAutoFillColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  GiContext *arg1 = (GiContext *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setAutoFillColor(arg2);
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_GiContext_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiContext *arg1 = (GiContext *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiContext **)&jarg1; 
  result = (int)((GiContext const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1GiContext(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GiContext *arg1 = (GiContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GiContext **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1GiTransform_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  GiTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (GiTransform *)new GiTransform(arg1);
  *(GiTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1GiTransform_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GiTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GiTransform *)new GiTransform();
  *(GiTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1GiTransform_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiTransform *arg1 = 0 ;
  GiTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiTransform const & reference is null");
    return 0;
  } 
  result = (GiTransform *)new GiTransform((GiTransform const &)*arg1);
  *(GiTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1GiTransform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GiTransform *arg1 = (GiTransform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GiTransform **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  GiTransform *arg2 = 0 ;
  GiTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = *(GiTransform **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiTransform const & reference is null");
    return 0;
  } 
  result = (GiTransform *) &(arg1)->copy((GiTransform const &)*arg2);
  *(GiTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1getDpiX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  result = (float)((GiTransform const *)arg1)->getDpiX();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1getDpiY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  result = (float)((GiTransform const *)arg1)->getDpiY();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  result = (long)((GiTransform const *)arg1)->getWidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  result = (long)((GiTransform const *)arg1)->getHeight();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1getCenterW(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Point2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  result = ((GiTransform const *)arg1)->getCenterW();
  *(Point2d **)&jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1getViewScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  result = (float)((GiTransform const *)arg1)->getViewScale();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1getWorldToDisplayX_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jfloat jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  bool arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (float)((GiTransform const *)arg1)->getWorldToDisplayX(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1getWorldToDisplayX_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  result = (float)((GiTransform const *)arg1)->getWorldToDisplayX();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1getWorldToDisplayY_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jfloat jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  bool arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (float)((GiTransform const *)arg1)->getWorldToDisplayY(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1getWorldToDisplayY_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  result = (float)((GiTransform const *)arg1)->getWorldToDisplayY();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1displayToModel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jboolean jarg3) {
  jfloat jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  bool arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (float)((GiTransform const *)arg1)->displayToModel(arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1displayToModel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jfloat jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (float)((GiTransform const *)arg1)->displayToModel(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1modelToWorld(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  result = (Matrix2d *) &((GiTransform const *)arg1)->modelToWorld();
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1worldToModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  result = (Matrix2d *) &((GiTransform const *)arg1)->worldToModel();
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1displayToWorld(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  result = (Matrix2d *) &((GiTransform const *)arg1)->displayToWorld();
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1worldToDisplay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  result = (Matrix2d *) &((GiTransform const *)arg1)->worldToDisplay();
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1displayToModel_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  result = (Matrix2d *) &((GiTransform const *)arg1)->displayToModel();
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1modelToDisplay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  result = (Matrix2d *) &((GiTransform const *)arg1)->modelToDisplay();
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1setWndSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  long arg2 ;
  long arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  result = (bool)(arg1)->setWndSize(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1setResolution_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setResolution(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1setResolution_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setResolution(arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1setModelTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  GiTransform *arg1 = (GiTransform *) 0 ;
  Matrix2d *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = *(Matrix2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Matrix2d const & reference is null");
    return ;
  } 
  (arg1)->setModelTransform((Matrix2d const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1getWndRectW(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Box2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  result = ((GiTransform const *)arg1)->getWndRectW();
  *(Box2d **)&jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1getMinViewScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  result = (float)((GiTransform const *)arg1)->getMinViewScale();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1getMaxViewScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  result = (float)((GiTransform const *)arg1)->getMaxViewScale();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1getWorldLimits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Box2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  result = ((GiTransform const *)arg1)->getWorldLimits();
  *(Box2d **)&jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1setViewScaleRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setViewScaleRange(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1setWorldLimits(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Box2d *arg2 = 0 ;
  Box2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = *(Box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  result = (arg1)->setWorldLimits((Box2d const &)*arg2);
  *(Box2d **)&jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1zoomWnd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jboolean jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->zoomWnd((Point2d const &)*arg2,(Point2d const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1zoomWnd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->zoomWnd((Point2d const &)*arg2,(Point2d const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1zoomTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jboolean jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Box2d *arg2 = 0 ;
  RECT_2D *arg3 = (RECT_2D *) 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = *(Box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  arg3 = *(RECT_2D **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->zoomTo((Box2d const &)*arg2,(RECT_2D const *)arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1zoomTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Box2d *arg2 = 0 ;
  RECT_2D *arg3 = (RECT_2D *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = *(Box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  arg3 = *(RECT_2D **)&jarg3; 
  result = (bool)(arg1)->zoomTo((Box2d const &)*arg2,(RECT_2D const *)arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1zoomTo_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = *(Box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->zoomTo((Box2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1zoomTo_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jboolean jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg3 = *(Point2d **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->zoomTo((Point2d const &)*arg2,(Point2d const *)arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1zoomTo_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg3 = *(Point2d **)&jarg3; 
  result = (bool)(arg1)->zoomTo((Point2d const &)*arg2,(Point2d const *)arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1zoomTo_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Point2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->zoomTo((Point2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1zoomPan_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  float arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->zoomPan(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1zoomPan_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jboolean jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->zoomPan(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1zoomByFactor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jboolean jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = *(Point2d **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->zoomByFactor(arg2,(Point2d const *)arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1zoomByFactor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = *(Point2d **)&jarg3; 
  result = (bool)(arg1)->zoomByFactor(arg2,(Point2d const *)arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1zoomByFactor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jboolean jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)(arg1)->zoomByFactor(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1zoomScale_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jboolean jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = *(Point2d **)&jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->zoomScale(arg2,(Point2d const *)arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1zoomScale_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  Point2d *arg3 = (Point2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = *(Point2d **)&jarg3; 
  result = (bool)(arg1)->zoomScale(arg2,(Point2d const *)arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1zoomScale_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jboolean jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  float arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)(arg1)->zoomScale(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1zoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jboolean jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Point2d arg2 ;
  float arg3 ;
  Point2d *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiTransform **)&jarg1; 
  argp2 = *(Point2d **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Point2d");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->zoom(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1enableZoom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->enableZoom(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1getZoomValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Point2d *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d & reference is null");
    return 0;
  } 
  result = (float)((GiTransform const *)arg1)->getZoomValue(*arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_GiTransform_1getZoomTimes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  result = (long)((GiTransform const *)arg1)->getZoomTimes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1GiSaveModelTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  Matrix2d *arg2 = 0 ;
  GiSaveModelTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiTransform **)&jarg1; 
  arg2 = *(Matrix2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Matrix2d const & reference is null");
    return 0;
  } 
  result = (GiSaveModelTransform *)new GiSaveModelTransform((GiTransform const *)arg1,(Matrix2d const &)*arg2);
  *(GiSaveModelTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1GiSaveModelTransform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GiSaveModelTransform *arg1 = (GiSaveModelTransform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GiSaveModelTransform **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasDrawing_1clearCachedBitmap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  GiCanvasDrawing *arg1 = (GiCanvasDrawing *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasDrawing **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->clearCachedBitmap(arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasDrawing_1clearCachedBitmap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiCanvasDrawing *arg1 = (GiCanvasDrawing *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasDrawing **)&jarg1; 
  (arg1)->clearCachedBitmap();
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasDrawing_1getScreenDpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  GiCanvasDrawing *arg1 = (GiCanvasDrawing *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasDrawing **)&jarg1; 
  result = (float)((GiCanvasDrawing const *)arg1)->getScreenDpi();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasDrawing_1getBkColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiCanvasDrawing *arg1 = (GiCanvasDrawing *) 0 ;
  GiColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasDrawing **)&jarg1; 
  result = ((GiCanvasDrawing const *)arg1)->getBkColor();
  *(GiColor **)&jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasDrawing_1setBkColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  GiCanvasDrawing *arg1 = (GiCanvasDrawing *) 0 ;
  GiColor *arg2 = 0 ;
  GiColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCanvasDrawing **)&jarg1; 
  arg2 = *(GiColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiColor const & reference is null");
    return 0;
  } 
  result = (arg1)->setBkColor((GiColor const &)*arg2);
  *(GiColor **)&jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasDrawing_1rawLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jboolean jresult = 0 ;
  GiCanvasDrawing *arg1 = (GiCanvasDrawing *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCanvasDrawing **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->rawLine((GiContext const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasDrawing_1rawLines(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jboolean jresult = 0 ;
  GiCanvasDrawing *arg1 = (GiCanvasDrawing *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = (Point2d *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiCanvasDrawing **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Point2d **)&jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->rawLines((GiContext const *)arg2,(Point2d const *)arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasDrawing_1rawBeziers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jboolean jresult = 0 ;
  GiCanvasDrawing *arg1 = (GiCanvasDrawing *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = (Point2d *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiCanvasDrawing **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Point2d **)&jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->rawBeziers((GiContext const *)arg2,(Point2d const *)arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasDrawing_1rawPolygon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jboolean jresult = 0 ;
  GiCanvasDrawing *arg1 = (GiCanvasDrawing *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = (Point2d *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiCanvasDrawing **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Point2d **)&jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->rawPolygon((GiContext const *)arg2,(Point2d const *)arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasDrawing_1rawRect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jboolean jresult = 0 ;
  GiCanvasDrawing *arg1 = (GiCanvasDrawing *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCanvasDrawing **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->rawRect((GiContext const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasDrawing_1rawEllipse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jboolean jresult = 0 ;
  GiCanvasDrawing *arg1 = (GiCanvasDrawing *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCanvasDrawing **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->rawEllipse((GiContext const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasDrawing_1rawBeginPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiCanvasDrawing *arg1 = (GiCanvasDrawing *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasDrawing **)&jarg1; 
  result = (bool)(arg1)->rawBeginPath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasDrawing_1rawEndPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  GiCanvasDrawing *arg1 = (GiCanvasDrawing *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCanvasDrawing **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->rawEndPath((GiContext const *)arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasDrawing_1rawMoveTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jboolean jresult = 0 ;
  GiCanvasDrawing *arg1 = (GiCanvasDrawing *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasDrawing **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->rawMoveTo(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasDrawing_1rawLineTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jboolean jresult = 0 ;
  GiCanvasDrawing *arg1 = (GiCanvasDrawing *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasDrawing **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->rawLineTo(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasDrawing_1rawBezierTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  jboolean jresult = 0 ;
  GiCanvasDrawing *arg1 = (GiCanvasDrawing *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasDrawing **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->rawBezierTo(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasDrawing_1rawClosePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiCanvasDrawing *arg1 = (GiCanvasDrawing *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasDrawing **)&jarg1; 
  result = (bool)(arg1)->rawClosePath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasDrawing_1rawTextCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  GiCanvasDrawing *arg1 = (GiCanvasDrawing *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasDrawing **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->rawTextCenter((char const *)arg2,arg3,arg4,arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasDrawing_1drawImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  jboolean jresult = 0 ;
  GiCanvasDrawing *arg1 = (GiCanvasDrawing *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasDrawing **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->drawImage((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1GiCanvasDrawing(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GiCanvasDrawing *arg1 = (GiCanvasDrawing *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GiCanvasDrawing **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1GiGraphics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiTransform *arg1 = (GiTransform *) 0 ;
  GiGraphics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiTransform **)&jarg1; 
  result = (GiGraphics *)new GiGraphics(arg1);
  *(GiGraphics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1GiGraphics(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GiGraphics **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiGraphics *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiGraphics **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiGraphics const & reference is null");
    return ;
  } 
  (arg1)->copy((GiGraphics const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1xf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  result = (GiTransform *) &((GiGraphics const *)arg1)->xf();
  *(GiTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1isDrawing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  result = (bool)((GiGraphics const *)arg1)->isDrawing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1isPrint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  result = (bool)((GiGraphics const *)arg1)->isPrint();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1getClipModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  Box2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  result = ((GiGraphics const *)arg1)->getClipModel();
  *(Box2d **)&jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1getClipWorld(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  Box2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  result = ((GiGraphics const *)arg1)->getClipWorld();
  *(Box2d **)&jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1getClipBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  RECT_2D *arg2 = 0 ;
  RECT_2D *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(RECT_2D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RECT_2D & reference is null");
    return 0;
  } 
  result = (RECT_2D *) &((GiGraphics const *)arg1)->getClipBox(*arg2);
  *(RECT_2D **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1setClipBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  RECT_2D *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(RECT_2D **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "RECT_2D const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setClipBox((RECT_2D const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1setClipWorld(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(Box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setClipWorld((Box2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1getColorMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiColorMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  result = (GiColorMode)((GiGraphics const *)arg1)->getColorMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1setColorMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiColorMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = (GiColorMode)jarg2; 
  (arg1)->setColorMode(arg2);
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1calcPenColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiColor *arg2 = 0 ;
  GiColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiColor const & reference is null");
    return 0;
  } 
  result = ((GiGraphics const *)arg1)->calcPenColor((GiColor const &)*arg2);
  *(GiColor **)&jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1calcPenWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jboolean jarg3) {
  jfloat jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  float arg2 ;
  bool arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (float)((GiGraphics const *)arg1)->calcPenWidth(arg2,arg3);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1setMaxPenWidth_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setMaxPenWidth(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1setMaxPenWidth_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setMaxPenWidth(arg2);
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1isAntiAliasMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  result = (bool)((GiGraphics const *)arg1)->isAntiAliasMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1setAntiAliasMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setAntiAliasMode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawLine_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg4 = *(Point2d **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->drawLine((GiContext const *)arg2,(Point2d const &)*arg3,(Point2d const &)*arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawLine_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg4 = *(Point2d **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->drawLine((GiContext const *)arg2,(Point2d const &)*arg3,(Point2d const &)*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawLines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(Point2d **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->drawLines((GiContext const *)arg2,arg3,(Point2d const *)arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawLines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(Point2d **)&jarg4; 
  result = (bool)(arg1)->drawLines((GiContext const *)arg2,arg3,(Point2d const *)arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawBeziers_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5, jboolean jarg6) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool arg5 ;
  bool arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(Point2d **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->drawBeziers((GiContext const *)arg2,arg3,(Point2d const *)arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawBeziers_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(Point2d **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->drawBeziers((GiContext const *)arg2,arg3,(Point2d const *)arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawBeziers_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(Point2d **)&jarg4; 
  result = (bool)(arg1)->drawBeziers((GiContext const *)arg2,arg3,(Point2d const *)arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawArc_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jboolean jarg8) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool arg8 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (bool)(arg1)->drawArc((GiContext const *)arg2,(Point2d const &)*arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawArc_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->drawArc((GiContext const *)arg2,(Point2d const &)*arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawArc3P_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jboolean jarg6) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  Point2d *arg5 = 0 ;
  bool arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg4 = *(Point2d **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg5 = *(Point2d **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->drawArc3P((GiContext const *)arg2,(Point2d const &)*arg3,(Point2d const &)*arg4,(Point2d const &)*arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawArc3P_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  Point2d *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg4 = *(Point2d **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg5 = *(Point2d **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->drawArc3P((GiContext const *)arg2,(Point2d const &)*arg3,(Point2d const &)*arg4,(Point2d const &)*arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawPolygon_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(Point2d **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->drawPolygon((GiContext const *)arg2,arg3,(Point2d const *)arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawPolygon_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(Point2d **)&jarg4; 
  result = (bool)(arg1)->drawPolygon((GiContext const *)arg2,arg3,(Point2d const *)arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawEllipse_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5, jboolean jarg6) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->drawEllipse((GiContext const *)arg2,(Point2d const &)*arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawEllipse_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->drawEllipse((GiContext const *)arg2,(Point2d const &)*arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawEllipse_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->drawEllipse((GiContext const *)arg2,(Point2d const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawEllipse_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Box2d *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Box2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->drawEllipse((GiContext const *)arg2,(Box2d const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawEllipse_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Box2d *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Box2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->drawEllipse((GiContext const *)arg2,(Box2d const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawPie_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jboolean jarg8) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool arg8 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (bool)(arg1)->drawPie((GiContext const *)arg2,(Point2d const &)*arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawPie_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->drawPie((GiContext const *)arg2,(Point2d const &)*arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawRect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jboolean jarg4) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Box2d *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Box2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->drawRect((GiContext const *)arg2,(Box2d const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawRect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Box2d *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Box2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->drawRect((GiContext const *)arg2,(Box2d const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawRoundRect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5, jboolean jarg6) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Box2d *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Box2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->drawRoundRect((GiContext const *)arg2,(Box2d const &)*arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawRoundRect_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Box2d *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Box2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->drawRoundRect((GiContext const *)arg2,(Box2d const &)*arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawRoundRect_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Box2d *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Box2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->drawRoundRect((GiContext const *)arg2,(Box2d const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawSplines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jboolean jarg6) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  Vector2d *arg5 = (Vector2d *) 0 ;
  bool arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(Point2d **)&jarg4; 
  arg5 = *(Vector2d **)&jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->drawSplines((GiContext const *)arg2,arg3,(Point2d const *)arg4,(Vector2d const *)arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawSplines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  Vector2d *arg5 = (Vector2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(Point2d **)&jarg4; 
  arg5 = *(Vector2d **)&jarg5; 
  result = (bool)(arg1)->drawSplines((GiContext const *)arg2,arg3,(Point2d const *)arg4,(Vector2d const *)arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawClosedSplines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jboolean jarg6) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  Vector2d *arg5 = (Vector2d *) 0 ;
  bool arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(Point2d **)&jarg4; 
  arg5 = *(Vector2d **)&jarg5; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->drawClosedSplines((GiContext const *)arg2,arg3,(Point2d const *)arg4,(Vector2d const *)arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawClosedSplines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  Vector2d *arg5 = (Vector2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(Point2d **)&jarg4; 
  arg5 = *(Vector2d **)&jarg5; 
  result = (bool)(arg1)->drawClosedSplines((GiContext const *)arg2,arg3,(Point2d const *)arg4,(Vector2d const *)arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawBSplines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(Point2d **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->drawBSplines((GiContext const *)arg2,arg3,(Point2d const *)arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawBSplines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(Point2d **)&jarg4; 
  result = (bool)(arg1)->drawBSplines((GiContext const *)arg2,arg3,(Point2d const *)arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawClosedBSplines_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(Point2d **)&jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->drawClosedBSplines((GiContext const *)arg2,arg3,(Point2d const *)arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawClosedBSplines_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  int arg3 ;
  Point2d *arg4 = (Point2d *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(Point2d **)&jarg4; 
  result = (bool)(arg1)->drawClosedBSplines((GiContext const *)arg2,arg3,(Point2d const *)arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1clearCachedBitmap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->clearCachedBitmap(arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1clearCachedBitmap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  (arg1)->clearCachedBitmap();
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1getScreenDpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  result = (float)((GiGraphics const *)arg1)->getScreenDpi();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1getBkColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  result = ((GiGraphics const *)arg1)->getBkColor();
  *(GiColor **)&jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1setBkColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiColor *arg2 = 0 ;
  GiColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiColor const & reference is null");
    return 0;
  } 
  result = (arg1)->setBkColor((GiColor const &)*arg2);
  *(GiColor **)&jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1rawLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->rawLine((GiContext const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1rawLines(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = (Point2d *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Point2d **)&jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->rawLines((GiContext const *)arg2,(Point2d const *)arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1rawBeziers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = (Point2d *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Point2d **)&jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->rawBeziers((GiContext const *)arg2,(Point2d const *)arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1rawPolygon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  Point2d *arg3 = (Point2d *) 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = *(Point2d **)&jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->rawPolygon((GiContext const *)arg2,(Point2d const *)arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1rawRect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->rawRect((GiContext const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1rawEllipse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->rawEllipse((GiContext const *)arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1rawBeginPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  result = (bool)(arg1)->rawBeginPath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1rawEndPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  GiContext *arg2 = (GiContext *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(GiContext **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->rawEndPath((GiContext const *)arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1rawMoveTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->rawMoveTo(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1rawLineTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->rawLineTo(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1rawBezierTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->rawBezierTo(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1rawClosePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  result = (bool)(arg1)->rawClosePath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1rawTextCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->rawTextCenter((char const *)arg2,arg3,arg4,arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1drawImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  jboolean jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->drawImage((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1GiSaveClipBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  GiGraphics *arg1 = (GiGraphics *) 0 ;
  Box2d *arg2 = 0 ;
  GiSaveClipBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiGraphics **)&jarg1; 
  arg2 = *(Box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  result = (GiSaveClipBox *)new GiSaveClipBox(arg1,(Box2d const &)*arg2);
  *(GiSaveClipBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1GiSaveClipBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GiSaveClipBox *arg1 = (GiSaveClipBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GiSaveClipBox **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiSaveClipBox_1succeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiSaveClipBox *arg1 = (GiSaveClipBox *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiSaveClipBox **)&jarg1; 
  result = (bool)((GiSaveClipBox const *)arg1)->succeed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1Floats(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mgvector< float > *arg1 = (mgvector< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mgvector< float > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Floats(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  mgvector< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (mgvector< float > *)new mgvector< float >(arg1);
  *(mgvector< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_Floats_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mgvector< float > *arg1 = (mgvector< float > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mgvector< float > **)&jarg1; 
  result = (int)((mgvector< float > const *)arg1)->count();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_Floats_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  mgvector< float > *arg1 = (mgvector< float > *) 0 ;
  int arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mgvector< float > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float)((mgvector< float > const *)arg1)->get(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_Floats_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  mgvector< float > *arg1 = (mgvector< float > *) 0 ;
  int arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mgvector< float > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1Chars(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mgvector< char > *arg1 = (mgvector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mgvector< char > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Chars(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  mgvector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (mgvector< char > *)new mgvector< char >(arg1);
  *(mgvector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_Chars_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mgvector< char > *arg1 = (mgvector< char > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mgvector< char > **)&jarg1; 
  result = (int)((mgvector< char > const *)arg1)->count();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_touchvg_jni_skiaviewJNI_Chars_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jchar jresult = 0 ;
  mgvector< char > *arg1 = (mgvector< char > *) 0 ;
  int arg2 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mgvector< char > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (char)((mgvector< char > const *)arg1)->get(arg2);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_Chars_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jchar jarg3) {
  mgvector< char > *arg1 = (mgvector< char > *) 0 ;
  int arg2 ;
  char arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mgvector< char > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1Ints(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  mgvector< int > *arg1 = (mgvector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(mgvector< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1Ints(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  mgvector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (mgvector< int > *)new mgvector< int >(arg1);
  *(mgvector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_Ints_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  mgvector< int > *arg1 = (mgvector< int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mgvector< int > **)&jarg1; 
  result = (int)((mgvector< int > const *)arg1)->count();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_Ints_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  mgvector< int > *arg1 = (mgvector< int > *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mgvector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((mgvector< int > const *)arg1)->get(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_Ints_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  mgvector< int > *arg1 = (mgvector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(mgvector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1GiCanvasBase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GiCanvasBase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GiCanvasBase *)new SwigDirector_GiCanvasBase(jenv);
  *(GiCanvasBase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1GiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GiCanvasBase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1xf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  GiTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  result = (GiTransform *) &(arg1)->xf();
  *(GiTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1gs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  GiGraphics *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  result = (GiGraphics *) &(arg1)->gs();
  *(GiGraphics **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1setScreenDpi(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  float arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  GiCanvasBase::setScreenDpi(arg1);
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1getScreenDpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  result = (float)((GiCanvasBase const *)arg1)->getScreenDpi();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1getScreenDpiSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  result = (float)((GiCanvasBase const *)arg1)->GiCanvasBase::getScreenDpi();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1getBkColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  GiColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  result = ((GiCanvasBase const *)arg1)->getBkColor();
  *(GiColor **)&jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1getBkColorSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  GiColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  result = ((GiCanvasBase const *)arg1)->GiCanvasBase::getBkColor();
  *(GiColor **)&jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1setBkColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  GiColor *arg2 = 0 ;
  GiColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = *(GiColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiColor const & reference is null");
    return 0;
  } 
  result = (arg1)->setBkColor((GiColor const &)*arg2);
  *(GiColor **)&jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1setBkColorSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  GiColor *arg2 = 0 ;
  GiColor result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = *(GiColor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiColor const & reference is null");
    return 0;
  } 
  result = (arg1)->GiCanvasBase::setBkColor((GiColor const &)*arg2);
  *(GiColor **)&jresult = new GiColor((const GiColor &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1beginPaint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  result = (bool)(arg1)->beginPaint();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1endPaint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  (arg1)->endPaint();
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1setNeedRedraw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  (arg1)->setNeedRedraw();
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1setNeedRedrawSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  (arg1)->GiCanvasBase::setNeedRedraw();
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawHandle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->drawHandle(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawHandleSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float arg2 ;
  float arg3 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->GiCanvasBase::drawHandle(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1penChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jint jarg4) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  int arg2 ;
  float arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->penChanged(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1penChangedSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jint jarg4) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  int arg2 ;
  float arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->GiCanvasBase::penChanged(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1brushChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->brushChanged(arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1brushChangedSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->GiCanvasBase::brushChanged(arg2);
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1isContextActionsVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  result = (bool)(arg1)->isContextActionsVisible();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1isContextActionsVisibleSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  result = (bool)(arg1)->GiCanvasBase::isContextActionsVisible();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1showContextActions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  mgvector< int > *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = *(mgvector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mgvector< int > const & reference is null");
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->showContextActions((mgvector< int > const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1showContextActionsSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  mgvector< int > *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = *(mgvector< int > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mgvector< int > const & reference is null");
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->GiCanvasBase::showContextActions((mgvector< int > const &)*arg2,arg3,arg4,arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->drawLine(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawLineSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->GiCanvasBase::drawLine(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawLines(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  mgvector< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = *(mgvector< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mgvector< float > const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->drawLines((mgvector< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawLinesSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  mgvector< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = *(mgvector< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mgvector< float > const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->GiCanvasBase::drawLines((mgvector< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawBeziers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  mgvector< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = *(mgvector< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mgvector< float > const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->drawBeziers((mgvector< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawBeziersSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  mgvector< float > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = *(mgvector< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mgvector< float > const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->GiCanvasBase::drawBeziers((mgvector< float > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawPolygon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  mgvector< float > *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = *(mgvector< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mgvector< float > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->drawPolygon((mgvector< float > const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawPolygonSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  mgvector< float > *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = *(mgvector< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mgvector< float > const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->GiCanvasBase::drawPolygon((mgvector< float > const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawRect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jboolean jarg6, jboolean jarg7) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  result = (bool)(arg1)->drawRect(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawRectSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jboolean jarg6, jboolean jarg7) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  result = (bool)(arg1)->GiCanvasBase::drawRect(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawEllipse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jboolean jarg6, jboolean jarg7) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  result = (bool)(arg1)->drawEllipse(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawEllipseSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jboolean jarg6, jboolean jarg7) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  result = (bool)(arg1)->GiCanvasBase::drawEllipse(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1beginPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  result = (bool)(arg1)->beginPath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1beginPathSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  result = (bool)(arg1)->GiCanvasBase::beginPath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1moveTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->moveTo(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1moveToSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->GiCanvasBase::moveTo(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1lineTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->lineTo(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1lineToSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->GiCanvasBase::lineTo(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1bezierTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->bezierTo(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1bezierToSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->GiCanvasBase::bezierTo(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1closePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  result = (bool)(arg1)->closePath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1closePathSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  result = (bool)(arg1)->GiCanvasBase::closePath();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1endPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->endPath(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1endPathSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->GiCanvasBase::endPath(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1clearWindow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  (arg1)->clearWindow();
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1clearWindowSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  (arg1)->GiCanvasBase::clearWindow();
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1clearCachedBitmap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->clearCachedBitmap(arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1clearCachedBitmapSwigExplicitGiCanvasBase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->GiCanvasBase::clearCachedBitmap(arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1clearCachedBitmap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  (arg1)->clearCachedBitmap();
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1clearCachedBitmapSwigExplicitGiCanvasBase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  (arg1)->GiCanvasBase::clearCachedBitmap();
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawCachedBitmap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float arg2 ;
  float arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->drawCachedBitmap(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawCachedBitmapSwigExplicitGiCanvasBase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float arg2 ;
  float arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->GiCanvasBase::drawCachedBitmap(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawCachedBitmap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->drawCachedBitmap(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawCachedBitmapSwigExplicitGiCanvasBase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float arg2 ;
  float arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->GiCanvasBase::drawCachedBitmap(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawCachedBitmap_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)(arg1)->drawCachedBitmap(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawCachedBitmapSwigExplicitGiCanvasBase_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)(arg1)->GiCanvasBase::drawCachedBitmap(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawCachedBitmap_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  result = (bool)(arg1)->drawCachedBitmap();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawCachedBitmapSwigExplicitGiCanvasBase_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  result = (bool)(arg1)->GiCanvasBase::drawCachedBitmap();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1saveCachedBitmap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->saveCachedBitmap(arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1saveCachedBitmapSwigExplicitGiCanvasBase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->GiCanvasBase::saveCachedBitmap(arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1saveCachedBitmap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  (arg1)->saveCachedBitmap();
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1saveCachedBitmapSwigExplicitGiCanvasBase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  (arg1)->GiCanvasBase::saveCachedBitmap();
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1hasCachedBitmap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)((GiCanvasBase const *)arg1)->hasCachedBitmap(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1hasCachedBitmapSwigExplicitGiCanvasBase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)((GiCanvasBase const *)arg1)->GiCanvasBase::hasCachedBitmap(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1hasCachedBitmap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  result = (bool)((GiCanvasBase const *)arg1)->hasCachedBitmap();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1hasCachedBitmapSwigExplicitGiCanvasBase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  result = (bool)((GiCanvasBase const *)arg1)->GiCanvasBase::hasCachedBitmap();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1isBufferedDrawing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  result = (bool)((GiCanvasBase const *)arg1)->isBufferedDrawing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1isBufferedDrawingSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  result = (bool)((GiCanvasBase const *)arg1)->GiCanvasBase::isBufferedDrawing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1clipBoxChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->clipBoxChanged(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1clipBoxChangedSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->GiCanvasBase::clipBoxChanged(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1antiAliasModeChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->antiAliasModeChanged(arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1antiAliasModeChangedSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->GiCanvasBase::antiAliasModeChanged(arg2);
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->drawImage((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1drawImageSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  jboolean jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)(arg1)->GiCanvasBase::drawImage((char const *)arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1rawTextCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->rawTextCenter((char const *)arg2,arg3,arg4,arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1rawTextCenterSwigExplicitGiCanvasBase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->GiCanvasBase::rawTextCenter((char const *)arg2,arg3,arg4,arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  GiCanvasBase *obj = *((GiCanvasBase **)&objarg);
  (void)jcls;
  SwigDirector_GiCanvasBase *director = dynamic_cast<SwigDirector_GiCanvasBase *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCanvasBase_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  GiCanvasBase *obj = *((GiCanvasBase **)&objarg);
  SwigDirector_GiCanvasBase *director = dynamic_cast<SwigDirector_GiCanvasBase *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgObject_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgObject *arg1 = (MgObject *) 0 ;
  MgObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgObject **)&jarg1; 
  result = (MgObject *)((MgObject const *)arg1)->clone();
  *(MgObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgObject_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MgObject *arg1 = (MgObject *) 0 ;
  MgObject *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgObject **)&jarg1; 
  arg2 = *(MgObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MgObject const & reference is null");
    return ;
  } 
  (arg1)->copy((MgObject const &)*arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgObject_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MgObject *arg1 = (MgObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgObject **)&jarg1; 
  (arg1)->release();
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgObject_1equals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  MgObject *arg1 = (MgObject *) 0 ;
  MgObject *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgObject **)&jarg1; 
  arg2 = *(MgObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MgObject const & reference is null");
    return 0;
  } 
  result = (bool)((MgObject const *)arg1)->equals((MgObject const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgObject_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MgObject *arg1 = (MgObject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgObject **)&jarg1; 
  result = (int)((MgObject const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgObject_1isKindOf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  MgObject *arg1 = (MgObject *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgObject **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgObject const *)arg1)->isKindOf(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1MgObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MgObject *arg1 = (MgObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MgObject **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1Type(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MgShapes::Type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1cloneShapes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgShapes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  result = (MgShapes *)((MgShapes const *)arg1)->cloneShapes();
  *(MgShapes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1getShapeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  result = (int)((MgShapes const *)arg1)->getShapeCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1getLastShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  result = (MgShape *)((MgShapes const *)arg1)->getLastShape();
  *(MgShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1findShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int arg2 ;
  MgShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (MgShape *)((MgShapes const *)arg1)->findShape(arg2);
  *(MgShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1findShapeByTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int arg2 ;
  MgShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (MgShape *)((MgShapes const *)arg1)->findShapeByTag(arg2);
  *(MgShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1findShapeByType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int arg2 ;
  MgShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (MgShape *)((MgShapes const *)arg1)->findShapeByType(arg2);
  *(MgShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1getExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  Box2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  result = ((MgShapes const *)arg1)->getExtent();
  *(Box2d **)&jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1hitTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  Box2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  MgShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(MgShapes **)&jarg1; 
  arg2 = *(Box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d & reference is null");
    return 0;
  } 
  result = (MgShape *)((MgShapes const *)arg1)->hitTest((Box2d const &)*arg2,*arg3);
  *(MgShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1draw_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  GiGraphics *arg2 = 0 ;
  GiContext *arg3 = (GiContext *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(MgShapes **)&jarg1; 
  arg2 = *(GiGraphics **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiGraphics & reference is null");
    return 0;
  } 
  arg3 = *(GiContext **)&jarg3; 
  result = (int)((MgShapes const *)arg1)->draw(*arg2,(GiContext const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1draw_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  GiGraphics *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgShapes **)&jarg1; 
  arg2 = *(GiGraphics **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiGraphics & reference is null");
    return 0;
  } 
  result = (int)((MgShapes const *)arg1)->draw(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1getChangeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  result = (int)(arg1)->getChangeCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1afterChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MgShapes *arg1 = (MgShapes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  (arg1)->afterChanged();
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1save_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgShapes **)&jarg1; 
  arg2 = *(MgStorage **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)((MgShapes const *)arg1)->save(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1save_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgShapes **)&jarg1; 
  arg2 = *(MgStorage **)&jarg2; 
  result = (bool)((MgShapes const *)arg1)->save(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1load_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgShapes **)&jarg1; 
  arg2 = *(MgStorage **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->load(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1load_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgShapes **)&jarg1; 
  arg2 = *(MgStorage **)&jarg2; 
  result = (bool)(arg1)->load(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MgShapes *arg1 = (MgShapes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1addShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgShape *arg2 = 0 ;
  MgShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgShapes **)&jarg1; 
  arg2 = *(MgShape **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MgShape const & reference is null");
    return 0;
  } 
  result = (MgShape *)(arg1)->addShape((MgShape const &)*arg2);
  *(MgShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1removeShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int arg2 ;
  MgShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (MgShape *)(arg1)->removeShape(arg2);
  *(MgShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1bringToFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->bringToFront(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1context(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  result = (GiContext *)(arg1)->context();
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1modelTransform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  Matrix2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  result = (Matrix2d *) &(arg1)->modelTransform();
  *(Matrix2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1getZoomRectW(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  Box2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  result = ((MgShapes const *)arg1)->getZoomRectW();
  *(Box2d **)&jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1getViewScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  result = (float)((MgShapes const *)arg1)->getViewScale();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1setZoomRectW(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  MgShapes *arg1 = (MgShapes *) 0 ;
  Box2d *arg2 = 0 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgShapes **)&jarg1; 
  arg2 = *(Box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return ;
  } 
  arg3 = (float)jarg3; 
  (arg1)->setZoomRectW((Box2d const &)*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1getLockData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgLockRW *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  result = (MgLockRW *)(arg1)->getLockData();
  *(MgLockRW **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1MgShapes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MgShapes *arg1 = (MgShapes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MgShapes **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1MgShapeIterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  MgShapeIterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  result = (MgShapeIterator *)new MgShapeIterator((MgShapes const *)arg1);
  *(MgShapeIterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1MgShapeIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MgShapeIterator *arg1 = (MgShapeIterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MgShapeIterator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShapeIterator_1getFirstShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgShapeIterator *arg1 = (MgShapeIterator *) 0 ;
  MgShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapeIterator **)&jarg1; 
  result = (MgShape *)(arg1)->getFirstShape();
  *(MgShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShapeIterator_1getNextShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgShapeIterator *arg1 = (MgShapeIterator *) 0 ;
  MgShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapeIterator **)&jarg1; 
  result = (MgShape *)(arg1)->getNextShape();
  *(MgShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgShapeIterator_1freeIterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MgShapeIterator *arg1 = (MgShapeIterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapeIterator **)&jarg1; 
  (arg1)->freeIterator();
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1MgLockRW(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MgLockRW *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MgLockRW *)new MgLockRW();
  *(MgLockRW **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgLockRW_1lock_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  MgLockRW *arg1 = (MgLockRW *) 0 ;
  bool arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgLockRW **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->lock(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgLockRW_1lock_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  MgLockRW *arg1 = (MgLockRW *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgLockRW **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->lock(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgLockRW_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  MgLockRW *arg1 = (MgLockRW *) 0 ;
  bool arg2 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgLockRW **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (long)(arg1)->unlock(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgLockRW_1firstLocked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MgLockRW *arg1 = (MgLockRW *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgLockRW **)&jarg1; 
  result = (bool)(arg1)->firstLocked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgLockRW_1lockedForRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MgLockRW *arg1 = (MgLockRW *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgLockRW **)&jarg1; 
  result = (bool)(arg1)->lockedForRead();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgLockRW_1lockedForWrite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MgLockRW *arg1 = (MgLockRW *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgLockRW **)&jarg1; 
  result = (bool)(arg1)->lockedForWrite();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgLockRW_1getEditFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MgLockRW *arg1 = (MgLockRW *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgLockRW **)&jarg1; 
  result = (int)(arg1)->getEditFlags();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgLockRW_1setEditFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MgLockRW *arg1 = (MgLockRW *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgLockRW **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setEditFlags(arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1MgLockRW(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MgLockRW *arg1 = (MgLockRW *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MgLockRW **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgShapesLock_1shapes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MgShapesLock *arg1 = (MgShapesLock *) 0 ;
  MgShapes *arg2 = (MgShapes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgShapesLock **)&jarg1; 
  arg2 = *(MgShapes **)&jarg2; 
  if (arg1) (arg1)->shapes = arg2;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShapesLock_1shapes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgShapesLock *arg1 = (MgShapesLock *) 0 ;
  MgShapes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapesLock **)&jarg1; 
  result = (MgShapes *) ((arg1)->shapes);
  *(MgShapes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgShapesLock_1ReadOnly_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MgShapesLock::ReadOnly;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgShapesLock_1Add_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MgShapesLock::Add;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgShapesLock_1Remove_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MgShapesLock::Remove;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgShapesLock_1Edit_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MgShapesLock::Edit;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgShapesLock_1Load_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MgShapesLock::Load;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgShapesLock_1Unknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MgShapesLock::Unknown;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1MgShapesLock_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int arg2 ;
  int arg3 ;
  MgShapesLock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (MgShapesLock *)new MgShapesLock(arg1,arg2,arg3);
  *(MgShapesLock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1MgShapesLock_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  int arg2 ;
  MgShapesLock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (MgShapesLock *)new MgShapesLock(arg1,arg2);
  *(MgShapesLock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1MgShapesLock(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MgShapesLock *arg1 = (MgShapesLock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MgShapesLock **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgShapesLock_1locked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MgShapesLock *arg1 = (MgShapesLock *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapesLock **)&jarg1; 
  result = (bool)(arg1)->locked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgShapesLock_1lockedForRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  result = (bool)MgShapesLock::lockedForRead(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgShapesLock_1lockedForWrite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  result = (bool)MgShapesLock::lockedForWrite(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgShapesLock_1getEditFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MgShapesLock *arg1 = (MgShapesLock *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapesLock **)&jarg1; 
  result = (int)(arg1)->getEditFlags();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgShapesLock_1resetEditFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MgShapesLock *arg1 = (MgShapesLock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapesLock **)&jarg1; 
  (arg1)->resetEditFlags();
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1MgDynShapeLock_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1, jint jarg2) {
  jlong jresult = 0 ;
  bool arg1 ;
  int arg2 ;
  MgDynShapeLock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  arg2 = (int)jarg2; 
  result = (MgDynShapeLock *)new MgDynShapeLock(arg1,arg2);
  *(MgDynShapeLock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1MgDynShapeLock_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  MgDynShapeLock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (MgDynShapeLock *)new MgDynShapeLock(arg1);
  *(MgDynShapeLock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1MgDynShapeLock_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MgDynShapeLock *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MgDynShapeLock *)new MgDynShapeLock();
  *(MgDynShapeLock **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1MgDynShapeLock(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MgDynShapeLock *arg1 = (MgDynShapeLock *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MgDynShapeLock **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgDynShapeLock_1locked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MgDynShapeLock *arg1 = (MgDynShapeLock *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgDynShapeLock **)&jarg1; 
  result = (bool)(arg1)->locked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgDynShapeLock_1lockedForRead(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)MgDynShapeLock::lockedForRead();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgDynShapeLock_1lockedForWrite(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)MgDynShapeLock::lockedForWrite();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgShape_1Type(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MgShape::Type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShape_1cloneShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgShape *arg1 = (MgShape *) 0 ;
  MgShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShape **)&jarg1; 
  result = (MgShape *)((MgShape const *)arg1)->cloneShape();
  *(MgShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShape_1context(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgShape *arg1 = (MgShape *) 0 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShape **)&jarg1; 
  result = (GiContext *)(arg1)->context();
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShape_1contextc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgShape *arg1 = (MgShape *) 0 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShape **)&jarg1; 
  result = (GiContext *)((MgShape const *)arg1)->contextc();
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShape_1shape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgShape *arg1 = (MgShape *) 0 ;
  MgBaseShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShape **)&jarg1; 
  result = (MgBaseShape *)(arg1)->shape();
  *(MgBaseShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShape_1shapec(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgShape *arg1 = (MgShape *) 0 ;
  MgBaseShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShape **)&jarg1; 
  result = (MgBaseShape *)((MgShape const *)arg1)->shapec();
  *(MgBaseShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgShape_1draw_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  MgShape *arg1 = (MgShape *) 0 ;
  int arg2 ;
  GiGraphics *arg3 = 0 ;
  GiContext *arg4 = (GiContext *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(MgShape **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(GiGraphics **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiGraphics & reference is null");
    return 0;
  } 
  arg4 = *(GiContext **)&jarg4; 
  result = (bool)((MgShape const *)arg1)->draw(arg2,*arg3,(GiContext const *)arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgShape_1draw_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  MgShape *arg1 = (MgShape *) 0 ;
  int arg2 ;
  GiGraphics *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(MgShape **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(GiGraphics **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiGraphics & reference is null");
    return 0;
  } 
  result = (bool)((MgShape const *)arg1)->draw(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgShape_1save(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  MgShape *arg1 = (MgShape *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgShape **)&jarg1; 
  arg2 = *(MgStorage **)&jarg2; 
  result = (bool)((MgShape const *)arg1)->save(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgShape_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  MgShape *arg1 = (MgShape *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgShape **)&jarg1; 
  arg2 = *(MgStorage **)&jarg2; 
  result = (bool)(arg1)->load(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgShape_1getID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MgShape *arg1 = (MgShape *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShape **)&jarg1; 
  result = (int)((MgShape const *)arg1)->getID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShape_1getParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgShape *arg1 = (MgShape *) 0 ;
  MgShapes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShape **)&jarg1; 
  result = (MgShapes *)((MgShape const *)arg1)->getParent();
  *(MgShapes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgShape_1setParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  MgShape *arg1 = (MgShape *) 0 ;
  MgShapes *arg2 = (MgShapes *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgShape **)&jarg1; 
  arg2 = *(MgShapes **)&jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setParent(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgShape_1getTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MgShape *arg1 = (MgShape *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShape **)&jarg1; 
  result = (int)((MgShape const *)arg1)->getTag();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgShape_1setTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MgShape *arg1 = (MgShape *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShape **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setTag(arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1MgShape(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MgShape *arg1 = (MgShape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MgShape **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1Type(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MgBaseShape::Type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1cloneShape(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgBaseShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseShape **)&jarg1; 
  result = (MgBaseShape *)((MgBaseShape const *)arg1)->cloneShape();
  *(MgBaseShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1setOwner(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgShape *arg2 = (MgShape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgBaseShape **)&jarg1; 
  arg2 = *(MgShape **)&jarg2; 
  (arg1)->setOwner(arg2);
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1getExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  Box2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseShape **)&jarg1; 
  result = ((MgBaseShape const *)arg1)->getExtent();
  *(Box2d **)&jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseShape **)&jarg1; 
  (arg1)->update();
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1transform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  Matrix2d *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgBaseShape **)&jarg1; 
  arg2 = *(Matrix2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Matrix2d const & reference is null");
    return ;
  } 
  (arg1)->transform((Matrix2d const &)*arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseShape **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1getPointCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseShape **)&jarg1; 
  result = (int)((MgBaseShape const *)arg1)->getPointCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1getPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int arg2 ;
  Point2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseShape **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgBaseShape const *)arg1)->getPoint(arg2);
  *(Point2d **)&jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1setPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(MgBaseShape **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return ;
  } 
  (arg1)->setPoint(arg2,(Point2d const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1isClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseShape **)&jarg1; 
  result = (bool)((MgBaseShape const *)arg1)->isClosed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1isCurve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseShape **)&jarg1; 
  result = (bool)((MgBaseShape const *)arg1)->isCurve();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1hitTest2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jlong jarg4, jobject jarg4_) {
  jfloat jresult = 0 ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  Point2d *arg4 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(MgBaseShape **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = *(Point2d **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d & reference is null");
    return 0;
  } 
  result = (float)((MgBaseShape const *)arg1)->hitTest2((Point2d const &)*arg2,arg3,*arg4);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1hitTestBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  Box2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgBaseShape **)&jarg1; 
  arg2 = *(Box2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Box2d const & reference is null");
    return 0;
  } 
  result = (bool)((MgBaseShape const *)arg1)->hitTestBox((Box2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1draw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int arg2 ;
  GiGraphics *arg3 = 0 ;
  GiContext *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(MgBaseShape **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(GiGraphics **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiGraphics & reference is null");
    return 0;
  } 
  arg4 = *(GiContext **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiContext const & reference is null");
    return 0;
  } 
  result = (bool)((MgBaseShape const *)arg1)->draw(arg2,*arg3,(GiContext const &)*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1save(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgBaseShape **)&jarg1; 
  arg2 = *(MgStorage **)&jarg2; 
  result = (bool)((MgBaseShape const *)arg1)->save(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgBaseShape **)&jarg1; 
  arg2 = *(MgStorage **)&jarg2; 
  result = (bool)(arg1)->load(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1getHandleCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseShape **)&jarg1; 
  result = (int)((MgBaseShape const *)arg1)->getHandleCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1getHandlePoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int arg2 ;
  Point2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseShape **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((MgBaseShape const *)arg1)->getHandlePoint(arg2);
  *(Point2d **)&jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1setHandlePoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jfloat jarg4) {
  jboolean jresult = 0 ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(MgBaseShape **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg4 = (float)jarg4; 
  result = (bool)(arg1)->setHandlePoint(arg2,(Point2d const &)*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1isHandleFixed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseShape **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((MgBaseShape const *)arg1)->isHandleFixed(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  Vector2d *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgBaseShape **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->offset((Vector2d const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1getFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgShapeBit arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseShape **)&jarg1; 
  arg2 = (MgShapeBit)jarg2; 
  result = (bool)((MgBaseShape const *)arg1)->getFlag(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1setFlag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  MgBaseShape *arg1 = (MgBaseShape *) 0 ;
  MgShapeBit arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseShape **)&jarg1; 
  arg2 = (MgShapeBit)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setFlag(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1MgLine(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MgLine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MgLine *)new MgLine();
  *(MgLine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1MgLine(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MgLine *arg1 = (MgLine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MgLine **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgLine_1create(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MgLine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MgLine *)MgLine::create();
  *(MgLine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgLine_1Type(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MgLine::Type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgLine_1startPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgLine *arg1 = (MgLine *) 0 ;
  Point2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgLine **)&jarg1; 
  result = (Point2d *) &((MgLine const *)arg1)->startPoint();
  *(Point2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgLine_1endPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgLine *arg1 = (MgLine *) 0 ;
  Point2d *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgLine **)&jarg1; 
  result = (Point2d *) &((MgLine const *)arg1)->endPoint();
  *(Point2d **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgLine_1center(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgLine *arg1 = (MgLine *) 0 ;
  Point2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgLine **)&jarg1; 
  result = ((MgLine const *)arg1)->center();
  *(Point2d **)&jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_MgLine_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  MgLine *arg1 = (MgLine *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgLine **)&jarg1; 
  result = (float)((MgLine const *)arg1)->length();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_MgLine_1angle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  MgLine *arg1 = (MgLine *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgLine **)&jarg1; 
  result = (float)((MgLine const *)arg1)->angle();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgLine_1setStartPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MgLine *arg1 = (MgLine *) 0 ;
  Point2d *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgLine **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return ;
  } 
  (arg1)->setStartPoint((Point2d const &)*arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgLine_1setEndPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MgLine *arg1 = (MgLine *) 0 ;
  Point2d *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgLine **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return ;
  } 
  (arg1)->setEndPoint((Point2d const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseRect_1Type(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MgBaseRect::Type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseRect_1getCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  Point2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseRect **)&jarg1; 
  result = ((MgBaseRect const *)arg1)->getCenter();
  *(Point2d **)&jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseRect_1getRect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  Box2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseRect **)&jarg1; 
  result = ((MgBaseRect const *)arg1)->getRect();
  *(Box2d **)&jresult = new Box2d((const Box2d &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseRect_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseRect **)&jarg1; 
  result = (float)((MgBaseRect const *)arg1)->getWidth();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseRect_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseRect **)&jarg1; 
  result = (float)((MgBaseRect const *)arg1)->getHeight();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseRect_1getAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseRect **)&jarg1; 
  result = (float)((MgBaseRect const *)arg1)->getAngle();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseRect_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  jboolean jresult = 0 ;
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  float arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseRect **)&jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)((MgBaseRect const *)arg1)->isEmpty(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseRect_1isOrtho(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseRect **)&jarg1; 
  result = (bool)((MgBaseRect const *)arg1)->isOrtho();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseRect_1setRect2P(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(MgBaseRect **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return ;
  } 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return ;
  } 
  (arg1)->setRect2P((Point2d const &)*arg2,(Point2d const &)*arg3);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseRect_1setRectWithAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4, jlong jarg5, jobject jarg5_) {
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  float arg4 ;
  Point2d *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg5_;
  arg1 = *(MgBaseRect **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return ;
  } 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return ;
  } 
  arg4 = (float)jarg4; 
  arg5 = *(Point2d **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return ;
  } 
  (arg1)->setRectWithAngle((Point2d const &)*arg2,(Point2d const &)*arg3,arg4,(Point2d const &)*arg5);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseRect_1setRect4P(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  Point2d *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgBaseRect **)&jarg1; 
  arg2 = *(Point2d **)&jarg2; 
  (arg1)->setRect4P((Point2d const (*))arg2);
  
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseRect_1setCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  Point2d *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgBaseRect **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return ;
  } 
  (arg1)->setCenter((Point2d const &)*arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseRect_1setSquare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseRect **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSquare(arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1MgBaseRect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MgBaseRect *arg1 = (MgBaseRect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MgBaseRect **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1MgRect(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MgRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MgRect *)new MgRect();
  *(MgRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1MgRect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MgRect *arg1 = (MgRect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MgRect **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgRect_1create(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MgRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MgRect *)MgRect::create();
  *(MgRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgRect_1Type(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MgRect::Type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1MgEllipse(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MgEllipse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MgEllipse *)new MgEllipse();
  *(MgEllipse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1MgEllipse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MgEllipse **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgEllipse_1create(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MgEllipse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MgEllipse *)MgEllipse::create();
  *(MgEllipse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgEllipse_1Type(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MgEllipse::Type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_MgEllipse_1getRadiusX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgEllipse **)&jarg1; 
  result = (float)((MgEllipse const *)arg1)->getRadiusX();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_MgEllipse_1getRadiusY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgEllipse **)&jarg1; 
  result = (float)((MgEllipse const *)arg1)->getRadiusY();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgEllipse_1setRadius_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  float arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgEllipse **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setRadius(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgEllipse_1setRadius_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  MgEllipse *arg1 = (MgEllipse *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgEllipse **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRadius(arg2);
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1MgRoundRect(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MgRoundRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MgRoundRect *)new MgRoundRect();
  *(MgRoundRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1MgRoundRect(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MgRoundRect **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgRoundRect_1create(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MgRoundRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MgRoundRect *)MgRoundRect::create();
  *(MgRoundRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgRoundRect_1Type(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MgRoundRect::Type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_MgRoundRect_1getRadiusX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgRoundRect **)&jarg1; 
  result = (float)((MgRoundRect const *)arg1)->getRadiusX();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_MgRoundRect_1getRadiusY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgRoundRect **)&jarg1; 
  result = (float)((MgRoundRect const *)arg1)->getRadiusY();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgRoundRect_1setRadius_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  float arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgRoundRect **)&jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->setRadius(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgRoundRect_1setRadius_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  MgRoundRect *arg1 = (MgRoundRect *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgRoundRect **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setRadius(arg2);
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseLines_1Type(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MgBaseLines::Type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseLines_1setClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  MgBaseLines *arg1 = (MgBaseLines *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseLines **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setClosed(arg2);
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseLines_1endPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgBaseLines *arg1 = (MgBaseLines *) 0 ;
  Point2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseLines **)&jarg1; 
  result = ((MgBaseLines const *)arg1)->endPoint();
  *(Point2d **)&jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseLines_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  MgBaseLines *arg1 = (MgBaseLines *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseLines **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->resize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseLines_1addPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  MgBaseLines *arg1 = (MgBaseLines *) 0 ;
  Point2d *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgBaseLines **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->addPoint((Point2d const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseLines_1insertPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  MgBaseLines *arg1 = (MgBaseLines *) 0 ;
  int arg2 ;
  Point2d *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(MgBaseLines **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->insertPoint(arg2,(Point2d const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseLines_1removePoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  MgBaseLines *arg1 = (MgBaseLines *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgBaseLines **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->removePoint(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1MgLines(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MgLines *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MgLines *)new MgLines();
  *(MgLines **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1MgLines(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MgLines *arg1 = (MgLines *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MgLines **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgLines_1create(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MgLines *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MgLines *)MgLines::create();
  *(MgLines **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgLines_1Type(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MgLines::Type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1MgSplines(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MgSplines *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MgSplines *)new MgSplines();
  *(MgSplines **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1MgSplines(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MgSplines *arg1 = (MgSplines *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MgSplines **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgSplines_1create(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MgSplines *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MgSplines *)MgSplines::create();
  *(MgSplines **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgSplines_1Type(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MgSplines::Type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgSplines_1smooth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  MgSplines *arg1 = (MgSplines *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgSplines **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->smooth(arg2);
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1MgImageShape(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MgImageShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MgImageShape *)new MgImageShape();
  *(MgImageShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1MgImageShape(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MgImageShape **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgImageShape_1create(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MgImageShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MgImageShape *)MgImageShape::create();
  *(MgImageShape **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgImageShape_1Type(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MgImageShape::Type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_touchvg_jni_skiaviewJNI_MgImageShape_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgImageShape **)&jarg1; 
  result = (char *)((MgImageShape const *)arg1)->getName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgImageShape_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  MgImageShape *arg1 = (MgImageShape *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgImageShape **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setName((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgImageShape_1findShapeByImageID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  MgShapes *arg1 = (MgShapes *) 0 ;
  char *arg2 = (char *) 0 ;
  MgShape *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgShapes **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (MgShape *)MgImageShape::findShapeByImageID(arg1,(char const *)arg2);
  *(MgShape **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1MgArc(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MgArc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MgArc *)new MgArc();
  *(MgArc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1MgArc(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MgArc *arg1 = (MgArc *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MgArc **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgArc_1create(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MgArc *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MgArc *)MgArc::create();
  *(MgArc **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgArc_1Type(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)MgArc::Type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgArc_1getCenter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgArc *arg1 = (MgArc *) 0 ;
  Point2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgArc **)&jarg1; 
  result = ((MgArc const *)arg1)->getCenter();
  *(Point2d **)&jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgArc_1getStartPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgArc *arg1 = (MgArc *) 0 ;
  Point2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgArc **)&jarg1; 
  result = ((MgArc const *)arg1)->getStartPoint();
  *(Point2d **)&jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgArc_1getEndPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgArc *arg1 = (MgArc *) 0 ;
  Point2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgArc **)&jarg1; 
  result = ((MgArc const *)arg1)->getEndPoint();
  *(Point2d **)&jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgArc_1getMidPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgArc *arg1 = (MgArc *) 0 ;
  Point2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgArc **)&jarg1; 
  result = ((MgArc const *)arg1)->getMidPoint();
  *(Point2d **)&jresult = new Point2d((const Point2d &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_MgArc_1getRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  MgArc *arg1 = (MgArc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgArc **)&jarg1; 
  result = (float)((MgArc const *)arg1)->getRadius();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_MgArc_1getStartAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  MgArc *arg1 = (MgArc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgArc **)&jarg1; 
  result = (float)((MgArc const *)arg1)->getStartAngle();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_MgArc_1getEndAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  MgArc *arg1 = (MgArc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgArc **)&jarg1; 
  result = (float)((MgArc const *)arg1)->getEndAngle();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_MgArc_1getSweepAngle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  MgArc *arg1 = (MgArc *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgArc **)&jarg1; 
  result = (float)((MgArc const *)arg1)->getSweepAngle();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgArc_1getStartTangent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgArc *arg1 = (MgArc *) 0 ;
  Vector2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgArc **)&jarg1; 
  result = ((MgArc const *)arg1)->getStartTangent();
  *(Vector2d **)&jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgArc_1getEndTangent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgArc *arg1 = (MgArc *) 0 ;
  Vector2d result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgArc **)&jarg1; 
  result = ((MgArc const *)arg1)->getEndTangent();
  *(Vector2d **)&jresult = new Vector2d((const Vector2d &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgArc_1setStartMidEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  MgArc *arg1 = (MgArc *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(MgArc **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg4 = *(Point2d **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setStartMidEnd((Point2d const &)*arg2,(Point2d const &)*arg3,(Point2d const &)*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgArc_1setCenterStartEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  MgArc *arg1 = (MgArc *) 0 ;
  Point2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(MgArc **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg4 = *(Point2d **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setCenterStartEnd((Point2d const &)*arg2,(Point2d const &)*arg3,(Point2d const &)*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgArc_1setTanStartEnd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  MgArc *arg1 = (MgArc *) 0 ;
  Vector2d *arg2 = 0 ;
  Point2d *arg3 = 0 ;
  Point2d *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(MgArc **)&jarg1; 
  arg2 = *(Vector2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Vector2d const & reference is null");
    return 0;
  } 
  arg3 = *(Point2d **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg4 = *(Point2d **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setTanStartEnd((Vector2d const &)*arg2,(Point2d const &)*arg3,(Point2d const &)*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgArc_1setCenterRadius(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  jboolean jresult = 0 ;
  MgArc *arg1 = (MgArc *) 0 ;
  Point2d *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MgArc **)&jarg1; 
  arg2 = *(Point2d **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Point2d const & reference is null");
    return 0;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)(arg1)->setCenterRadius((Point2d const &)*arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_kSinglePan_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiGestureType result;
  
  (void)jenv;
  (void)jcls;
  result = (GiGestureType)kSinglePan;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_kGestureCancel_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GiGestureState result;
  
  (void)jenv;
  (void)jcls;
  result = (GiGestureState)kGestureCancel;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1GiCoreView(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  GiCanvasBase *arg1 = (GiCanvasBase *) 0 ;
  GiCoreView *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCanvasBase **)&jarg1; 
  result = (GiCoreView *)new GiCoreView(arg1);
  *(GiCoreView **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1GiCoreView(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GiCoreView **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCoreView_1findShapeByImageId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->findShapeByImageId((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCoreView_1addImageShapes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->addImageShapes((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCoreView_1saveShapes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = *(MgStorage **)&jarg2; 
  result = (bool)(arg1)->saveShapes(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCoreView_1loadShapes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  MgStorage *arg2 = (MgStorage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = *(MgStorage **)&jarg2; 
  result = (bool)(arg1)->loadShapes(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_GiCoreView_1getShapeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  result = (int)(arg1)->getShapeCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_GiCoreView_1getRedrawCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  result = (int)(arg1)->getRedrawCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_GiCoreView_1getChangeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  result = (int)(arg1)->getChangeCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_GiCoreView_1addTestingShapes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  result = (int)(arg1)->addTestingShapes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_GiCoreView_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  result = (int)((GiCoreView const *)arg1)->getWidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_GiCoreView_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  result = (int)((GiCoreView const *)arg1)->getHeight();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCoreView_1onSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->onSize(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCoreView_1onDraw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiCanvasBase *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = *(GiCanvasBase **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiCanvasBase & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->onDraw(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCoreView_1onDynDraw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiCanvasBase *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = *(GiCanvasBase **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiCanvasBase & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->onDynDraw(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_touchvg_jni_skiaviewJNI_GiCoreView_1getCommandName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  result = (char *)((GiCoreView const *)arg1)->getCommandName();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCoreView_1setCommandName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->setCommandName((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCoreView_1doContextAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->doContextAction(arg2);
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_GiCoreView_1onGesture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8) {
  jboolean jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiGestureType arg2 ;
  GiGestureState arg3 ;
  int arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = (GiGestureType)jarg2; 
  arg3 = (GiGestureState)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  result = (bool)(arg1)->onGesture(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiCoreView_1getCurrentContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  bool arg2 ;
  GiContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (GiContext *) &(arg1)->getCurrentContext(arg2);
  *(GiContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCoreView_1applyContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  GiContext *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = *(GiContext **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "GiContext const & reference is null");
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->applyContext((GiContext const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_GiCoreView_1setZoomFeature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setZoomFeature(arg2);
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_GiCoreView_1getDimensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  GiCoreView *arg1 = (GiCoreView *) 0 ;
  mgvector< float > *arg2 = 0 ;
  mgvector< char > *arg3 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(GiCoreView **)&jarg1; 
  arg2 = *(mgvector< float > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mgvector< float > & reference is null");
    return 0;
  } 
  arg3 = *(mgvector< char > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "mgvector< char > & reference is null");
    return 0;
  } 
  result = (int)(arg1)->getDimensions(*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_new_1MgJsonStorage(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MgJsonStorage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MgJsonStorage *)new MgJsonStorage();
  *(MgJsonStorage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1MgJsonStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MgJsonStorage *arg1 = (MgJsonStorage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MgJsonStorage **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgJsonStorage_1storageForRead(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  MgJsonStorage *arg1 = (MgJsonStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  MgStorage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgJsonStorage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (MgStorage *)(arg1)->storageForRead((char const *)arg2);
  *(MgStorage **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgJsonStorage_1storageForWrite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MgJsonStorage *arg1 = (MgJsonStorage *) 0 ;
  MgStorage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgJsonStorage **)&jarg1; 
  result = (MgStorage *)(arg1)->storageForWrite();
  *(MgStorage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_touchvg_jni_skiaviewJNI_MgJsonStorage_1stringify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jstring jresult = 0 ;
  MgJsonStorage *arg1 = (MgJsonStorage *) 0 ;
  bool arg2 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgJsonStorage **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (char *)(arg1)->stringify(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_touchvg_jni_skiaviewJNI_MgJsonStorage_1getParseError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  MgJsonStorage *arg1 = (MgJsonStorage *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgJsonStorage **)&jarg1; 
  result = (char *)(arg1)->getParseError();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgStorage_1readNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgStorage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->readNode((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgStorage_1writeNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgStorage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->writeNode((char const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_touchvg_jni_skiaviewJNI_MgStorage_1readBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgStorage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->readBool((char const *)arg2,arg3);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_touchvg_jni_skiaviewJNI_MgStorage_1readFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3) {
  jfloat jresult = 0 ;
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgStorage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (float)jarg3; 
  result = (float)(arg1)->readFloat((char const *)arg2,arg3);
  jresult = (jfloat)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgStorage_1writeBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgStorage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false; 
  (arg1)->writeBool((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgStorage_1writeFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3) {
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgStorage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (float)jarg3; 
  (arg1)->writeFloat((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgStorage_1writeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgStorage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->writeString((char const *)arg2,(char const *)arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jint JNICALL Java_touchvg_jni_skiaviewJNI_MgStorage_1readInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgStorage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (int)(arg1)->readInt((char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgStorage_1writeInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgStorage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  (arg1)->writeInt((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_MgStorage_1writeUInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  MgStorage *arg1 = (MgStorage *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MgStorage **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3; 
  (arg1)->writeUInt((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_delete_1MgStorage(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MgStorage *arg1 = (MgStorage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MgStorage **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Vector2d_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(tagVECTOR2D **)&baseptr = *(Vector2d **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Point2d_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(tagPOINT2D **)&baseptr = *(Point2d **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Matrix2d_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(tagMATRIX2D **)&baseptr = *(Matrix2d **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_Box2d_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(tagBOX2D **)&baseptr = *(Box2d **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_GiGraphics_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(GiCanvasDrawing **)&baseptr = *(GiGraphics **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShapes_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(MgObject **)&baseptr = *(MgShapes **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgShape_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(MgObject **)&baseptr = *(MgShape **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseShape_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(MgObject **)&baseptr = *(MgBaseShape **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgLine_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(MgBaseShape **)&baseptr = *(MgLine **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseRect_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(MgBaseShape **)&baseptr = *(MgBaseRect **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgRect_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(MgBaseRect **)&baseptr = *(MgRect **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgEllipse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(MgBaseRect **)&baseptr = *(MgEllipse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgRoundRect_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(MgBaseRect **)&baseptr = *(MgRoundRect **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgBaseLines_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(MgBaseShape **)&baseptr = *(MgBaseLines **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgLines_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(MgBaseLines **)&baseptr = *(MgLines **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgSplines_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(MgBaseLines **)&baseptr = *(MgSplines **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgImageShape_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(MgBaseRect **)&baseptr = *(MgImageShape **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_touchvg_jni_skiaviewJNI_MgArc_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(MgBaseShape **)&baseptr = *(MgArc **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_touchvg_jni_skiaviewJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[37] = {
    {
      "SwigDirector_GiCanvasBase_getScreenDpi", "(Ltouchvg/jni/GiCanvasBase;)F" 
    },
    {
      "SwigDirector_GiCanvasBase_getBkColor", "(Ltouchvg/jni/GiCanvasBase;)J" 
    },
    {
      "SwigDirector_GiCanvasBase_setBkColor", "(Ltouchvg/jni/GiCanvasBase;J)J" 
    },
    {
      "SwigDirector_GiCanvasBase_setNeedRedraw", "(Ltouchvg/jni/GiCanvasBase;)V" 
    },
    {
      "SwigDirector_GiCanvasBase_drawHandle", "(Ltouchvg/jni/GiCanvasBase;FFI)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_penChanged", "(Ltouchvg/jni/GiCanvasBase;IFI)V" 
    },
    {
      "SwigDirector_GiCanvasBase_brushChanged", "(Ltouchvg/jni/GiCanvasBase;I)V" 
    },
    {
      "SwigDirector_GiCanvasBase_isContextActionsVisible", "(Ltouchvg/jni/GiCanvasBase;)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_showContextActions", "(Ltouchvg/jni/GiCanvasBase;JFFFF)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_drawLine", "(Ltouchvg/jni/GiCanvasBase;FFFF)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_drawLines", "(Ltouchvg/jni/GiCanvasBase;J)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_drawBeziers", "(Ltouchvg/jni/GiCanvasBase;J)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_drawPolygon", "(Ltouchvg/jni/GiCanvasBase;JZZ)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_drawRect", "(Ltouchvg/jni/GiCanvasBase;FFFFZZ)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_drawEllipse", "(Ltouchvg/jni/GiCanvasBase;FFFFZZ)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_beginPath", "(Ltouchvg/jni/GiCanvasBase;)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_moveTo", "(Ltouchvg/jni/GiCanvasBase;FF)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_lineTo", "(Ltouchvg/jni/GiCanvasBase;FF)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_bezierTo", "(Ltouchvg/jni/GiCanvasBase;FFFFFF)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_closePath", "(Ltouchvg/jni/GiCanvasBase;)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_endPath", "(Ltouchvg/jni/GiCanvasBase;ZZ)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_clearWindow", "(Ltouchvg/jni/GiCanvasBase;)V" 
    },
    {
      "SwigDirector_GiCanvasBase_clearCachedBitmap__SWIG_0", "(Ltouchvg/jni/GiCanvasBase;Z)V" 
    },
    {
      "SwigDirector_GiCanvasBase_clearCachedBitmap__SWIG_1", "(Ltouchvg/jni/GiCanvasBase;)V" 
    },
    {
      "SwigDirector_GiCanvasBase_drawCachedBitmap__SWIG_0", "(Ltouchvg/jni/GiCanvasBase;FFZ)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_drawCachedBitmap__SWIG_1", "(Ltouchvg/jni/GiCanvasBase;FF)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_drawCachedBitmap__SWIG_2", "(Ltouchvg/jni/GiCanvasBase;F)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_drawCachedBitmap__SWIG_3", "(Ltouchvg/jni/GiCanvasBase;)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_saveCachedBitmap__SWIG_0", "(Ltouchvg/jni/GiCanvasBase;Z)V" 
    },
    {
      "SwigDirector_GiCanvasBase_saveCachedBitmap__SWIG_1", "(Ltouchvg/jni/GiCanvasBase;)V" 
    },
    {
      "SwigDirector_GiCanvasBase_hasCachedBitmap__SWIG_0", "(Ltouchvg/jni/GiCanvasBase;Z)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_hasCachedBitmap__SWIG_1", "(Ltouchvg/jni/GiCanvasBase;)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_isBufferedDrawing", "(Ltouchvg/jni/GiCanvasBase;)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_clipBoxChanged", "(Ltouchvg/jni/GiCanvasBase;FFFF)V" 
    },
    {
      "SwigDirector_GiCanvasBase_antiAliasModeChanged", "(Ltouchvg/jni/GiCanvasBase;Z)V" 
    },
    {
      "SwigDirector_GiCanvasBase_drawImage", "(Ltouchvg/jni/GiCanvasBase;Ljava/lang/String;FFFFF)Z" 
    },
    {
      "SwigDirector_GiCanvasBase_rawTextCenter", "(Ltouchvg/jni/GiCanvasBase;Ljava/lang/String;FFF)V" 
    }
  };
  Swig::jclass_skiaviewJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_skiaviewJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

