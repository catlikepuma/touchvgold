/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package touchvg.jni;

public class graph2dJNI {
  public final static native long Tol_gTol();
  public final static native long Tol_minTol();
  public final static native long new_Tol__SWIG_0();
  public final static native long new_Tol__SWIG_1(float jarg1, float jarg2);
  public final static native long new_Tol__SWIG_2(float jarg1);
  public final static native float Tol_equalPoint(long jarg1, Tol jarg1_);
  public final static native float Tol_equalVector(long jarg1, Tol jarg1_);
  public final static native void Tol_setEqualPoint(long jarg1, Tol jarg1_, float jarg2);
  public final static native void Tol_setEqualVector(long jarg1, Tol jarg1_, float jarg2);
  public final static native void delete_Tol(long jarg1);
  public final static native void Vector2d_x_set(long jarg1, Vector2d jarg1_, float jarg2);
  public final static native float Vector2d_x_get(long jarg1, Vector2d jarg1_);
  public final static native void Vector2d_y_set(long jarg1, Vector2d jarg1_, float jarg2);
  public final static native float Vector2d_y_get(long jarg1, Vector2d jarg1_);
  public final static native long Vector2d_kIdentity();
  public final static native long Vector2d_kXAxis();
  public final static native long Vector2d_kYAxis();
  public final static native long new_Vector2d__SWIG_0();
  public final static native long new_Vector2d__SWIG_1(float jarg1, float jarg2);
  public final static native long new_Vector2d__SWIG_2(long jarg1, Vector2d jarg1_);
  public final static native long Vector2d_transform(long jarg1, Vector2d jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native long Vector2d_negate(long jarg1, Vector2d jarg1_);
  public final static native long Vector2d_perpVector(long jarg1, Vector2d jarg1_);
  public final static native long Vector2d_scaleBy(long jarg1, Vector2d jarg1_, float jarg2, float jarg3);
  public final static native float Vector2d_dotProduct(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native float Vector2d_crossProduct(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native float Vector2d_angle(long jarg1, Vector2d jarg1_);
  public final static native float Vector2d_angle2(long jarg1, Vector2d jarg1_);
  public final static native float Vector2d_angleTo(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native float Vector2d_angleTo2(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native float Vector2d_length(long jarg1, Vector2d jarg1_);
  public final static native float Vector2d_lengthSqrd(long jarg1, Vector2d jarg1_);
  public final static native long Vector2d_unitVector(long jarg1, Vector2d jarg1_);
  public final static native boolean Vector2d_normalize__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Tol jarg2_);
  public final static native boolean Vector2d_normalize__SWIG_1(long jarg1, Vector2d jarg1_);
  public final static native boolean Vector2d_isUnitVector__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Tol jarg2_);
  public final static native boolean Vector2d_isUnitVector__SWIG_1(long jarg1, Vector2d jarg1_);
  public final static native boolean Vector2d_isZeroVector__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Tol jarg2_);
  public final static native boolean Vector2d_isZeroVector__SWIG_1(long jarg1, Vector2d jarg1_);
  public final static native boolean Vector2d_isEqualTo__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Vector2d_isEqualTo__SWIG_1(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Vector2d_set(long jarg1, Vector2d jarg1_, float jarg2, float jarg3);
  public final static native long Vector2d_setAngleLength(long jarg1, Vector2d jarg1_, float jarg2, float jarg3);
  public final static native long Vector2d_setLength(long jarg1, Vector2d jarg1_, float jarg2);
  public final static native boolean Vector2d_isRightOf(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native boolean Vector2d_isLeftOf(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native boolean Vector2d_isParallelTo__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Vector2d_isParallelTo__SWIG_1(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native boolean Vector2d_isCodirectionalTo__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Vector2d_isCodirectionalTo__SWIG_1(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native boolean Vector2d_isOppositeTo__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Vector2d_isOppositeTo__SWIG_1(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native boolean Vector2d_isPerpendicularTo__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Vector2d_isPerpendicularTo__SWIG_1(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native float Vector2d_distanceToVector(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native float Vector2d_projectScaleToVector(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native float Vector2d_projectResolveVector(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Vector2d jarg3_, long jarg4, Vector2d jarg4_);
  public final static native boolean Vector2d_resolveVector__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Vector2d jarg3_, long jarg4, Vector2d jarg4_);
  public final static native boolean Vector2d_resolveVector__SWIG_1(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Vector2d jarg3_);
  public final static native void delete_Vector2d(long jarg1);
  public final static native void Point2d_x_set(long jarg1, Point2d jarg1_, float jarg2);
  public final static native float Point2d_x_get(long jarg1, Point2d jarg1_);
  public final static native void Point2d_y_set(long jarg1, Point2d jarg1_, float jarg2);
  public final static native float Point2d_y_get(long jarg1, Point2d jarg1_);
  public final static native long Point2d_kOrigin();
  public final static native long new_Point2d__SWIG_0();
  public final static native long new_Point2d__SWIG_1(float jarg1, float jarg2);
  public final static native long new_Point2d__SWIG_2(long jarg1, Point2d jarg1_);
  public final static native long Point2d_transform(long jarg1, Point2d jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native long Point2d_scaleBy(long jarg1, Point2d jarg1_, float jarg2, float jarg3);
  public final static native void Point2d_offset(long jarg1, Point2d jarg1_, float jarg2, float jarg3);
  public final static native long Point2d_negate(long jarg1, Point2d jarg1_);
  public final static native long Point2d_asVector(long jarg1, Point2d jarg1_);
  public final static native float Point2d_length(long jarg1, Point2d jarg1_);
  public final static native float Point2d_distanceTo(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native float Point2d_distanceSquare(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native boolean Point2d_isEqualTo__SWIG_0(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Point2d_isEqualTo__SWIG_1(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native long Point2d_set(long jarg1, Point2d jarg1_, float jarg2, float jarg3);
  public final static native long Point2d_polarPoint(long jarg1, Point2d jarg1_, float jarg2, float jarg3);
  public final static native long Point2d_rulerPoint__SWIG_0(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, float jarg3);
  public final static native long Point2d_rulerPoint__SWIG_1(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, float jarg3, float jarg4);
  public final static native void delete_Point2d(long jarg1);
  public final static native void Matrix2d_m11_set(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native float Matrix2d_m11_get(long jarg1, Matrix2d jarg1_);
  public final static native void Matrix2d_m12_set(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native float Matrix2d_m12_get(long jarg1, Matrix2d jarg1_);
  public final static native void Matrix2d_m21_set(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native float Matrix2d_m21_get(long jarg1, Matrix2d jarg1_);
  public final static native void Matrix2d_m22_set(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native float Matrix2d_m22_get(long jarg1, Matrix2d jarg1_);
  public final static native void Matrix2d_dx_set(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native float Matrix2d_dx_get(long jarg1, Matrix2d jarg1_);
  public final static native void Matrix2d_dy_set(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native float Matrix2d_dy_get(long jarg1, Matrix2d jarg1_);
  public final static native long Matrix2d_kIdentity();
  public final static native long new_Matrix2d__SWIG_0();
  public final static native long new_Matrix2d__SWIG_1(long jarg1, Matrix2d jarg1_);
  public final static native long new_Matrix2d__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6);
  public final static native long new_Matrix2d__SWIG_3(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native long Matrix2d_preMultBy(long jarg1, Matrix2d jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native long Matrix2d_postMultBy(long jarg1, Matrix2d jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native long Matrix2d_setToProduct(long jarg1, Matrix2d jarg1_, long jarg2, Matrix2d jarg2_, long jarg3, Matrix2d jarg3_);
  public final static native void Matrix2d_TransformPoints(long jarg1, Matrix2d jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native void Matrix2d_TransformVectors(long jarg1, Matrix2d jarg1_, int jarg2, long jarg3, Vector2d jarg3_);
  public final static native float Matrix2d_det(long jarg1, Matrix2d jarg1_);
  public final static native boolean Matrix2d_invert(long jarg1, Matrix2d jarg1_);
  public final static native long Matrix2d_inverse(long jarg1, Matrix2d jarg1_);
  public final static native boolean Matrix2d_isInvertible(long jarg1, Matrix2d jarg1_);
  public final static native float Matrix2d_scale(long jarg1, Matrix2d jarg1_);
  public final static native float Matrix2d_scaleX(long jarg1, Matrix2d jarg1_);
  public final static native float Matrix2d_scaleY(long jarg1, Matrix2d jarg1_);
  public final static native float Matrix2d_angle(long jarg1, Matrix2d jarg1_);
  public final static native boolean Matrix2d_isEqualTo__SWIG_0(long jarg1, Matrix2d jarg1_, long jarg2, Matrix2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Matrix2d_isEqualTo__SWIG_1(long jarg1, Matrix2d jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native boolean Matrix2d_isIdentity(long jarg1, Matrix2d jarg1_);
  public final static native boolean Matrix2d_isOrtho(long jarg1, Matrix2d jarg1_);
  public final static native boolean Matrix2d_hasMirror(long jarg1, Matrix2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Matrix2d_setCoordSystem(long jarg1, Matrix2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Vector2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native void Matrix2d_getCoordSystem(long jarg1, Matrix2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Vector2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native long Matrix2d_coordSystem__SWIG_0(long jarg1, Vector2d jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native long Matrix2d_coordSystem__SWIG_1(long jarg1, Point2d jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native long Matrix2d_coordSystem__SWIG_2(long jarg1, Point2d jarg1_, float jarg2, float jarg3);
  public final static native long Matrix2d_coordSystem__SWIG_3(long jarg1, Point2d jarg1_, float jarg2);
  public final static native long Matrix2d_setToIdentity(long jarg1, Matrix2d jarg1_);
  public final static native long Matrix2d_set(long jarg1, Matrix2d jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native long Matrix2d_setToTranslation(long jarg1, Matrix2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Matrix2d_setToRotation__SWIG_0(long jarg1, Matrix2d jarg1_, float jarg2, long jarg3, Point2d jarg3_);
  public final static native long Matrix2d_setToRotation__SWIG_1(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native long Matrix2d_setToScaling__SWIG_0(long jarg1, Matrix2d jarg1_, float jarg2, long jarg3, Point2d jarg3_);
  public final static native long Matrix2d_setToScaling__SWIG_1(long jarg1, Matrix2d jarg1_, float jarg2);
  public final static native long Matrix2d_setToScaling__SWIG_2(long jarg1, Matrix2d jarg1_, float jarg2, float jarg3, long jarg4, Point2d jarg4_);
  public final static native long Matrix2d_setToScaling__SWIG_3(long jarg1, Matrix2d jarg1_, float jarg2, float jarg3);
  public final static native long Matrix2d_setToMirroring__SWIG_0(long jarg1, Matrix2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native long Matrix2d_setToMirroring__SWIG_1(long jarg1, Matrix2d jarg1_);
  public final static native long Matrix2d_setToMirroring__SWIG_2(long jarg1, Matrix2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Vector2d jarg3_);
  public final static native long Matrix2d_setToShearing__SWIG_0(long jarg1, Matrix2d jarg1_, float jarg2, float jarg3, long jarg4, Point2d jarg4_);
  public final static native long Matrix2d_setToShearing__SWIG_1(long jarg1, Matrix2d jarg1_, float jarg2, float jarg3);
  public final static native long Matrix2d_translation(long jarg1, Vector2d jarg1_);
  public final static native long Matrix2d_rotation__SWIG_0(float jarg1, long jarg2, Point2d jarg2_);
  public final static native long Matrix2d_rotation__SWIG_1(float jarg1);
  public final static native long Matrix2d_scaling__SWIG_0(float jarg1, long jarg2, Point2d jarg2_);
  public final static native long Matrix2d_scaling__SWIG_1(float jarg1);
  public final static native long Matrix2d_scaling__SWIG_2(float jarg1, float jarg2, long jarg3, Point2d jarg3_);
  public final static native long Matrix2d_scaling__SWIG_3(float jarg1, float jarg2);
  public final static native long Matrix2d_mirroring__SWIG_0(long jarg1, Point2d jarg1_);
  public final static native long Matrix2d_mirroring__SWIG_1();
  public final static native long Matrix2d_mirroring__SWIG_2(long jarg1, Point2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Matrix2d_shearing__SWIG_0(float jarg1, float jarg2, long jarg3, Point2d jarg3_);
  public final static native long Matrix2d_shearing__SWIG_1(float jarg1, float jarg2);
  public final static native void delete_Matrix2d(long jarg1);
  public final static native void RECT_2D_left_set(long jarg1, RECT_2D jarg1_, float jarg2);
  public final static native float RECT_2D_left_get(long jarg1, RECT_2D jarg1_);
  public final static native void RECT_2D_top_set(long jarg1, RECT_2D jarg1_, float jarg2);
  public final static native float RECT_2D_top_get(long jarg1, RECT_2D jarg1_);
  public final static native void RECT_2D_right_set(long jarg1, RECT_2D jarg1_, float jarg2);
  public final static native float RECT_2D_right_get(long jarg1, RECT_2D jarg1_);
  public final static native void RECT_2D_bottom_set(long jarg1, RECT_2D jarg1_, float jarg2);
  public final static native float RECT_2D_bottom_get(long jarg1, RECT_2D jarg1_);
  public final static native long new_RECT_2D();
  public final static native void delete_RECT_2D(long jarg1);
  public final static native void Box2d_xmin_set(long jarg1, Box2d jarg1_, float jarg2);
  public final static native float Box2d_xmin_get(long jarg1, Box2d jarg1_);
  public final static native void Box2d_ymin_set(long jarg1, Box2d jarg1_, float jarg2);
  public final static native float Box2d_ymin_get(long jarg1, Box2d jarg1_);
  public final static native void Box2d_xmax_set(long jarg1, Box2d jarg1_, float jarg2);
  public final static native float Box2d_xmax_get(long jarg1, Box2d jarg1_);
  public final static native void Box2d_ymax_set(long jarg1, Box2d jarg1_, float jarg2);
  public final static native float Box2d_ymax_get(long jarg1, Box2d jarg1_);
  public final static native long Box2d_kIdentity();
  public final static native long new_Box2d__SWIG_0();
  public final static native long new_Box2d__SWIG_1(long jarg1, Box2d jarg1_, boolean jarg2);
  public final static native long new_Box2d__SWIG_2(long jarg1, Box2d jarg1_);
  public final static native long new_Box2d__SWIG_3(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native long new_Box2d__SWIG_4(float jarg1, float jarg2, float jarg3, float jarg4, boolean jarg5);
  public final static native long new_Box2d__SWIG_5(float jarg1, float jarg2, float jarg3, float jarg4);
  public final static native long new_Box2d__SWIG_6(long jarg1, RECT_2D jarg1_, boolean jarg2);
  public final static native long new_Box2d__SWIG_7(long jarg1, RECT_2D jarg1_);
  public final static native long new_Box2d__SWIG_8(int jarg1, int jarg2, int jarg3, int jarg4, boolean jarg5);
  public final static native long new_Box2d__SWIG_9(int jarg1, int jarg2, int jarg3, int jarg4);
  public final static native long new_Box2d__SWIG_10(long jarg1, Point2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native long new_Box2d__SWIG_11(int jarg1, long jarg2, Point2d jarg2_);
  public final static native long new_Box2d__SWIG_12(long jarg1, Point2d jarg1_, float jarg2, float jarg3);
  public final static native long new_Box2d__SWIG_13(float jarg1, float jarg2);
  public final static native void Box2d_get__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native long Box2d_get__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, RECT_2D jarg2_);
  public final static native long Box2d_set__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_, boolean jarg3);
  public final static native long Box2d_set__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native long Box2d_set__SWIG_2(long jarg1, Box2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native long Box2d_set__SWIG_3(long jarg1, Box2d jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native long Box2d_set__SWIG_4(long jarg1, Box2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_, long jarg5, Point2d jarg5_);
  public final static native long Box2d_set__SWIG_5(long jarg1, Box2d jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native long Box2d_set__SWIG_6(long jarg1, Box2d jarg1_, long jarg2, Point2d jarg2_, float jarg3, float jarg4);
  public final static native float Box2d_width(long jarg1, Box2d jarg1_);
  public final static native float Box2d_height(long jarg1, Box2d jarg1_);
  public final static native long Box2d_size(long jarg1, Box2d jarg1_);
  public final static native long Box2d_center(long jarg1, Box2d jarg1_);
  public final static native long Box2d_leftTop(long jarg1, Box2d jarg1_);
  public final static native long Box2d_rightTop(long jarg1, Box2d jarg1_);
  public final static native long Box2d_leftBottom(long jarg1, Box2d jarg1_);
  public final static native long Box2d_rightBottom(long jarg1, Box2d jarg1_);
  public final static native long Box2d_normalize(long jarg1, Box2d jarg1_);
  public final static native long Box2d_swapTopBottom(long jarg1, Box2d jarg1_);
  public final static native long Box2d_empty(long jarg1, Box2d jarg1_);
  public final static native boolean Box2d_isNormalized(long jarg1, Box2d jarg1_);
  public final static native boolean Box2d_isNull(long jarg1, Box2d jarg1_);
  public final static native boolean Box2d_isEmpty__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Tol jarg2_);
  public final static native boolean Box2d_isEmpty__SWIG_1(long jarg1, Box2d jarg1_);
  public final static native boolean Box2d_isEmptyMinus__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Tol jarg2_);
  public final static native boolean Box2d_isEmptyMinus__SWIG_1(long jarg1, Box2d jarg1_);
  public final static native boolean Box2d_contains__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native boolean Box2d_contains__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, Point2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Box2d_contains__SWIG_2(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean Box2d_contains__SWIG_3(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_, long jarg3, Tol jarg3_);
  public final static native long Box2d_inflate__SWIG_0(long jarg1, Box2d jarg1_, float jarg2);
  public final static native long Box2d_inflate__SWIG_1(long jarg1, Box2d jarg1_, float jarg2, float jarg3);
  public final static native long Box2d_inflate__SWIG_2(long jarg1, Box2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Box2d_inflate__SWIG_3(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native long Box2d_inflate__SWIG_4(long jarg1, Box2d jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native long Box2d_deflate__SWIG_0(long jarg1, Box2d jarg1_, float jarg2);
  public final static native long Box2d_deflate__SWIG_1(long jarg1, Box2d jarg1_, float jarg2, float jarg3);
  public final static native long Box2d_deflate__SWIG_2(long jarg1, Box2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Box2d_deflate__SWIG_3(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native long Box2d_deflate__SWIG_4(long jarg1, Box2d jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native long Box2d_offset__SWIG_0(long jarg1, Box2d jarg1_, float jarg2, float jarg3);
  public final static native long Box2d_offset__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, Vector2d jarg2_);
  public final static native long Box2d_scaleBy__SWIG_0(long jarg1, Box2d jarg1_, float jarg2, float jarg3);
  public final static native long Box2d_scaleBy__SWIG_1(long jarg1, Box2d jarg1_, float jarg2);
  public final static native boolean Box2d_isIntersect(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native long Box2d_intersectWith__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_, long jarg3, Box2d jarg3_);
  public final static native long Box2d_intersectWith__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native long Box2d_unionWith__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_, long jarg3, Box2d jarg3_);
  public final static native long Box2d_unionWith__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native long Box2d_unionWith__SWIG_2(long jarg1, Box2d jarg1_, float jarg2, float jarg3);
  public final static native long Box2d_unionWith__SWIG_3(long jarg1, Box2d jarg1_, long jarg2, Point2d jarg2_);
  public final static native long Box2d_offset__SWIG_2(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean Box2d_isEqualTo__SWIG_0(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_, long jarg3, Tol jarg3_);
  public final static native boolean Box2d_isEqualTo__SWIG_1(long jarg1, Box2d jarg1_, long jarg2, Box2d jarg2_);
  public final static native void delete_Box2d(long jarg1);
  public final static native int kGiCloseFigure_get();
  public final static native int kGiLineTo_get();
  public final static native int kGiBeziersTo_get();
  public final static native int kGiMoveTo_get();
  public final static native void GiColor_r_set(long jarg1, GiColor jarg1_, short jarg2);
  public final static native short GiColor_r_get(long jarg1, GiColor jarg1_);
  public final static native void GiColor_g_set(long jarg1, GiColor jarg1_, short jarg2);
  public final static native short GiColor_g_get(long jarg1, GiColor jarg1_);
  public final static native void GiColor_b_set(long jarg1, GiColor jarg1_, short jarg2);
  public final static native short GiColor_b_get(long jarg1, GiColor jarg1_);
  public final static native void GiColor_a_set(long jarg1, GiColor jarg1_, short jarg2);
  public final static native short GiColor_a_get(long jarg1, GiColor jarg1_);
  public final static native long new_GiColor__SWIG_0();
  public final static native long new_GiColor__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4);
  public final static native long new_GiColor__SWIG_2(int jarg1, int jarg2, int jarg3);
  public final static native long new_GiColor__SWIG_3(long jarg1, GiColor jarg1_);
  public final static native long new_GiColor__SWIG_4(int jarg1, boolean jarg2);
  public final static native long new_GiColor__SWIG_5(int jarg1);
  public final static native long GiColor_White();
  public final static native long GiColor_Black();
  public final static native long GiColor_Invalid();
  public final static native int GiColor_getARGB(long jarg1, GiColor jarg1_);
  public final static native void GiColor_setARGB(long jarg1, GiColor jarg1_, int jarg2);
  public final static native void GiColor_set__SWIG_0(long jarg1, GiColor jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void GiColor_set__SWIG_1(long jarg1, GiColor jarg1_, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native boolean GiColor_isInvalid(long jarg1, GiColor jarg1_);
  public final static native boolean GiColor_equals(long jarg1, GiColor jarg1_, long jarg2, GiColor jarg2_);
  public final static native void delete_GiColor(long jarg1);
  public final static native int kGiLineSolid_get();
  public final static native int kContextLineRGB_get();
  public final static native int kContextLineAlpha_get();
  public final static native int kContextLineColor_get();
  public final static native int kContextLineWidth_get();
  public final static native int kContextLineStyle_get();
  public final static native int kContextFillRGB_get();
  public final static native int kContextFillAlpha_get();
  public final static native int kContextFillColor_get();
  public final static native int kContextCopyAll_get();
  public final static native long new_GiContext__SWIG_0();
  public final static native long new_GiContext__SWIG_1(float jarg1, long jarg2, GiColor jarg2_, int jarg3, long jarg4, GiColor jarg4_, boolean jarg5);
  public final static native long new_GiContext__SWIG_2(float jarg1, long jarg2, GiColor jarg2_, int jarg3, long jarg4, GiColor jarg4_);
  public final static native long new_GiContext__SWIG_3(float jarg1, long jarg2, GiColor jarg2_, int jarg3);
  public final static native long new_GiContext__SWIG_4(float jarg1, long jarg2, GiColor jarg2_);
  public final static native long new_GiContext__SWIG_5(float jarg1);
  public final static native long new_GiContext__SWIG_6(long jarg1, GiContext jarg1_);
  public final static native long GiContext_copy__SWIG_0(long jarg1, GiContext jarg1_, long jarg2, GiContext jarg2_, int jarg3);
  public final static native long GiContext_copy__SWIG_1(long jarg1, GiContext jarg1_, long jarg2, GiContext jarg2_);
  public final static native boolean GiContext_equals(long jarg1, GiContext jarg1_, long jarg2, GiContext jarg2_);
  public final static native int GiContext_getLineStyle(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setLineStyle(long jarg1, GiContext jarg1_, int jarg2);
  public final static native float GiContext_getLineWidth(long jarg1, GiContext jarg1_);
  public final static native boolean GiContext_isAutoScale(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setLineWidth(long jarg1, GiContext jarg1_, float jarg2, boolean jarg3);
  public final static native boolean GiContext_isNullLine(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setNullLine(long jarg1, GiContext jarg1_);
  public final static native long GiContext_getLineColor(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setLineColor__SWIG_0(long jarg1, GiContext jarg1_, long jarg2, GiColor jarg2_);
  public final static native void GiContext_setLineColor__SWIG_1(long jarg1, GiContext jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native int GiContext_getLineARGB(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setLineARGB(long jarg1, GiContext jarg1_, int jarg2);
  public final static native int GiContext_getLineAlpha(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setLineAlpha(long jarg1, GiContext jarg1_, int jarg2);
  public final static native boolean GiContext_hasFillColor(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setNoFillColor(long jarg1, GiContext jarg1_);
  public final static native long GiContext_getFillColor(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setFillColor__SWIG_0(long jarg1, GiContext jarg1_, long jarg2, GiColor jarg2_);
  public final static native void GiContext_setFillColor__SWIG_1(long jarg1, GiContext jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native int GiContext_getFillARGB(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setFillARGB(long jarg1, GiContext jarg1_, int jarg2);
  public final static native int GiContext_getFillAlpha(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setFillAlpha(long jarg1, GiContext jarg1_, int jarg2);
  public final static native boolean GiContext_isAutoFillColor(long jarg1, GiContext jarg1_);
  public final static native void GiContext_setAutoFillColor(long jarg1, GiContext jarg1_, boolean jarg2);
  public final static native int GiContext_getType(long jarg1, GiContext jarg1_);
  public final static native void delete_GiContext(long jarg1);
  public final static native long new_GiTransform__SWIG_0(boolean jarg1);
  public final static native long new_GiTransform__SWIG_1();
  public final static native long new_GiTransform__SWIG_2(long jarg1, GiTransform jarg1_);
  public final static native void delete_GiTransform(long jarg1);
  public final static native long GiTransform_copy(long jarg1, GiTransform jarg1_, long jarg2, GiTransform jarg2_);
  public final static native float GiTransform_getDpiX(long jarg1, GiTransform jarg1_);
  public final static native float GiTransform_getDpiY(long jarg1, GiTransform jarg1_);
  public final static native int GiTransform_getWidth(long jarg1, GiTransform jarg1_);
  public final static native int GiTransform_getHeight(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_getCenterW(long jarg1, GiTransform jarg1_);
  public final static native float GiTransform_getViewScale(long jarg1, GiTransform jarg1_);
  public final static native float GiTransform_getWorldToDisplayX__SWIG_0(long jarg1, GiTransform jarg1_, boolean jarg2);
  public final static native float GiTransform_getWorldToDisplayX__SWIG_1(long jarg1, GiTransform jarg1_);
  public final static native float GiTransform_getWorldToDisplayY__SWIG_0(long jarg1, GiTransform jarg1_, boolean jarg2);
  public final static native float GiTransform_getWorldToDisplayY__SWIG_1(long jarg1, GiTransform jarg1_);
  public final static native float GiTransform_displayToModel__SWIG_0(long jarg1, GiTransform jarg1_, float jarg2, boolean jarg3);
  public final static native float GiTransform_displayToModel__SWIG_1(long jarg1, GiTransform jarg1_, float jarg2);
  public final static native long GiTransform_modelToWorld(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_worldToModel(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_displayToWorld(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_worldToDisplay(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_displayToModel__SWIG_2(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_modelToDisplay(long jarg1, GiTransform jarg1_);
  public final static native boolean GiTransform_setWndSize(long jarg1, GiTransform jarg1_, int jarg2, int jarg3);
  public final static native void GiTransform_setResolution__SWIG_0(long jarg1, GiTransform jarg1_, float jarg2, float jarg3);
  public final static native void GiTransform_setResolution__SWIG_1(long jarg1, GiTransform jarg1_, float jarg2);
  public final static native void GiTransform_setModelTransform(long jarg1, GiTransform jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native long GiTransform_getWndRectW(long jarg1, GiTransform jarg1_);
  public final static native float GiTransform_getMinViewScale(long jarg1, GiTransform jarg1_);
  public final static native float GiTransform_getMaxViewScale(long jarg1, GiTransform jarg1_);
  public final static native long GiTransform_getWorldLimits(long jarg1, GiTransform jarg1_);
  public final static native void GiTransform_setViewScaleRange(long jarg1, GiTransform jarg1_, float jarg2, float jarg3);
  public final static native long GiTransform_setWorldLimits(long jarg1, GiTransform jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean GiTransform_zoomWnd__SWIG_0(long jarg1, GiTransform jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native boolean GiTransform_zoomWnd__SWIG_1(long jarg1, GiTransform jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native boolean GiTransform_zoomTo__SWIG_0(long jarg1, GiTransform jarg1_, long jarg2, Box2d jarg2_, long jarg3, RECT_2D jarg3_, boolean jarg4);
  public final static native boolean GiTransform_zoomTo__SWIG_1(long jarg1, GiTransform jarg1_, long jarg2, Box2d jarg2_, long jarg3, RECT_2D jarg3_);
  public final static native boolean GiTransform_zoomTo__SWIG_2(long jarg1, GiTransform jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean GiTransform_zoomTo__SWIG_3(long jarg1, GiTransform jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native boolean GiTransform_zoomTo__SWIG_4(long jarg1, GiTransform jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native boolean GiTransform_zoomTo__SWIG_5(long jarg1, GiTransform jarg1_, long jarg2, Point2d jarg2_);
  public final static native boolean GiTransform_zoomPan__SWIG_0(long jarg1, GiTransform jarg1_, float jarg2, float jarg3, boolean jarg4);
  public final static native boolean GiTransform_zoomPan__SWIG_1(long jarg1, GiTransform jarg1_, float jarg2, float jarg3);
  public final static native boolean GiTransform_zoomByFactor__SWIG_0(long jarg1, GiTransform jarg1_, float jarg2, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native boolean GiTransform_zoomByFactor__SWIG_1(long jarg1, GiTransform jarg1_, float jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean GiTransform_zoomByFactor__SWIG_2(long jarg1, GiTransform jarg1_, float jarg2);
  public final static native boolean GiTransform_zoomScale__SWIG_0(long jarg1, GiTransform jarg1_, float jarg2, long jarg3, Point2d jarg3_, boolean jarg4);
  public final static native boolean GiTransform_zoomScale__SWIG_1(long jarg1, GiTransform jarg1_, float jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean GiTransform_zoomScale__SWIG_2(long jarg1, GiTransform jarg1_, float jarg2);
  public final static native boolean GiTransform_zoom(long jarg1, GiTransform jarg1_, long jarg2, Point2d jarg2_, float jarg3);
  public final static native boolean GiTransform_enableZoom(long jarg1, GiTransform jarg1_, boolean jarg2);
  public final static native float GiTransform_getZoomValue(long jarg1, GiTransform jarg1_, long jarg2, Point2d jarg2_);
  public final static native int GiTransform_getZoomTimes(long jarg1, GiTransform jarg1_);
  public final static native long new_GiSaveModelTransform(long jarg1, GiTransform jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void delete_GiSaveModelTransform(long jarg1);
  public final static native void GiCanvasDrawing_clearCachedBitmap__SWIG_0(long jarg1, GiCanvasDrawing jarg1_, boolean jarg2);
  public final static native void GiCanvasDrawing_clearCachedBitmap__SWIG_1(long jarg1, GiCanvasDrawing jarg1_);
  public final static native float GiCanvasDrawing_getScreenDpi(long jarg1, GiCanvasDrawing jarg1_);
  public final static native long GiCanvasDrawing_getBkColor(long jarg1, GiCanvasDrawing jarg1_);
  public final static native long GiCanvasDrawing_setBkColor(long jarg1, GiCanvasDrawing jarg1_, long jarg2, GiColor jarg2_);
  public final static native boolean GiCanvasDrawing_rawLine(long jarg1, GiCanvasDrawing jarg1_, long jarg2, GiContext jarg2_, float jarg3, float jarg4, float jarg5, float jarg6);
  public final static native boolean GiCanvasDrawing_rawLines(long jarg1, GiCanvasDrawing jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, int jarg4);
  public final static native boolean GiCanvasDrawing_rawBeziers(long jarg1, GiCanvasDrawing jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, int jarg4);
  public final static native boolean GiCanvasDrawing_rawPolygon(long jarg1, GiCanvasDrawing jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, int jarg4);
  public final static native boolean GiCanvasDrawing_rawRect(long jarg1, GiCanvasDrawing jarg1_, long jarg2, GiContext jarg2_, float jarg3, float jarg4, float jarg5, float jarg6);
  public final static native boolean GiCanvasDrawing_rawEllipse(long jarg1, GiCanvasDrawing jarg1_, long jarg2, GiContext jarg2_, float jarg3, float jarg4, float jarg5, float jarg6);
  public final static native boolean GiCanvasDrawing_rawBeginPath(long jarg1, GiCanvasDrawing jarg1_);
  public final static native boolean GiCanvasDrawing_rawEndPath(long jarg1, GiCanvasDrawing jarg1_, long jarg2, GiContext jarg2_, boolean jarg3);
  public final static native boolean GiCanvasDrawing_rawMoveTo(long jarg1, GiCanvasDrawing jarg1_, float jarg2, float jarg3);
  public final static native boolean GiCanvasDrawing_rawLineTo(long jarg1, GiCanvasDrawing jarg1_, float jarg2, float jarg3);
  public final static native boolean GiCanvasDrawing_rawBezierTo(long jarg1, GiCanvasDrawing jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native boolean GiCanvasDrawing_rawClosePath(long jarg1, GiCanvasDrawing jarg1_);
  public final static native void GiCanvasDrawing_rawTextCenter(long jarg1, GiCanvasDrawing jarg1_, String jarg2, float jarg3, float jarg4, float jarg5);
  public final static native boolean GiCanvasDrawing_drawImage(long jarg1, GiCanvasDrawing jarg1_, String jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native void delete_GiCanvasDrawing(long jarg1);
  public final static native long new_GiGraphics(long jarg1, GiTransform jarg1_);
  public final static native void delete_GiGraphics(long jarg1);
  public final static native void GiGraphics_copy(long jarg1, GiGraphics jarg1_, long jarg2, GiGraphics jarg2_);
  public final static native long GiGraphics_xf(long jarg1, GiGraphics jarg1_);
  public final static native boolean GiGraphics_isDrawing(long jarg1, GiGraphics jarg1_);
  public final static native boolean GiGraphics_isPrint(long jarg1, GiGraphics jarg1_);
  public final static native long GiGraphics_getClipModel(long jarg1, GiGraphics jarg1_);
  public final static native long GiGraphics_getClipWorld(long jarg1, GiGraphics jarg1_);
  public final static native long GiGraphics_getClipBox(long jarg1, GiGraphics jarg1_, long jarg2, RECT_2D jarg2_);
  public final static native boolean GiGraphics_setClipBox(long jarg1, GiGraphics jarg1_, long jarg2, RECT_2D jarg2_);
  public final static native boolean GiGraphics_setClipWorld(long jarg1, GiGraphics jarg1_, long jarg2, Box2d jarg2_);
  public final static native int GiGraphics_getColorMode(long jarg1, GiGraphics jarg1_);
  public final static native void GiGraphics_setColorMode(long jarg1, GiGraphics jarg1_, int jarg2);
  public final static native long GiGraphics_calcPenColor(long jarg1, GiGraphics jarg1_, long jarg2, GiColor jarg2_);
  public final static native float GiGraphics_calcPenWidth(long jarg1, GiGraphics jarg1_, float jarg2, boolean jarg3);
  public final static native void GiGraphics_setMaxPenWidth__SWIG_0(long jarg1, GiGraphics jarg1_, float jarg2, float jarg3);
  public final static native void GiGraphics_setMaxPenWidth__SWIG_1(long jarg1, GiGraphics jarg1_, float jarg2);
  public final static native boolean GiGraphics_isAntiAliasMode(long jarg1, GiGraphics jarg1_);
  public final static native boolean GiGraphics_setAntiAliasMode(long jarg1, GiGraphics jarg1_, boolean jarg2);
  public final static native boolean GiGraphics_drawLine__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_, boolean jarg5);
  public final static native boolean GiGraphics_drawLine__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native boolean GiGraphics_drawLines__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, boolean jarg5);
  public final static native boolean GiGraphics_drawLines__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_);
  public final static native boolean GiGraphics_drawBeziers__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, boolean jarg5, boolean jarg6);
  public final static native boolean GiGraphics_drawBeziers__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, boolean jarg5);
  public final static native boolean GiGraphics_drawBeziers__SWIG_2(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_);
  public final static native boolean GiGraphics_drawArc__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, float jarg4, float jarg5, float jarg6, float jarg7, boolean jarg8);
  public final static native boolean GiGraphics_drawArc__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native boolean GiGraphics_drawArc3P__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_, long jarg5, Point2d jarg5_, boolean jarg6);
  public final static native boolean GiGraphics_drawArc3P__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_, long jarg5, Point2d jarg5_);
  public final static native boolean GiGraphics_drawPolygon__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, boolean jarg5);
  public final static native boolean GiGraphics_drawPolygon__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_);
  public final static native boolean GiGraphics_drawEllipse__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, float jarg4, float jarg5, boolean jarg6);
  public final static native boolean GiGraphics_drawEllipse__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, float jarg4, float jarg5);
  public final static native boolean GiGraphics_drawEllipse__SWIG_2(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, float jarg4);
  public final static native boolean GiGraphics_drawEllipse__SWIG_3(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Box2d jarg3_, boolean jarg4);
  public final static native boolean GiGraphics_drawEllipse__SWIG_4(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Box2d jarg3_);
  public final static native boolean GiGraphics_drawPie__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, float jarg4, float jarg5, float jarg6, float jarg7, boolean jarg8);
  public final static native boolean GiGraphics_drawPie__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native boolean GiGraphics_drawRect__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Box2d jarg3_, boolean jarg4);
  public final static native boolean GiGraphics_drawRect__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Box2d jarg3_);
  public final static native boolean GiGraphics_drawRoundRect__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Box2d jarg3_, float jarg4, float jarg5, boolean jarg6);
  public final static native boolean GiGraphics_drawRoundRect__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Box2d jarg3_, float jarg4, float jarg5);
  public final static native boolean GiGraphics_drawRoundRect__SWIG_2(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Box2d jarg3_, float jarg4);
  public final static native boolean GiGraphics_drawSplines__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, long jarg5, Vector2d jarg5_, boolean jarg6);
  public final static native boolean GiGraphics_drawSplines__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, long jarg5, Vector2d jarg5_);
  public final static native boolean GiGraphics_drawClosedSplines__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, long jarg5, Vector2d jarg5_, boolean jarg6);
  public final static native boolean GiGraphics_drawClosedSplines__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, long jarg5, Vector2d jarg5_);
  public final static native boolean GiGraphics_drawBSplines__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, boolean jarg5);
  public final static native boolean GiGraphics_drawBSplines__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_);
  public final static native boolean GiGraphics_drawClosedBSplines__SWIG_0(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_, boolean jarg5);
  public final static native boolean GiGraphics_drawClosedBSplines__SWIG_1(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, int jarg3, long jarg4, Point2d jarg4_);
  public final static native void GiGraphics_clearCachedBitmap__SWIG_0(long jarg1, GiGraphics jarg1_, boolean jarg2);
  public final static native void GiGraphics_clearCachedBitmap__SWIG_1(long jarg1, GiGraphics jarg1_);
  public final static native float GiGraphics_getScreenDpi(long jarg1, GiGraphics jarg1_);
  public final static native long GiGraphics_getBkColor(long jarg1, GiGraphics jarg1_);
  public final static native long GiGraphics_setBkColor(long jarg1, GiGraphics jarg1_, long jarg2, GiColor jarg2_);
  public final static native boolean GiGraphics_rawLine(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, float jarg3, float jarg4, float jarg5, float jarg6);
  public final static native boolean GiGraphics_rawLines(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, int jarg4);
  public final static native boolean GiGraphics_rawBeziers(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, int jarg4);
  public final static native boolean GiGraphics_rawPolygon(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, long jarg3, Point2d jarg3_, int jarg4);
  public final static native boolean GiGraphics_rawRect(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, float jarg3, float jarg4, float jarg5, float jarg6);
  public final static native boolean GiGraphics_rawEllipse(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, float jarg3, float jarg4, float jarg5, float jarg6);
  public final static native boolean GiGraphics_rawBeginPath(long jarg1, GiGraphics jarg1_);
  public final static native boolean GiGraphics_rawEndPath(long jarg1, GiGraphics jarg1_, long jarg2, GiContext jarg2_, boolean jarg3);
  public final static native boolean GiGraphics_rawMoveTo(long jarg1, GiGraphics jarg1_, float jarg2, float jarg3);
  public final static native boolean GiGraphics_rawLineTo(long jarg1, GiGraphics jarg1_, float jarg2, float jarg3);
  public final static native boolean GiGraphics_rawBezierTo(long jarg1, GiGraphics jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native boolean GiGraphics_rawClosePath(long jarg1, GiGraphics jarg1_);
  public final static native void GiGraphics_rawTextCenter(long jarg1, GiGraphics jarg1_, String jarg2, float jarg3, float jarg4, float jarg5);
  public final static native boolean GiGraphics_drawImage(long jarg1, GiGraphics jarg1_, String jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native long new_GiSaveClipBox(long jarg1, GiGraphics jarg1_, long jarg2, Box2d jarg2_);
  public final static native void delete_GiSaveClipBox(long jarg1);
  public final static native boolean GiSaveClipBox_succeed(long jarg1, GiSaveClipBox jarg1_);
  public final static native void delete_Floats(long jarg1);
  public final static native long new_Floats(int jarg1);
  public final static native int Floats_count(long jarg1, Floats jarg1_);
  public final static native float Floats_get(long jarg1, Floats jarg1_, int jarg2);
  public final static native void Floats_set(long jarg1, Floats jarg1_, int jarg2, float jarg3);
  public final static native void delete_Chars(long jarg1);
  public final static native long new_Chars(int jarg1);
  public final static native int Chars_count(long jarg1, Chars jarg1_);
  public final static native char Chars_get(long jarg1, Chars jarg1_, int jarg2);
  public final static native void Chars_set(long jarg1, Chars jarg1_, int jarg2, char jarg3);
  public final static native void delete_Ints(long jarg1);
  public final static native long new_Ints(int jarg1);
  public final static native int Ints_count(long jarg1, Ints jarg1_);
  public final static native int Ints_get(long jarg1, Ints jarg1_, int jarg2);
  public final static native void Ints_set(long jarg1, Ints jarg1_, int jarg2, int jarg3);
  public final static native long new_GiCanvasBase();
  public final static native void delete_GiCanvasBase(long jarg1);
  public final static native long GiCanvasBase_xf(long jarg1, GiCanvasBase jarg1_);
  public final static native long GiCanvasBase_gs(long jarg1, GiCanvasBase jarg1_);
  public final static native void GiCanvasBase_setScreenDpi(float jarg1);
  public final static native float GiCanvasBase_getScreenDpi(long jarg1, GiCanvasBase jarg1_);
  public final static native float GiCanvasBase_getScreenDpiSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_);
  public final static native long GiCanvasBase_getBkColor(long jarg1, GiCanvasBase jarg1_);
  public final static native long GiCanvasBase_getBkColorSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_);
  public final static native long GiCanvasBase_setBkColor(long jarg1, GiCanvasBase jarg1_, long jarg2, GiColor jarg2_);
  public final static native long GiCanvasBase_setBkColorSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_, long jarg2, GiColor jarg2_);
  public final static native boolean GiCanvasBase_beginPaint(long jarg1, GiCanvasBase jarg1_);
  public final static native void GiCanvasBase_endPaint(long jarg1, GiCanvasBase jarg1_);
  public final static native void GiCanvasBase_setNeedRedraw(long jarg1, GiCanvasBase jarg1_);
  public final static native void GiCanvasBase_setNeedRedrawSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_);
  public final static native boolean GiCanvasBase_drawHandle(long jarg1, GiCanvasBase jarg1_, float jarg2, float jarg3, int jarg4);
  public final static native boolean GiCanvasBase_drawHandleSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_, float jarg2, float jarg3, int jarg4);
  public final static native void GiCanvasBase_penChanged(long jarg1, GiCanvasBase jarg1_, int jarg2, float jarg3, int jarg4);
  public final static native void GiCanvasBase_penChangedSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_, int jarg2, float jarg3, int jarg4);
  public final static native void GiCanvasBase_brushChanged(long jarg1, GiCanvasBase jarg1_, int jarg2);
  public final static native void GiCanvasBase_brushChangedSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_, int jarg2);
  public final static native boolean GiCanvasBase_isContextActionsVisible(long jarg1, GiCanvasBase jarg1_);
  public final static native boolean GiCanvasBase_isContextActionsVisibleSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_);
  public final static native boolean GiCanvasBase_showContextActions(long jarg1, GiCanvasBase jarg1_, long jarg2, Ints jarg2_, float jarg3, float jarg4, float jarg5, float jarg6);
  public final static native boolean GiCanvasBase_showContextActionsSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_, long jarg2, Ints jarg2_, float jarg3, float jarg4, float jarg5, float jarg6);
  public final static native boolean GiCanvasBase_drawLine(long jarg1, GiCanvasBase jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native boolean GiCanvasBase_drawLineSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native boolean GiCanvasBase_drawLines(long jarg1, GiCanvasBase jarg1_, long jarg2, Floats jarg2_);
  public final static native boolean GiCanvasBase_drawLinesSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_, long jarg2, Floats jarg2_);
  public final static native boolean GiCanvasBase_drawBeziers(long jarg1, GiCanvasBase jarg1_, long jarg2, Floats jarg2_);
  public final static native boolean GiCanvasBase_drawBeziersSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_, long jarg2, Floats jarg2_);
  public final static native boolean GiCanvasBase_drawPolygon(long jarg1, GiCanvasBase jarg1_, long jarg2, Floats jarg2_, boolean jarg3, boolean jarg4);
  public final static native boolean GiCanvasBase_drawPolygonSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_, long jarg2, Floats jarg2_, boolean jarg3, boolean jarg4);
  public final static native boolean GiCanvasBase_drawRect(long jarg1, GiCanvasBase jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, boolean jarg6, boolean jarg7);
  public final static native boolean GiCanvasBase_drawRectSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, boolean jarg6, boolean jarg7);
  public final static native boolean GiCanvasBase_drawEllipse(long jarg1, GiCanvasBase jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, boolean jarg6, boolean jarg7);
  public final static native boolean GiCanvasBase_drawEllipseSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, boolean jarg6, boolean jarg7);
  public final static native boolean GiCanvasBase_beginPath(long jarg1, GiCanvasBase jarg1_);
  public final static native boolean GiCanvasBase_beginPathSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_);
  public final static native boolean GiCanvasBase_moveTo(long jarg1, GiCanvasBase jarg1_, float jarg2, float jarg3);
  public final static native boolean GiCanvasBase_moveToSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_, float jarg2, float jarg3);
  public final static native boolean GiCanvasBase_lineTo(long jarg1, GiCanvasBase jarg1_, float jarg2, float jarg3);
  public final static native boolean GiCanvasBase_lineToSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_, float jarg2, float jarg3);
  public final static native boolean GiCanvasBase_bezierTo(long jarg1, GiCanvasBase jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native boolean GiCanvasBase_bezierToSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native boolean GiCanvasBase_closePath(long jarg1, GiCanvasBase jarg1_);
  public final static native boolean GiCanvasBase_closePathSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_);
  public final static native boolean GiCanvasBase_endPath(long jarg1, GiCanvasBase jarg1_, boolean jarg2, boolean jarg3);
  public final static native boolean GiCanvasBase_endPathSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_, boolean jarg2, boolean jarg3);
  public final static native void GiCanvasBase_clearWindow(long jarg1, GiCanvasBase jarg1_);
  public final static native void GiCanvasBase_clearWindowSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_);
  public final static native void GiCanvasBase_clearCachedBitmap__SWIG_0(long jarg1, GiCanvasBase jarg1_, boolean jarg2);
  public final static native void GiCanvasBase_clearCachedBitmapSwigExplicitGiCanvasBase__SWIG_0(long jarg1, GiCanvasBase jarg1_, boolean jarg2);
  public final static native void GiCanvasBase_clearCachedBitmap__SWIG_1(long jarg1, GiCanvasBase jarg1_);
  public final static native void GiCanvasBase_clearCachedBitmapSwigExplicitGiCanvasBase__SWIG_1(long jarg1, GiCanvasBase jarg1_);
  public final static native boolean GiCanvasBase_drawCachedBitmap__SWIG_0(long jarg1, GiCanvasBase jarg1_, float jarg2, float jarg3, boolean jarg4);
  public final static native boolean GiCanvasBase_drawCachedBitmapSwigExplicitGiCanvasBase__SWIG_0(long jarg1, GiCanvasBase jarg1_, float jarg2, float jarg3, boolean jarg4);
  public final static native boolean GiCanvasBase_drawCachedBitmap__SWIG_1(long jarg1, GiCanvasBase jarg1_, float jarg2, float jarg3);
  public final static native boolean GiCanvasBase_drawCachedBitmapSwigExplicitGiCanvasBase__SWIG_1(long jarg1, GiCanvasBase jarg1_, float jarg2, float jarg3);
  public final static native boolean GiCanvasBase_drawCachedBitmap__SWIG_2(long jarg1, GiCanvasBase jarg1_, float jarg2);
  public final static native boolean GiCanvasBase_drawCachedBitmapSwigExplicitGiCanvasBase__SWIG_2(long jarg1, GiCanvasBase jarg1_, float jarg2);
  public final static native boolean GiCanvasBase_drawCachedBitmap__SWIG_3(long jarg1, GiCanvasBase jarg1_);
  public final static native boolean GiCanvasBase_drawCachedBitmapSwigExplicitGiCanvasBase__SWIG_3(long jarg1, GiCanvasBase jarg1_);
  public final static native void GiCanvasBase_saveCachedBitmap__SWIG_0(long jarg1, GiCanvasBase jarg1_, boolean jarg2);
  public final static native void GiCanvasBase_saveCachedBitmapSwigExplicitGiCanvasBase__SWIG_0(long jarg1, GiCanvasBase jarg1_, boolean jarg2);
  public final static native void GiCanvasBase_saveCachedBitmap__SWIG_1(long jarg1, GiCanvasBase jarg1_);
  public final static native void GiCanvasBase_saveCachedBitmapSwigExplicitGiCanvasBase__SWIG_1(long jarg1, GiCanvasBase jarg1_);
  public final static native boolean GiCanvasBase_hasCachedBitmap__SWIG_0(long jarg1, GiCanvasBase jarg1_, boolean jarg2);
  public final static native boolean GiCanvasBase_hasCachedBitmapSwigExplicitGiCanvasBase__SWIG_0(long jarg1, GiCanvasBase jarg1_, boolean jarg2);
  public final static native boolean GiCanvasBase_hasCachedBitmap__SWIG_1(long jarg1, GiCanvasBase jarg1_);
  public final static native boolean GiCanvasBase_hasCachedBitmapSwigExplicitGiCanvasBase__SWIG_1(long jarg1, GiCanvasBase jarg1_);
  public final static native boolean GiCanvasBase_isBufferedDrawing(long jarg1, GiCanvasBase jarg1_);
  public final static native boolean GiCanvasBase_isBufferedDrawingSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_);
  public final static native void GiCanvasBase_clipBoxChanged(long jarg1, GiCanvasBase jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void GiCanvasBase_clipBoxChangedSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void GiCanvasBase_antiAliasModeChanged(long jarg1, GiCanvasBase jarg1_, boolean jarg2);
  public final static native void GiCanvasBase_antiAliasModeChangedSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_, boolean jarg2);
  public final static native boolean GiCanvasBase_drawImage(long jarg1, GiCanvasBase jarg1_, String jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native boolean GiCanvasBase_drawImageSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_, String jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7);
  public final static native void GiCanvasBase_rawTextCenter(long jarg1, GiCanvasBase jarg1_, String jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void GiCanvasBase_rawTextCenterSwigExplicitGiCanvasBase(long jarg1, GiCanvasBase jarg1_, String jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void GiCanvasBase_director_connect(GiCanvasBase obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void GiCanvasBase_change_ownership(GiCanvasBase obj, long cptr, boolean take_or_release);
  public final static native long MgObject_clone(long jarg1, MgObject jarg1_);
  public final static native void MgObject_copy(long jarg1, MgObject jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgObject_release(long jarg1, MgObject jarg1_);
  public final static native boolean MgObject_equals(long jarg1, MgObject jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgObject_getType(long jarg1, MgObject jarg1_);
  public final static native boolean MgObject_isKindOf(long jarg1, MgObject jarg1_, int jarg2);
  public final static native long mgCreateShapes__SWIG_0(long jarg1, MgObject jarg1_, int jarg2);
  public final static native long mgCreateShapes__SWIG_1(long jarg1, MgObject jarg1_);
  public final static native long mgCreateShapes__SWIG_2();
  public final static native int MgShapes_Type();
  public final static native long MgShapes_cloneShapes(long jarg1, MgShapes jarg1_);
  public final static native int MgShapes_getShapeCount(long jarg1, MgShapes jarg1_);
  public final static native long MgShapes_getHeadShape(long jarg1, MgShapes jarg1_);
  public final static native long MgShapes_getLastShape(long jarg1, MgShapes jarg1_);
  public final static native long MgShapes_findShape(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native long MgShapes_findShapeByTag(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native long MgShapes_findShapeByType(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native long MgShapes_getExtent(long jarg1, MgShapes jarg1_);
  public final static native long MgShapes_hitTest(long jarg1, MgShapes jarg1_, long jarg2, Box2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native int MgShapes_draw__SWIG_0(long jarg1, MgShapes jarg1_, long jarg2, GiGraphics jarg2_, long jarg3, GiContext jarg3_);
  public final static native int MgShapes_draw__SWIG_1(long jarg1, MgShapes jarg1_, long jarg2, GiGraphics jarg2_);
  public final static native int MgShapes_dyndraw(long jarg1, MgShapes jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native boolean MgShapes_save__SWIG_0(long jarg1, MgShapes jarg1_, long jarg2, MgStorage jarg2_, int jarg3);
  public final static native boolean MgShapes_save__SWIG_1(long jarg1, MgShapes jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgShapes_load__SWIG_0(long jarg1, MgShapes jarg1_, long jarg2, MgStorage jarg2_, boolean jarg3);
  public final static native boolean MgShapes_load__SWIG_1(long jarg1, MgShapes jarg1_, long jarg2, MgStorage jarg2_);
  public final static native void MgShapes_clear(long jarg1, MgShapes jarg1_);
  public final static native void MgShapes_copyShapes(long jarg1, MgShapes jarg1_, long jarg2, MgShapes jarg2_);
  public final static native long MgShapes_addShape(long jarg1, MgShapes jarg1_, long jarg2, MgShape jarg2_);
  public final static native long MgShapes_addShapeByType(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native long MgShapes_removeShape(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native long MgShapes_moveTo(long jarg1, MgShapes jarg1_, int jarg2, long jarg3, MgShapes jarg3_);
  public final static native void MgShapes_moveAllShapesTo(long jarg1, MgShapes jarg1_, long jarg2, MgShapes jarg2_);
  public final static native boolean MgShapes_bringToFront(long jarg1, MgShapes jarg1_, int jarg2);
  public final static native long MgShapes_getOwner(long jarg1, MgShapes jarg1_);
  public final static native long new_MgShapeIterator(long jarg1, MgShapes jarg1_);
  public final static native void delete_MgShapeIterator(long jarg1);
  public final static native long MgShapeIterator_getFirstShape(long jarg1, MgShapeIterator jarg1_);
  public final static native long MgShapeIterator_getNextShape(long jarg1, MgShapeIterator jarg1_);
  public final static native void MgShapeIterator_freeIterator(long jarg1, MgShapeIterator jarg1_);
  public final static native int MgShape_Type();
  public final static native long MgShape_cloneShape(long jarg1, MgShape jarg1_);
  public final static native long MgShape_context(long jarg1, MgShape jarg1_);
  public final static native long MgShape_contextc(long jarg1, MgShape jarg1_);
  public final static native long MgShape_shape(long jarg1, MgShape jarg1_);
  public final static native long MgShape_shapec(long jarg1, MgShape jarg1_);
  public final static native boolean MgShape_draw__SWIG_0(long jarg1, MgShape jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native boolean MgShape_draw__SWIG_1(long jarg1, MgShape jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_);
  public final static native boolean MgShape_draw__SWIG_2(long jarg1, MgShape jarg1_, int jarg2, long jarg3, GiGraphics jarg3_);
  public final static native boolean MgShape_save(long jarg1, MgShape jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgShape_load(long jarg1, MgShape jarg1_, long jarg2, MgStorage jarg2_);
  public final static native int MgShape_getID(long jarg1, MgShape jarg1_);
  public final static native long MgShape_getParent(long jarg1, MgShape jarg1_);
  public final static native void MgShape_setParent(long jarg1, MgShape jarg1_, long jarg2, MgShapes jarg2_, int jarg3);
  public final static native int MgShape_getTag(long jarg1, MgShape jarg1_);
  public final static native void MgShape_setTag(long jarg1, MgShape jarg1_, int jarg2);
  public final static native int MgBaseShape_Type();
  public final static native long MgBaseShape_cloneShape(long jarg1, MgBaseShape jarg1_);
  public final static native void MgBaseShape_setOwner(long jarg1, MgBaseShape jarg1_, long jarg2, MgShape jarg2_);
  public final static native long MgBaseShape_getExtent(long jarg1, MgBaseShape jarg1_);
  public final static native void MgBaseShape_update(long jarg1, MgBaseShape jarg1_);
  public final static native void MgBaseShape_transform(long jarg1, MgBaseShape jarg1_, long jarg2, Matrix2d jarg2_);
  public final static native void MgBaseShape_clear(long jarg1, MgBaseShape jarg1_);
  public final static native int MgBaseShape_getPointCount(long jarg1, MgBaseShape jarg1_);
  public final static native long MgBaseShape_getPoint(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native void MgBaseShape_setPoint(long jarg1, MgBaseShape jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgBaseShape_isClosed(long jarg1, MgBaseShape jarg1_);
  public final static native boolean MgBaseShape_isCurve(long jarg1, MgBaseShape jarg1_);
  public final static native float MgBaseShape_hitTest2(long jarg1, MgBaseShape jarg1_, long jarg2, Point2d jarg2_, float jarg3, long jarg4, Point2d jarg4_);
  public final static native boolean MgBaseShape_hitTestBox(long jarg1, MgBaseShape jarg1_, long jarg2, Box2d jarg2_);
  public final static native boolean MgBaseShape_draw__SWIG_0(long jarg1, MgBaseShape jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_, int jarg5);
  public final static native boolean MgBaseShape_draw__SWIG_1(long jarg1, MgBaseShape jarg1_, int jarg2, long jarg3, GiGraphics jarg3_, long jarg4, GiContext jarg4_);
  public final static native boolean MgBaseShape_save(long jarg1, MgBaseShape jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgBaseShape_load(long jarg1, MgBaseShape jarg1_, long jarg2, MgStorage jarg2_);
  public final static native int MgBaseShape_getHandleCount(long jarg1, MgBaseShape jarg1_);
  public final static native long MgBaseShape_getHandlePoint(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native boolean MgBaseShape_setHandlePoint(long jarg1, MgBaseShape jarg1_, int jarg2, long jarg3, Point2d jarg3_, float jarg4);
  public final static native boolean MgBaseShape_isHandleFixed(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native boolean MgBaseShape_offset(long jarg1, MgBaseShape jarg1_, long jarg2, Vector2d jarg2_, int jarg3);
  public final static native boolean MgBaseShape_getFlag(long jarg1, MgBaseShape jarg1_, int jarg2);
  public final static native void MgBaseShape_setFlag(long jarg1, MgBaseShape jarg1_, int jarg2, boolean jarg3);
  public final static native String MgBaseShape_getTypeName(long jarg1, MgBaseShape jarg1_);
  public final static native long new_MgLine();
  public final static native void delete_MgLine(long jarg1);
  public final static native long MgLine_create();
  public final static native int MgLine_Type();
  public final static native long MgLine_startPoint(long jarg1, MgLine jarg1_);
  public final static native long MgLine_endPoint(long jarg1, MgLine jarg1_);
  public final static native long MgLine_center(long jarg1, MgLine jarg1_);
  public final static native float MgLine_length(long jarg1, MgLine jarg1_);
  public final static native float MgLine_angle(long jarg1, MgLine jarg1_);
  public final static native void MgLine_setStartPoint(long jarg1, MgLine jarg1_, long jarg2, Point2d jarg2_);
  public final static native void MgLine_setEndPoint(long jarg1, MgLine jarg1_, long jarg2, Point2d jarg2_);
  public final static native int MgBaseRect_Type();
  public final static native long MgBaseRect_getCenter(long jarg1, MgBaseRect jarg1_);
  public final static native long MgBaseRect_getRect(long jarg1, MgBaseRect jarg1_);
  public final static native float MgBaseRect_getWidth(long jarg1, MgBaseRect jarg1_);
  public final static native float MgBaseRect_getHeight(long jarg1, MgBaseRect jarg1_);
  public final static native float MgBaseRect_getAngle(long jarg1, MgBaseRect jarg1_);
  public final static native boolean MgBaseRect_isEmpty(long jarg1, MgBaseRect jarg1_, float jarg2);
  public final static native boolean MgBaseRect_isOrtho(long jarg1, MgBaseRect jarg1_);
  public final static native void MgBaseRect_setRect2P(long jarg1, MgBaseRect jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_);
  public final static native void MgBaseRect_setRectWithAngle(long jarg1, MgBaseRect jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, float jarg4, long jarg5, Point2d jarg5_);
  public final static native void MgBaseRect_setRect4P(long jarg1, MgBaseRect jarg1_, long jarg2, Point2d jarg2_);
  public final static native void MgBaseRect_setCenter(long jarg1, MgBaseRect jarg1_, long jarg2, Point2d jarg2_);
  public final static native void MgBaseRect_setSquare(long jarg1, MgBaseRect jarg1_, boolean jarg2);
  public final static native void delete_MgBaseRect(long jarg1);
  public final static native long new_MgRect();
  public final static native void delete_MgRect(long jarg1);
  public final static native long MgRect_create();
  public final static native int MgRect_Type();
  public final static native long new_MgEllipse();
  public final static native void delete_MgEllipse(long jarg1);
  public final static native long MgEllipse_create();
  public final static native int MgEllipse_Type();
  public final static native float MgEllipse_getRadiusX(long jarg1, MgEllipse jarg1_);
  public final static native float MgEllipse_getRadiusY(long jarg1, MgEllipse jarg1_);
  public final static native void MgEllipse_setRadius__SWIG_0(long jarg1, MgEllipse jarg1_, float jarg2, float jarg3);
  public final static native void MgEllipse_setRadius__SWIG_1(long jarg1, MgEllipse jarg1_, float jarg2);
  public final static native long new_MgRoundRect();
  public final static native void delete_MgRoundRect(long jarg1);
  public final static native long MgRoundRect_create();
  public final static native int MgRoundRect_Type();
  public final static native float MgRoundRect_getRadiusX(long jarg1, MgRoundRect jarg1_);
  public final static native float MgRoundRect_getRadiusY(long jarg1, MgRoundRect jarg1_);
  public final static native void MgRoundRect_setRadius__SWIG_0(long jarg1, MgRoundRect jarg1_, float jarg2, float jarg3);
  public final static native void MgRoundRect_setRadius__SWIG_1(long jarg1, MgRoundRect jarg1_, float jarg2);
  public final static native long new_MgDiamond();
  public final static native void delete_MgDiamond(long jarg1);
  public final static native long MgDiamond_create();
  public final static native int MgDiamond_Type();
  public final static native int MgBaseLines_Type();
  public final static native void MgBaseLines_setClosed(long jarg1, MgBaseLines jarg1_, boolean jarg2);
  public final static native long MgBaseLines_endPoint(long jarg1, MgBaseLines jarg1_);
  public final static native boolean MgBaseLines_resize(long jarg1, MgBaseLines jarg1_, int jarg2);
  public final static native boolean MgBaseLines_addPoint(long jarg1, MgBaseLines jarg1_, long jarg2, Point2d jarg2_);
  public final static native boolean MgBaseLines_insertPoint(long jarg1, MgBaseLines jarg1_, int jarg2, long jarg3, Point2d jarg3_);
  public final static native boolean MgBaseLines_removePoint(long jarg1, MgBaseLines jarg1_, int jarg2);
  public final static native long new_MgLines();
  public final static native void delete_MgLines(long jarg1);
  public final static native long MgLines_create();
  public final static native int MgLines_Type();
  public final static native long new_MgSplines();
  public final static native void delete_MgSplines(long jarg1);
  public final static native long MgSplines_create();
  public final static native int MgSplines_Type();
  public final static native void MgSplines_smooth(long jarg1, MgSplines jarg1_, float jarg2);
  public final static native long new_MgImageShape();
  public final static native void delete_MgImageShape(long jarg1);
  public final static native long MgImageShape_create();
  public final static native int MgImageShape_Type();
  public final static native String MgImageShape_getName(long jarg1, MgImageShape jarg1_);
  public final static native void MgImageShape_setName(long jarg1, MgImageShape jarg1_, String jarg2);
  public final static native long MgImageShape_findShapeByImageID(long jarg1, MgShapes jarg1_, String jarg2);
  public final static native long new_MgArc();
  public final static native void delete_MgArc(long jarg1);
  public final static native long MgArc_create();
  public final static native int MgArc_Type();
  public final static native long MgArc_getCenter(long jarg1, MgArc jarg1_);
  public final static native long MgArc_getStartPoint(long jarg1, MgArc jarg1_);
  public final static native long MgArc_getEndPoint(long jarg1, MgArc jarg1_);
  public final static native long MgArc_getMidPoint(long jarg1, MgArc jarg1_);
  public final static native float MgArc_getRadius(long jarg1, MgArc jarg1_);
  public final static native float MgArc_getStartAngle(long jarg1, MgArc jarg1_);
  public final static native float MgArc_getEndAngle(long jarg1, MgArc jarg1_);
  public final static native float MgArc_getSweepAngle(long jarg1, MgArc jarg1_);
  public final static native long MgArc_getStartTangent(long jarg1, MgArc jarg1_);
  public final static native long MgArc_getEndTangent(long jarg1, MgArc jarg1_);
  public final static native boolean MgArc_setStartMidEnd(long jarg1, MgArc jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native boolean MgArc_setCenterStartEnd(long jarg1, MgArc jarg1_, long jarg2, Point2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native boolean MgArc_setTanStartEnd(long jarg1, MgArc jarg1_, long jarg2, Vector2d jarg2_, long jarg3, Point2d jarg3_, long jarg4, Point2d jarg4_);
  public final static native boolean MgArc_setCenterRadius(long jarg1, MgArc jarg1_, long jarg2, Point2d jarg2_, float jarg3, float jarg4, float jarg5);
  public final static native long new_MgLockRW();
  public final static native boolean MgLockRW_lock__SWIG_0(long jarg1, MgLockRW jarg1_, boolean jarg2, int jarg3);
  public final static native boolean MgLockRW_lock__SWIG_1(long jarg1, MgLockRW jarg1_, boolean jarg2);
  public final static native int MgLockRW_unlock(long jarg1, MgLockRW jarg1_, boolean jarg2);
  public final static native boolean MgLockRW_firstLocked(long jarg1, MgLockRW jarg1_);
  public final static native boolean MgLockRW_lockedForRead(long jarg1, MgLockRW jarg1_);
  public final static native boolean MgLockRW_lockedForWrite(long jarg1, MgLockRW jarg1_);
  public final static native int MgLockRW_getEditFlags(long jarg1, MgLockRW jarg1_);
  public final static native void MgLockRW_setEditFlags(long jarg1, MgLockRW jarg1_, int jarg2);
  public final static native void delete_MgLockRW(long jarg1);
  public final static native int MgShapeDoc_Type();
  public final static native long MgShapeDoc_cloneDoc(long jarg1, MgShapeDoc jarg1_);
  public final static native long MgShapeDoc_create();
  public final static native boolean MgShapeDoc_save__SWIG_0(long jarg1, MgShapeDoc jarg1_, long jarg2, MgStorage jarg2_, int jarg3);
  public final static native boolean MgShapeDoc_save__SWIG_1(long jarg1, MgShapeDoc jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean MgShapeDoc_load__SWIG_0(long jarg1, MgShapeDoc jarg1_, long jarg2, MgStorage jarg2_, boolean jarg3);
  public final static native boolean MgShapeDoc_load__SWIG_1(long jarg1, MgShapeDoc jarg1_, long jarg2, MgStorage jarg2_);
  public final static native void MgShapeDoc_clear(long jarg1, MgShapeDoc jarg1_);
  public final static native int MgShapeDoc_draw(long jarg1, MgShapeDoc jarg1_, long jarg2, GiGraphics jarg2_);
  public final static native long MgShapeDoc_getExtent(long jarg1, MgShapeDoc jarg1_);
  public final static native int MgShapeDoc_getShapeCount(long jarg1, MgShapeDoc jarg1_);
  public final static native long MgShapeDoc_getCurrentShapes(long jarg1, MgShapeDoc jarg1_);
  public final static native long MgShapeDoc_context(long jarg1, MgShapeDoc jarg1_);
  public final static native long MgShapeDoc_modelTransform(long jarg1, MgShapeDoc jarg1_);
  public final static native long MgShapeDoc_getPageRectW(long jarg1, MgShapeDoc jarg1_);
  public final static native float MgShapeDoc_getViewScale(long jarg1, MgShapeDoc jarg1_);
  public final static native void MgShapeDoc_setPageRectW(long jarg1, MgShapeDoc jarg1_, long jarg2, Box2d jarg2_, float jarg3);
  public final static native int MgShapeDoc_getChangeCount(long jarg1, MgShapeDoc jarg1_);
  public final static native void MgShapeDoc_afterChanged(long jarg1, MgShapeDoc jarg1_);
  public final static native long MgShapeDoc_getLockData(long jarg1, MgShapeDoc jarg1_);
  public final static native long MgShapeDoc_clone(long jarg1, MgShapeDoc jarg1_);
  public final static native void MgShapeDoc_copy(long jarg1, MgShapeDoc jarg1_, long jarg2, MgObject jarg2_);
  public final static native void MgShapeDoc_release(long jarg1, MgShapeDoc jarg1_);
  public final static native boolean MgShapeDoc_equals(long jarg1, MgShapeDoc jarg1_, long jarg2, MgObject jarg2_);
  public final static native int MgShapeDoc_getType(long jarg1, MgShapeDoc jarg1_);
  public final static native boolean MgShapeDoc_isKindOf(long jarg1, MgShapeDoc jarg1_, int jarg2);
  public final static native void MgShapesLock_doc_set(long jarg1, MgShapesLock jarg1_, long jarg2, MgShapeDoc jarg2_);
  public final static native long MgShapesLock_doc_get(long jarg1, MgShapesLock jarg1_);
  public final static native int MgShapesLock_Unknown_get();
  public final static native int MgShapesLock_ReadOnly_get();
  public final static native int MgShapesLock_Add_get();
  public final static native int MgShapesLock_Remove_get();
  public final static native int MgShapesLock_Edit_get();
  public final static native int MgShapesLock_Load_get();
  public final static native long new_MgShapesLock__SWIG_0(long jarg1, MgShapeDoc jarg1_, int jarg2, int jarg3);
  public final static native long new_MgShapesLock__SWIG_1(long jarg1, MgShapeDoc jarg1_, int jarg2);
  public final static native void delete_MgShapesLock(long jarg1);
  public final static native boolean MgShapesLock_locked(long jarg1, MgShapesLock jarg1_);
  public final static native boolean MgShapesLock_lockedForRead(long jarg1, MgShapeDoc jarg1_);
  public final static native boolean MgShapesLock_lockedForWrite(long jarg1, MgShapeDoc jarg1_);
  public final static native int MgShapesLock_getEditFlags(long jarg1, MgShapesLock jarg1_);
  public final static native void MgShapesLock_resetEditFlags(long jarg1, MgShapesLock jarg1_);
  public final static native long new_MgDynShapeLock__SWIG_0(boolean jarg1, int jarg2);
  public final static native long new_MgDynShapeLock__SWIG_1(boolean jarg1);
  public final static native long new_MgDynShapeLock__SWIG_2();
  public final static native void delete_MgDynShapeLock(long jarg1);
  public final static native boolean MgDynShapeLock_locked(long jarg1, MgDynShapeLock jarg1_);
  public final static native boolean MgDynShapeLock_lockedForRead();
  public final static native boolean MgDynShapeLock_lockedForWrite();
  public final static native int kSinglePan_get();
  public final static native int kGestureCancel_get();
  public final static native long new_GiCoreView(long jarg1, GiCanvasBase jarg1_);
  public final static native void delete_GiCoreView(long jarg1);
  public final static native boolean GiCoreView_findShapeByImageId(long jarg1, GiCoreView jarg1_, String jarg2);
  public final static native boolean GiCoreView_addImageShapes(long jarg1, GiCoreView jarg1_, String jarg2, int jarg3, int jarg4);
  public final static native boolean GiCoreView_saveShapes(long jarg1, GiCoreView jarg1_, long jarg2, MgStorage jarg2_);
  public final static native boolean GiCoreView_loadShapes(long jarg1, GiCoreView jarg1_, long jarg2, MgStorage jarg2_);
  public final static native int GiCoreView_getShapeCount(long jarg1, GiCoreView jarg1_);
  public final static native int GiCoreView_getChangeCount(long jarg1, GiCoreView jarg1_);
  public final static native int GiCoreView_addTestingShapes(long jarg1, GiCoreView jarg1_);
  public final static native int GiCoreView_getWidth(long jarg1, GiCoreView jarg1_);
  public final static native int GiCoreView_getHeight(long jarg1, GiCoreView jarg1_);
  public final static native boolean GiCoreView_onSize(long jarg1, GiCoreView jarg1_, int jarg2, int jarg3);
  public final static native boolean GiCoreView_onDraw(long jarg1, GiCoreView jarg1_, long jarg2, GiCanvasBase jarg2_);
  public final static native boolean GiCoreView_onDynDraw(long jarg1, GiCoreView jarg1_, long jarg2, GiCanvasBase jarg2_);
  public final static native String GiCoreView_getCommandName(long jarg1, GiCoreView jarg1_);
  public final static native boolean GiCoreView_setCommandName(long jarg1, GiCoreView jarg1_, String jarg2);
  public final static native void GiCoreView_doContextAction(long jarg1, GiCoreView jarg1_, int jarg2);
  public final static native boolean GiCoreView_onGesture(long jarg1, GiCoreView jarg1_, int jarg2, int jarg3, int jarg4, float jarg5, float jarg6, float jarg7, float jarg8);
  public final static native long GiCoreView_getCurrentContext(long jarg1, GiCoreView jarg1_, boolean jarg2);
  public final static native void GiCoreView_applyContext(long jarg1, GiCoreView jarg1_, long jarg2, GiContext jarg2_, int jarg3, int jarg4);
  public final static native void GiCoreView_setZoomFeature(long jarg1, GiCoreView jarg1_, int jarg2);
  public final static native long new_MgJsonStorage();
  public final static native void delete_MgJsonStorage(long jarg1);
  public final static native long MgJsonStorage_storageForRead(long jarg1, MgJsonStorage jarg1_, String jarg2);
  public final static native long MgJsonStorage_storageForWrite(long jarg1, MgJsonStorage jarg1_);
  public final static native String MgJsonStorage_stringify(long jarg1, MgJsonStorage jarg1_, boolean jarg2);
  public final static native String MgJsonStorage_getParseError(long jarg1, MgJsonStorage jarg1_);
  public final static native boolean MgStorage_readNode(long jarg1, MgStorage jarg1_, String jarg2, int jarg3, boolean jarg4);
  public final static native boolean MgStorage_writeNode(long jarg1, MgStorage jarg1_, String jarg2, int jarg3, boolean jarg4);
  public final static native boolean MgStorage_readBool(long jarg1, MgStorage jarg1_, String jarg2, boolean jarg3);
  public final static native float MgStorage_readFloat(long jarg1, MgStorage jarg1_, String jarg2, float jarg3);
  public final static native void MgStorage_writeBool(long jarg1, MgStorage jarg1_, String jarg2, boolean jarg3);
  public final static native void MgStorage_writeFloat(long jarg1, MgStorage jarg1_, String jarg2, float jarg3);
  public final static native void MgStorage_writeString(long jarg1, MgStorage jarg1_, String jarg2, String jarg3);
  public final static native int MgStorage_readInt(long jarg1, MgStorage jarg1_, String jarg2, int jarg3);
  public final static native void MgStorage_writeInt(long jarg1, MgStorage jarg1_, String jarg2, int jarg3);
  public final static native void MgStorage_writeUInt(long jarg1, MgStorage jarg1_, String jarg2, int jarg3);
  public final static native boolean MgStorage_setError(long jarg1, MgStorage jarg1_, String jarg2);
  public final static native void delete_MgStorage(long jarg1);
  public final static native long GiGraphics_SWIGUpcast(long jarg1);
  public final static native long MgShapes_SWIGUpcast(long jarg1);
  public final static native long MgShape_SWIGUpcast(long jarg1);
  public final static native long MgBaseShape_SWIGUpcast(long jarg1);
  public final static native long MgLine_SWIGUpcast(long jarg1);
  public final static native long MgBaseRect_SWIGUpcast(long jarg1);
  public final static native long MgRect_SWIGUpcast(long jarg1);
  public final static native long MgEllipse_SWIGUpcast(long jarg1);
  public final static native long MgRoundRect_SWIGUpcast(long jarg1);
  public final static native long MgDiamond_SWIGUpcast(long jarg1);
  public final static native long MgBaseLines_SWIGUpcast(long jarg1);
  public final static native long MgLines_SWIGUpcast(long jarg1);
  public final static native long MgSplines_SWIGUpcast(long jarg1);
  public final static native long MgImageShape_SWIGUpcast(long jarg1);
  public final static native long MgArc_SWIGUpcast(long jarg1);
  public final static native long MgShapeDoc_SWIGUpcast(long jarg1);

  public static float SwigDirector_GiCanvasBase_getScreenDpi(GiCanvasBase self) {
    return self.getScreenDpi();
  }
  public static long SwigDirector_GiCanvasBase_getBkColor(GiCanvasBase self) {
    return GiColor.getCPtr(self.getBkColor());
  }
  public static long SwigDirector_GiCanvasBase_setBkColor(GiCanvasBase self, long color) {
    return GiColor.getCPtr(self.setBkColor(new GiColor(color, false)));
  }
  public static void SwigDirector_GiCanvasBase_setNeedRedraw(GiCanvasBase self) {
    self.setNeedRedraw();
  }
  public static boolean SwigDirector_GiCanvasBase_drawHandle(GiCanvasBase self, float x, float y, int index) {
    return self.drawHandle(x, y, index);
  }
  public static void SwigDirector_GiCanvasBase_penChanged(GiCanvasBase self, int argb, float penWidth, int lineStyle) {
    self.penChanged(argb, penWidth, lineStyle);
  }
  public static void SwigDirector_GiCanvasBase_brushChanged(GiCanvasBase self, int argb) {
    self.brushChanged(argb);
  }
  public static boolean SwigDirector_GiCanvasBase_isContextActionsVisible(GiCanvasBase self) {
    return self.isContextActionsVisible();
  }
  public static boolean SwigDirector_GiCanvasBase_showContextActions(GiCanvasBase self, long actions, float x, float y, float w, float h) {
    return self.showContextActions(new Ints(actions, false), x, y, w, h);
  }
  public static boolean SwigDirector_GiCanvasBase_drawLine(GiCanvasBase self, float x1, float y1, float x2, float y2) {
    return self.drawLine(x1, y1, x2, y2);
  }
  public static boolean SwigDirector_GiCanvasBase_drawLines(GiCanvasBase self, long pxs) {
    return self.drawLines(new Floats(pxs, false));
  }
  public static boolean SwigDirector_GiCanvasBase_drawBeziers(GiCanvasBase self, long pxs) {
    return self.drawBeziers(new Floats(pxs, false));
  }
  public static boolean SwigDirector_GiCanvasBase_drawPolygon(GiCanvasBase self, long pxs, boolean stroke, boolean fill) {
    return self.drawPolygon(new Floats(pxs, false), stroke, fill);
  }
  public static boolean SwigDirector_GiCanvasBase_drawRect(GiCanvasBase self, float x, float y, float w, float h, boolean stroke, boolean fill) {
    return self.drawRect(x, y, w, h, stroke, fill);
  }
  public static boolean SwigDirector_GiCanvasBase_drawEllipse(GiCanvasBase self, float x, float y, float w, float h, boolean stroke, boolean fill) {
    return self.drawEllipse(x, y, w, h, stroke, fill);
  }
  public static boolean SwigDirector_GiCanvasBase_beginPath(GiCanvasBase self) {
    return self.beginPath();
  }
  public static boolean SwigDirector_GiCanvasBase_moveTo(GiCanvasBase self, float x, float y) {
    return self.moveTo(x, y);
  }
  public static boolean SwigDirector_GiCanvasBase_lineTo(GiCanvasBase self, float x, float y) {
    return self.lineTo(x, y);
  }
  public static boolean SwigDirector_GiCanvasBase_bezierTo(GiCanvasBase self, float c1x, float c1y, float c2x, float c2y, float x, float y) {
    return self.bezierTo(c1x, c1y, c2x, c2y, x, y);
  }
  public static boolean SwigDirector_GiCanvasBase_closePath(GiCanvasBase self) {
    return self.closePath();
  }
  public static boolean SwigDirector_GiCanvasBase_endPath(GiCanvasBase self, boolean stroke, boolean fill) {
    return self.endPath(stroke, fill);
  }
  public static void SwigDirector_GiCanvasBase_clearWindow(GiCanvasBase self) {
    self.clearWindow();
  }
  public static void SwigDirector_GiCanvasBase_clearCachedBitmap__SWIG_0(GiCanvasBase self, boolean clearAll) {
    self.clearCachedBitmap(clearAll);
  }
  public static void SwigDirector_GiCanvasBase_clearCachedBitmap__SWIG_1(GiCanvasBase self) {
    self.clearCachedBitmap();
  }
  public static boolean SwigDirector_GiCanvasBase_drawCachedBitmap__SWIG_0(GiCanvasBase self, float x, float y, boolean secondBmp) {
    return self.drawCachedBitmap(x, y, secondBmp);
  }
  public static boolean SwigDirector_GiCanvasBase_drawCachedBitmap__SWIG_1(GiCanvasBase self, float x, float y) {
    return self.drawCachedBitmap(x, y);
  }
  public static boolean SwigDirector_GiCanvasBase_drawCachedBitmap__SWIG_2(GiCanvasBase self, float x) {
    return self.drawCachedBitmap(x);
  }
  public static boolean SwigDirector_GiCanvasBase_drawCachedBitmap__SWIG_3(GiCanvasBase self) {
    return self.drawCachedBitmap();
  }
  public static void SwigDirector_GiCanvasBase_saveCachedBitmap__SWIG_0(GiCanvasBase self, boolean secondBmp) {
    self.saveCachedBitmap(secondBmp);
  }
  public static void SwigDirector_GiCanvasBase_saveCachedBitmap__SWIG_1(GiCanvasBase self) {
    self.saveCachedBitmap();
  }
  public static boolean SwigDirector_GiCanvasBase_hasCachedBitmap__SWIG_0(GiCanvasBase self, boolean secondBmp) {
    return self.hasCachedBitmap(secondBmp);
  }
  public static boolean SwigDirector_GiCanvasBase_hasCachedBitmap__SWIG_1(GiCanvasBase self) {
    return self.hasCachedBitmap();
  }
  public static boolean SwigDirector_GiCanvasBase_isBufferedDrawing(GiCanvasBase self) {
    return self.isBufferedDrawing();
  }
  public static void SwigDirector_GiCanvasBase_clipBoxChanged(GiCanvasBase self, float x, float y, float w, float h) {
    self.clipBoxChanged(x, y, w, h);
  }
  public static void SwigDirector_GiCanvasBase_antiAliasModeChanged(GiCanvasBase self, boolean antiAlias) {
    self.antiAliasModeChanged(antiAlias);
  }
  public static boolean SwigDirector_GiCanvasBase_drawImage(GiCanvasBase self, String name, float xc, float yc, float w, float h, float angle) {
    return self.drawImage(name, xc, yc, w, h, angle);
  }
  public static void SwigDirector_GiCanvasBase_rawTextCenter(GiCanvasBase self, String text, float x, float y, float h) {
    self.rawTextCenter(text, x, y, h);
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
