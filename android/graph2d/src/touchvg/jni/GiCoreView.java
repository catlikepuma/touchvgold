/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package touchvg.jni;

public class GiCoreView {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected GiCoreView(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(GiCoreView obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        graph2dJNI.delete_GiCoreView(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public GiCoreView(GiCanvasBase canvas) {
    this(graph2dJNI.new_GiCoreView(GiCanvasBase.getCPtr(canvas), canvas), true);
  }

  public boolean findShapeByImageId(String name) {
    return graph2dJNI.GiCoreView_findShapeByImageId(swigCPtr, this, name);
  }

  public boolean addImageShapes(String name, int width, int height) {
    return graph2dJNI.GiCoreView_addImageShapes(swigCPtr, this, name, width, height);
  }

  public boolean saveShapes(MgStorage s) {
    return graph2dJNI.GiCoreView_saveShapes(swigCPtr, this, MgStorage.getCPtr(s), s);
  }

  public boolean loadShapes(MgStorage s) {
    return graph2dJNI.GiCoreView_loadShapes(swigCPtr, this, MgStorage.getCPtr(s), s);
  }

  public int getShapeCount() {
    return graph2dJNI.GiCoreView_getShapeCount(swigCPtr, this);
  }

  public int getChangeCount() {
    return graph2dJNI.GiCoreView_getChangeCount(swigCPtr, this);
  }

  public int addTestingShapes() {
    return graph2dJNI.GiCoreView_addTestingShapes(swigCPtr, this);
  }

  public int getWidth() {
    return graph2dJNI.GiCoreView_getWidth(swigCPtr, this);
  }

  public int getHeight() {
    return graph2dJNI.GiCoreView_getHeight(swigCPtr, this);
  }

  public boolean onSize(int width, int height) {
    return graph2dJNI.GiCoreView_onSize(swigCPtr, this, width, height);
  }

  public boolean onDraw(GiCanvasBase canvas) {
    return graph2dJNI.GiCoreView_onDraw(swigCPtr, this, GiCanvasBase.getCPtr(canvas), canvas);
  }

  public boolean onDynDraw(GiCanvasBase canvas) {
    return graph2dJNI.GiCoreView_onDynDraw(swigCPtr, this, GiCanvasBase.getCPtr(canvas), canvas);
  }

  public String getCommandName() {
    return graph2dJNI.GiCoreView_getCommandName(swigCPtr, this);
  }

  public boolean setCommandName(String name) {
    return graph2dJNI.GiCoreView_setCommandName(swigCPtr, this, name);
  }

  public void doContextAction(int action) {
    graph2dJNI.GiCoreView_doContextAction(swigCPtr, this, action);
  }

  public boolean onGesture(GiGestureType gestureType, GiGestureState gestureState, int fingerCount, float x1, float y1, float x2, float y2) {
    return graph2dJNI.GiCoreView_onGesture(swigCPtr, this, gestureType.swigValue(), gestureState.swigValue(), fingerCount, x1, y1, x2, y2);
  }

  public GiContext getCurrentContext(boolean forChange) {
    return new GiContext(graph2dJNI.GiCoreView_getCurrentContext(swigCPtr, this, forChange), false);
  }

  public void applyContext(GiContext ctx, int mask, int apply) {
    graph2dJNI.GiCoreView_applyContext(swigCPtr, this, GiContext.getCPtr(ctx), ctx, mask, apply);
  }

  public void setZoomFeature(int mask) {
    graph2dJNI.GiCoreView_setZoomFeature(swigCPtr, this, mask);
  }

}
