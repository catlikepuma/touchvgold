/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package touchvg.core;

public class BoundBox {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected BoundBox(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BoundBox obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        touchvgJNI.delete_BoundBox(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public BoundBox() {
    this(touchvgJNI.new_BoundBox__SWIG_0(), true);
  }

  public BoundBox(Point2d pnt1, Point2d pnt2) {
    this(touchvgJNI.new_BoundBox__SWIG_1(Point2d.getCPtr(pnt1), pnt1, Point2d.getCPtr(pnt2), pnt2), true);
  }

  public BoundBox(Point2d base, Vector2d dir1, Vector2d dir2) {
    this(touchvgJNI.new_BoundBox__SWIG_2(Point2d.getCPtr(base), base, Vector2d.getCPtr(dir1), dir1, Vector2d.getCPtr(dir2), dir2), true);
  }

  public BoundBox(BoundBox box) {
    this(touchvgJNI.new_BoundBox__SWIG_3(BoundBox.getCPtr(box), box), true);
  }

  public void getMinMaxPoints(Point2d pnt1, Point2d pnt2) {
    touchvgJNI.BoundBox_getMinMaxPoints(swigCPtr, this, Point2d.getCPtr(pnt1), pnt1, Point2d.getCPtr(pnt2), pnt2);
  }

  public void get(Point2d base, Vector2d dir1, Vector2d dir2) {
    touchvgJNI.BoundBox_get(swigCPtr, this, Point2d.getCPtr(base), base, Vector2d.getCPtr(dir1), dir1, Vector2d.getCPtr(dir2), dir2);
  }

  public BoundBox set(Point2d pnt1, Point2d pnt2) {
    return new BoundBox(touchvgJNI.BoundBox_set__SWIG_0(swigCPtr, this, Point2d.getCPtr(pnt1), pnt1, Point2d.getCPtr(pnt2), pnt2), false);
  }

  public BoundBox set(Point2d base, Vector2d dir1, Vector2d dir2) {
    return new BoundBox(touchvgJNI.BoundBox_set__SWIG_1(swigCPtr, this, Point2d.getCPtr(base), base, Vector2d.getCPtr(dir1), dir1, Vector2d.getCPtr(dir2), dir2), false);
  }

  public BoundBox extend(Point2d pnt) {
    return new BoundBox(touchvgJNI.BoundBox_extend(swigCPtr, this, Point2d.getCPtr(pnt), pnt), false);
  }

  public BoundBox swell(float distance) {
    return new BoundBox(touchvgJNI.BoundBox_swell(swigCPtr, this, distance), false);
  }

  public boolean contains(Point2d pnt) {
    return touchvgJNI.BoundBox_contains(swigCPtr, this, Point2d.getCPtr(pnt), pnt);
  }

  public boolean isDisjoint(BoundBox box) {
    return touchvgJNI.BoundBox_isDisjoint(swigCPtr, this, BoundBox.getCPtr(box), box);
  }

  public boolean isRect() {
    return touchvgJNI.BoundBox_isRect(swigCPtr, this);
  }

  public BoundBox setToRect() {
    return new BoundBox(touchvgJNI.BoundBox_setToRect(swigCPtr, this), false);
  }

}
