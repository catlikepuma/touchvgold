/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package touchvg.core;

public class MgBaseShape extends MgObject {
  private long swigCPtr;

  protected MgBaseShape(long cPtr, boolean cMemoryOwn) {
    super(touchvgJNI.MgBaseShape_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(MgBaseShape obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  protected void swigDirectorDisconnect() {
    swigCMemOwn = false;
    delete();
  }

  public void swigReleaseOwnership() {
    swigCMemOwn = false;
    touchvgJNI.MgBaseShape_change_ownership(this, swigCPtr, false);
  }

  public void swigTakeOwnership() {
    swigCMemOwn = true;
    touchvgJNI.MgBaseShape_change_ownership(this, swigCPtr, true);
  }

  protected MgBaseShape() {
    this(touchvgJNI.new_MgBaseShape(), true);
    touchvgJNI.MgBaseShape_director_connect(this, swigCPtr, swigCMemOwn, true);
  }

  public static int Type() {
    return touchvgJNI.MgBaseShape_Type();
  }

  public static Tol minTol() {
    return new Tol(touchvgJNI.MgBaseShape_minTol(), false);
  }

  public MgBaseShape cloneShape() {
    long cPtr = touchvgJNI.MgBaseShape_cloneShape(swigCPtr, this);
    return (cPtr == 0) ? null : new MgBaseShape(cPtr, false);
  }

  public void setOwner(MgShape owner) {
    if (getClass() == MgBaseShape.class) touchvgJNI.MgBaseShape_setOwner(swigCPtr, this, MgShape.getCPtr(owner), owner); else touchvgJNI.MgBaseShape_setOwnerSwigExplicitMgBaseShape(swigCPtr, this, MgShape.getCPtr(owner), owner);
  }

  public Box2d getExtent() {
    return new Box2d(touchvgJNI.MgBaseShape_getExtent(swigCPtr, this), true);
  }

  public void update() {
    touchvgJNI.MgBaseShape_update(swigCPtr, this);
  }

  public void transform(Matrix2d mat) {
    touchvgJNI.MgBaseShape_transform(swigCPtr, this, Matrix2d.getCPtr(mat), mat);
  }

  public void clear() {
    touchvgJNI.MgBaseShape_clear(swigCPtr, this);
  }

  public void clearCachedData() {
    touchvgJNI.MgBaseShape_clearCachedData(swigCPtr, this);
  }

  public int getPointCount() {
    return touchvgJNI.MgBaseShape_getPointCount(swigCPtr, this);
  }

  public Point2d getPoint(int index) {
    return new Point2d(touchvgJNI.MgBaseShape_getPoint(swigCPtr, this, index), true);
  }

  public void setPoint(int index, Point2d pt) {
    touchvgJNI.MgBaseShape_setPoint(swigCPtr, this, index, Point2d.getCPtr(pt), pt);
  }

  public boolean isClosed() {
    return touchvgJNI.MgBaseShape_isClosed(swigCPtr, this);
  }

  public boolean isCurve() {
    return touchvgJNI.MgBaseShape_isCurve(swigCPtr, this);
  }

  public float hitTest(Point2d pt, float tol, MgHitResult res) {
    return touchvgJNI.MgBaseShape_hitTest(swigCPtr, this, Point2d.getCPtr(pt), pt, tol, MgHitResult.getCPtr(res), res);
  }

  public float hitTest2(Point2d pt, float tol, Point2d nearpt) {
    return touchvgJNI.MgBaseShape_hitTest2(swigCPtr, this, Point2d.getCPtr(pt), pt, tol, Point2d.getCPtr(nearpt), nearpt);
  }

  public boolean hitTestBox(Box2d rect) {
    return touchvgJNI.MgBaseShape_hitTestBox(swigCPtr, this, Box2d.getCPtr(rect), rect);
  }

  public boolean draw(int mode, GiGraphics gs, GiContext ctx, int segment) {
    return touchvgJNI.MgBaseShape_draw__SWIG_0(swigCPtr, this, mode, GiGraphics.getCPtr(gs), gs, GiContext.getCPtr(ctx), ctx, segment);
  }

  public boolean draw(int mode, GiGraphics gs, GiContext ctx) {
    return touchvgJNI.MgBaseShape_draw__SWIG_1(swigCPtr, this, mode, GiGraphics.getCPtr(gs), gs, GiContext.getCPtr(ctx), ctx);
  }

  public boolean save(MgStorage s) {
    return touchvgJNI.MgBaseShape_save(swigCPtr, this, MgStorage.getCPtr(s), s);
  }

  public boolean load(MgShapeFactory factory, MgStorage s) {
    return touchvgJNI.MgBaseShape_load(swigCPtr, this, MgShapeFactory.getCPtr(factory), factory, MgStorage.getCPtr(s), s);
  }

  public int getHandleCount() {
    return touchvgJNI.MgBaseShape_getHandleCount(swigCPtr, this);
  }

  public Point2d getHandlePoint(int index) {
    return new Point2d(touchvgJNI.MgBaseShape_getHandlePoint(swigCPtr, this, index), true);
  }

  public boolean setHandlePoint(int index, Point2d pt, float tol) {
    return touchvgJNI.MgBaseShape_setHandlePoint(swigCPtr, this, index, Point2d.getCPtr(pt), pt, tol);
  }

  public boolean isHandleFixed(int index) {
    return touchvgJNI.MgBaseShape_isHandleFixed(swigCPtr, this, index);
  }

  public int getHandleType(int index) {
    return touchvgJNI.MgBaseShape_getHandleType(swigCPtr, this, index);
  }

  public boolean offset(Vector2d vec, int segment) {
    return touchvgJNI.MgBaseShape_offset(swigCPtr, this, Vector2d.getCPtr(vec), vec, segment);
  }

  public boolean getFlag(MgShapeBit bit) {
    return touchvgJNI.MgBaseShape_getFlag(swigCPtr, this, bit.swigValue());
  }

  public void setFlag(MgShapeBit bit, boolean on) {
    if (getClass() == MgBaseShape.class) touchvgJNI.MgBaseShape_setFlag(swigCPtr, this, bit.swigValue(), on); else touchvgJNI.MgBaseShape_setFlagSwigExplicitMgBaseShape(swigCPtr, this, bit.swigValue(), on);
  }

  public String getTypeName() {
    return touchvgJNI.MgBaseShape_getTypeName(swigCPtr, this);
  }

}
