/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace touchvg.core {

using System;
using System.Runtime.InteropServices;

public class MgDynShapeLock : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MgDynShapeLock(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(MgDynShapeLock obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~MgDynShapeLock() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          touchvgPINVOKE.delete_MgDynShapeLock(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public MgDynShapeLock(bool forWrite, MgView view, int timeout) : this(touchvgPINVOKE.new_MgDynShapeLock__SWIG_0(forWrite, MgView.getCPtr(view), timeout), true) {
  }

  public MgDynShapeLock(bool forWrite, MgView view) : this(touchvgPINVOKE.new_MgDynShapeLock__SWIG_1(forWrite, MgView.getCPtr(view)), true) {
  }

  public bool locked() {
    bool ret = touchvgPINVOKE.MgDynShapeLock_locked(swigCPtr);
    return ret;
  }

  public static bool lockedForRead(MgView view) {
    bool ret = touchvgPINVOKE.MgDynShapeLock_lockedForRead(MgView.getCPtr(view));
    return ret;
  }

  public static bool lockedForWrite(MgView view) {
    bool ret = touchvgPINVOKE.MgDynShapeLock_lockedForWrite(MgView.getCPtr(view));
    return ret;
  }

}

}
