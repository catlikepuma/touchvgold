/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace touchvg.core {

using System;
using System.Runtime.InteropServices;

public class Vector2d : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Vector2d(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Vector2d obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Vector2d() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          touchvgPINVOKE.delete_Vector2d(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public float x {
    set {
      touchvgPINVOKE.Vector2d_x_set(swigCPtr, value);
    } 
    get {
      float ret = touchvgPINVOKE.Vector2d_x_get(swigCPtr);
      return ret;
    } 
  }

  public float y {
    set {
      touchvgPINVOKE.Vector2d_y_set(swigCPtr, value);
    } 
    get {
      float ret = touchvgPINVOKE.Vector2d_y_get(swigCPtr);
      return ret;
    } 
  }

  public static Vector2d kIdentity() {
    Vector2d ret = new Vector2d(touchvgPINVOKE.Vector2d_kIdentity(), false);
    return ret;
  }

  public static Vector2d kXAxis() {
    Vector2d ret = new Vector2d(touchvgPINVOKE.Vector2d_kXAxis(), false);
    return ret;
  }

  public static Vector2d kYAxis() {
    Vector2d ret = new Vector2d(touchvgPINVOKE.Vector2d_kYAxis(), false);
    return ret;
  }

  public Vector2d() : this(touchvgPINVOKE.new_Vector2d__SWIG_0(), true) {
  }

  public Vector2d(float xx, float yy) : this(touchvgPINVOKE.new_Vector2d__SWIG_1(xx, yy), true) {
  }

  public Vector2d(Vector2d src) : this(touchvgPINVOKE.new_Vector2d__SWIG_2(Vector2d.getCPtr(src)), true) {
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector2d transform(Matrix2d m) {
    Vector2d ret = new Vector2d(touchvgPINVOKE.Vector2d_transform(swigCPtr, Matrix2d.getCPtr(m)), true);
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector2d add(Vector2d v) {
    Vector2d ret = new Vector2d(touchvgPINVOKE.Vector2d_add(swigCPtr, Vector2d.getCPtr(v)), true);
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector2d subtract(Vector2d v) {
    Vector2d ret = new Vector2d(touchvgPINVOKE.Vector2d_subtract(swigCPtr, Vector2d.getCPtr(v)), true);
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector2d negate() {
    Vector2d ret = new Vector2d(touchvgPINVOKE.Vector2d_negate(swigCPtr), false);
    return ret;
  }

  public Vector2d perpVector() {
    Vector2d ret = new Vector2d(touchvgPINVOKE.Vector2d_perpVector(swigCPtr), true);
    return ret;
  }

  public Vector2d scaleBy(float sx, float sy) {
    Vector2d ret = new Vector2d(touchvgPINVOKE.Vector2d_scaleBy__SWIG_0(swigCPtr, sx, sy), false);
    return ret;
  }

  public Vector2d scaleBy(float s) {
    Vector2d ret = new Vector2d(touchvgPINVOKE.Vector2d_scaleBy__SWIG_1(swigCPtr, s), false);
    return ret;
  }

  public float dotProduct(Vector2d v) {
    float ret = touchvgPINVOKE.Vector2d_dotProduct(swigCPtr, Vector2d.getCPtr(v));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float crossProduct(Vector2d v) {
    float ret = touchvgPINVOKE.Vector2d_crossProduct(swigCPtr, Vector2d.getCPtr(v));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float angle() {
    float ret = touchvgPINVOKE.Vector2d_angle(swigCPtr);
    return ret;
  }

  public float angle2() {
    float ret = touchvgPINVOKE.Vector2d_angle2(swigCPtr);
    return ret;
  }

  public float angleTo(Vector2d v) {
    float ret = touchvgPINVOKE.Vector2d_angleTo(swigCPtr, Vector2d.getCPtr(v));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float angleTo2(Vector2d v) {
    float ret = touchvgPINVOKE.Vector2d_angleTo2(swigCPtr, Vector2d.getCPtr(v));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float length() {
    float ret = touchvgPINVOKE.Vector2d_length(swigCPtr);
    return ret;
  }

  public float lengthSqrd() {
    float ret = touchvgPINVOKE.Vector2d_lengthSqrd(swigCPtr);
    return ret;
  }

  public Vector2d unitVector() {
    Vector2d ret = new Vector2d(touchvgPINVOKE.Vector2d_unitVector(swigCPtr), true);
    return ret;
  }

  public bool normalize(Tol tol) {
    bool ret = touchvgPINVOKE.Vector2d_normalize__SWIG_0(swigCPtr, Tol.getCPtr(tol));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool normalize() {
    bool ret = touchvgPINVOKE.Vector2d_normalize__SWIG_1(swigCPtr);
    return ret;
  }

  public bool isUnitVector(Tol tol) {
    bool ret = touchvgPINVOKE.Vector2d_isUnitVector__SWIG_0(swigCPtr, Tol.getCPtr(tol));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isUnitVector() {
    bool ret = touchvgPINVOKE.Vector2d_isUnitVector__SWIG_1(swigCPtr);
    return ret;
  }

  public bool isZeroVector(Tol tol) {
    bool ret = touchvgPINVOKE.Vector2d_isZeroVector__SWIG_0(swigCPtr, Tol.getCPtr(tol));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isZeroVector() {
    bool ret = touchvgPINVOKE.Vector2d_isZeroVector__SWIG_1(swigCPtr);
    return ret;
  }

  public bool isEqualTo(Vector2d v, Tol tol) {
    bool ret = touchvgPINVOKE.Vector2d_isEqualTo__SWIG_0(swigCPtr, Vector2d.getCPtr(v), Tol.getCPtr(tol));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isEqualTo(Vector2d v) {
    bool ret = touchvgPINVOKE.Vector2d_isEqualTo__SWIG_1(swigCPtr, Vector2d.getCPtr(v));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Vector2d set(float xx, float yy) {
    Vector2d ret = new Vector2d(touchvgPINVOKE.Vector2d_set(swigCPtr, xx, yy), false);
    return ret;
  }

  public Vector2d setAngleLength(float angle, float len) {
    Vector2d ret = new Vector2d(touchvgPINVOKE.Vector2d_setAngleLength(swigCPtr, angle, len), false);
    return ret;
  }

  public Vector2d setLength(float len) {
    Vector2d ret = new Vector2d(touchvgPINVOKE.Vector2d_setLength(swigCPtr, len), false);
    return ret;
  }

  public bool isRightOf(Vector2d vec) {
    bool ret = touchvgPINVOKE.Vector2d_isRightOf(swigCPtr, Vector2d.getCPtr(vec));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isLeftOf(Vector2d vec) {
    bool ret = touchvgPINVOKE.Vector2d_isLeftOf(swigCPtr, Vector2d.getCPtr(vec));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isParallelTo(Vector2d vec, Tol tol) {
    bool ret = touchvgPINVOKE.Vector2d_isParallelTo__SWIG_0(swigCPtr, Vector2d.getCPtr(vec), Tol.getCPtr(tol));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isParallelTo(Vector2d vec) {
    bool ret = touchvgPINVOKE.Vector2d_isParallelTo__SWIG_1(swigCPtr, Vector2d.getCPtr(vec));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isCodirectionalTo(Vector2d vec, Tol tol) {
    bool ret = touchvgPINVOKE.Vector2d_isCodirectionalTo__SWIG_0(swigCPtr, Vector2d.getCPtr(vec), Tol.getCPtr(tol));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isCodirectionalTo(Vector2d vec) {
    bool ret = touchvgPINVOKE.Vector2d_isCodirectionalTo__SWIG_1(swigCPtr, Vector2d.getCPtr(vec));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isOppositeTo(Vector2d vec, Tol tol) {
    bool ret = touchvgPINVOKE.Vector2d_isOppositeTo__SWIG_0(swigCPtr, Vector2d.getCPtr(vec), Tol.getCPtr(tol));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isOppositeTo(Vector2d vec) {
    bool ret = touchvgPINVOKE.Vector2d_isOppositeTo__SWIG_1(swigCPtr, Vector2d.getCPtr(vec));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isPerpendicularTo(Vector2d vec, Tol tol) {
    bool ret = touchvgPINVOKE.Vector2d_isPerpendicularTo__SWIG_0(swigCPtr, Vector2d.getCPtr(vec), Tol.getCPtr(tol));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isPerpendicularTo(Vector2d vec) {
    bool ret = touchvgPINVOKE.Vector2d_isPerpendicularTo__SWIG_1(swigCPtr, Vector2d.getCPtr(vec));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float distanceToVector(Vector2d xAxis) {
    float ret = touchvgPINVOKE.Vector2d_distanceToVector(swigCPtr, Vector2d.getCPtr(xAxis));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float projectScaleToVector(Vector2d xAxis) {
    float ret = touchvgPINVOKE.Vector2d_projectScaleToVector(swigCPtr, Vector2d.getCPtr(xAxis));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float projectResolveVector(Vector2d xAxis, Vector2d proj, Vector2d perp) {
    float ret = touchvgPINVOKE.Vector2d_projectResolveVector(swigCPtr, Vector2d.getCPtr(xAxis), Vector2d.getCPtr(proj), Vector2d.getCPtr(perp));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool resolveVector(Vector2d uAxis, Vector2d vAxis, Vector2d uv) {
    bool ret = touchvgPINVOKE.Vector2d_resolveVector__SWIG_0(swigCPtr, Vector2d.getCPtr(uAxis), Vector2d.getCPtr(vAxis), Vector2d.getCPtr(uv));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool resolveVector(Vector2d uAxis, Vector2d vAxis) {
    bool ret = touchvgPINVOKE.Vector2d_resolveVector__SWIG_1(swigCPtr, Vector2d.getCPtr(uAxis), Vector2d.getCPtr(vAxis));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
