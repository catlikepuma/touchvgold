/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace touchvg.core {

using System;
using System.Runtime.InteropServices;

public class MgStorageBase : MgStorage {
  private HandleRef swigCPtr;

  internal MgStorageBase(IntPtr cPtr, bool cMemoryOwn) : base(touchvgPINVOKE.MgStorageBase_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(MgStorageBase obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~MgStorageBase() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          touchvgPINVOKE.delete_MgStorageBase(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public MgStorageBase() : this(touchvgPINVOKE.new_MgStorageBase(), true) {
    SwigDirectorConnect();
  }

  public virtual int readFloatArray(string name, Floats values) {
    int ret = touchvgPINVOKE.MgStorageBase_readFloatArray(swigCPtr, name, Floats.getCPtr(values));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void writeFloatArray(string name, Floats values) {
    touchvgPINVOKE.MgStorageBase_writeFloatArray(swigCPtr, name, Floats.getCPtr(values));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int readString(string name, Chars value) {
    int ret = touchvgPINVOKE.MgStorageBase_readString(swigCPtr, name, Chars.getCPtr(value));
    if (touchvgPINVOKE.SWIGPendingException.Pending) throw touchvgPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("readNode", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateMgStorageBase_0(SwigDirectorreadNode);
    if (SwigDerivedClassHasMethod("writeNode", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateMgStorageBase_1(SwigDirectorwriteNode);
    if (SwigDerivedClassHasMethod("readBool", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateMgStorageBase_2(SwigDirectorreadBool);
    if (SwigDerivedClassHasMethod("readFloat", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateMgStorageBase_3(SwigDirectorreadFloat);
    if (SwigDerivedClassHasMethod("writeBool", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateMgStorageBase_4(SwigDirectorwriteBool);
    if (SwigDerivedClassHasMethod("writeFloat", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateMgStorageBase_5(SwigDirectorwriteFloat);
    if (SwigDerivedClassHasMethod("writeString", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateMgStorageBase_6(SwigDirectorwriteString);
    if (SwigDerivedClassHasMethod("readInt", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateMgStorageBase_7(SwigDirectorreadInt);
    if (SwigDerivedClassHasMethod("writeInt", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateMgStorageBase_8(SwigDirectorwriteInt);
    if (SwigDerivedClassHasMethod("writeUInt", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateMgStorageBase_9(SwigDirectorwriteUInt);
    if (SwigDerivedClassHasMethod("setError", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateMgStorageBase_10(SwigDirectorsetError);
    if (SwigDerivedClassHasMethod("readFloatArray", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateMgStorageBase_11(SwigDirectorreadFloatArray);
    if (SwigDerivedClassHasMethod("writeFloatArray", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateMgStorageBase_12(SwigDirectorwriteFloatArray);
    if (SwigDerivedClassHasMethod("readString", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateMgStorageBase_13(SwigDirectorreadString);
    touchvgPINVOKE.MgStorageBase_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13);
  }

  private bool SwigDerivedClassHasMethod(string methodName, Type[] methodTypes) {
    System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(MgStorageBase));
    return hasDerivedMethod;
  }

  private bool SwigDirectorreadNode(string name, int index, bool ended) {
    return readNode(name, index, ended);
  }

  private bool SwigDirectorwriteNode(string name, int index, bool ended) {
    return writeNode(name, index, ended);
  }

  private bool SwigDirectorreadBool(string name, bool defvalue) {
    return readBool(name, defvalue);
  }

  private float SwigDirectorreadFloat(string name, float defvalue) {
    return readFloat(name, defvalue);
  }

  private void SwigDirectorwriteBool(string name, bool value) {
    writeBool(name, value);
  }

  private void SwigDirectorwriteFloat(string name, float value) {
    writeFloat(name, value);
  }

  private void SwigDirectorwriteString(string name, string value) {
    writeString(name, value);
  }

  private int SwigDirectorreadInt(string name, int defvalue) {
    return readInt(name, defvalue);
  }

  private void SwigDirectorwriteInt(string name, int value) {
    writeInt(name, value);
  }

  private void SwigDirectorwriteUInt(string name, int value) {
    writeUInt(name, value);
  }

  private bool SwigDirectorsetError(string errdesc) {
    return setError(errdesc);
  }

  private int SwigDirectorreadFloatArray(string name, IntPtr values) {
    return readFloatArray(name, new Floats(values, false));
  }

  private void SwigDirectorwriteFloatArray(string name, IntPtr values) {
    writeFloatArray(name, new Floats(values, false));
  }

  private int SwigDirectorreadString(string name, IntPtr value) {
    return readString(name, new Chars(value, false));
  }

  public delegate bool SwigDelegateMgStorageBase_0(string name, int index, bool ended);
  public delegate bool SwigDelegateMgStorageBase_1(string name, int index, bool ended);
  public delegate bool SwigDelegateMgStorageBase_2(string name, bool defvalue);
  public delegate float SwigDelegateMgStorageBase_3(string name, float defvalue);
  public delegate void SwigDelegateMgStorageBase_4(string name, bool value);
  public delegate void SwigDelegateMgStorageBase_5(string name, float value);
  public delegate void SwigDelegateMgStorageBase_6(string name, string value);
  public delegate int SwigDelegateMgStorageBase_7(string name, int defvalue);
  public delegate void SwigDelegateMgStorageBase_8(string name, int value);
  public delegate void SwigDelegateMgStorageBase_9(string name, int value);
  public delegate bool SwigDelegateMgStorageBase_10(string errdesc);
  public delegate int SwigDelegateMgStorageBase_11(string name, IntPtr values);
  public delegate void SwigDelegateMgStorageBase_12(string name, IntPtr values);
  public delegate int SwigDelegateMgStorageBase_13(string name, IntPtr value);

  private SwigDelegateMgStorageBase_0 swigDelegate0;
  private SwigDelegateMgStorageBase_1 swigDelegate1;
  private SwigDelegateMgStorageBase_2 swigDelegate2;
  private SwigDelegateMgStorageBase_3 swigDelegate3;
  private SwigDelegateMgStorageBase_4 swigDelegate4;
  private SwigDelegateMgStorageBase_5 swigDelegate5;
  private SwigDelegateMgStorageBase_6 swigDelegate6;
  private SwigDelegateMgStorageBase_7 swigDelegate7;
  private SwigDelegateMgStorageBase_8 swigDelegate8;
  private SwigDelegateMgStorageBase_9 swigDelegate9;
  private SwigDelegateMgStorageBase_10 swigDelegate10;
  private SwigDelegateMgStorageBase_11 swigDelegate11;
  private SwigDelegateMgStorageBase_12 swigDelegate12;
  private SwigDelegateMgStorageBase_13 swigDelegate13;

  private static Type[] swigMethodTypes0 = new Type[] { typeof(string), typeof(int), typeof(bool) };
  private static Type[] swigMethodTypes1 = new Type[] { typeof(string), typeof(int), typeof(bool) };
  private static Type[] swigMethodTypes2 = new Type[] { typeof(string), typeof(bool) };
  private static Type[] swigMethodTypes3 = new Type[] { typeof(string), typeof(float) };
  private static Type[] swigMethodTypes4 = new Type[] { typeof(string), typeof(bool) };
  private static Type[] swigMethodTypes5 = new Type[] { typeof(string), typeof(float) };
  private static Type[] swigMethodTypes6 = new Type[] { typeof(string), typeof(string) };
  private static Type[] swigMethodTypes7 = new Type[] { typeof(string), typeof(int) };
  private static Type[] swigMethodTypes8 = new Type[] { typeof(string), typeof(int) };
  private static Type[] swigMethodTypes9 = new Type[] { typeof(string), typeof(int) };
  private static Type[] swigMethodTypes10 = new Type[] { typeof(string) };
  private static Type[] swigMethodTypes11 = new Type[] { typeof(string), typeof(Floats) };
  private static Type[] swigMethodTypes12 = new Type[] { typeof(string), typeof(Floats) };
  private static Type[] swigMethodTypes13 = new Type[] { typeof(string), typeof(Chars) };
}

}
