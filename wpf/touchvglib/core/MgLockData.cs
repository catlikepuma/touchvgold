/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace touchvg.core {

using System;
using System.Runtime.InteropServices;

public class MgLockData : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MgLockData(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(MgLockData obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~MgLockData() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          touchvgPINVOKE.delete_MgLockData(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual bool lockData(int flags, int timeout) {
    bool ret = touchvgPINVOKE.MgLockData_lockData(swigCPtr, flags, timeout);
    return ret;
  }

  public virtual int unlockData(bool forWrite) {
    int ret = touchvgPINVOKE.MgLockData_unlockData(swigCPtr, forWrite);
    return ret;
  }

  public virtual void afterChanged() {
    touchvgPINVOKE.MgLockData_afterChanged(swigCPtr);
  }

  public virtual bool lockedForRead() {
    bool ret = touchvgPINVOKE.MgLockData_lockedForRead(swigCPtr);
    return ret;
  }

  public virtual bool lockedForWrite() {
    bool ret = touchvgPINVOKE.MgLockData_lockedForWrite(swigCPtr);
    return ret;
  }

  public virtual int getEditFlags() {
    int ret = touchvgPINVOKE.MgLockData_getEditFlags(swigCPtr);
    return ret;
  }

  public virtual void resetEditFlags() {
    touchvgPINVOKE.MgLockData_resetEditFlags(swigCPtr);
  }

  public virtual bool lockDynData(bool forWrite, int timeout) {
    bool ret = touchvgPINVOKE.MgLockData_lockDynData(swigCPtr, forWrite, timeout);
    return ret;
  }

  public virtual int unlockDynData(bool forWrite) {
    int ret = touchvgPINVOKE.MgLockData_unlockDynData(swigCPtr, forWrite);
    return ret;
  }

  public virtual bool lockedForReadDyn() {
    bool ret = touchvgPINVOKE.MgLockData_lockedForReadDyn(swigCPtr);
    return ret;
  }

  public virtual bool lockedForWriteDyn() {
    bool ret = touchvgPINVOKE.MgLockData_lockedForWriteDyn(swigCPtr);
    return ret;
  }

}

}
